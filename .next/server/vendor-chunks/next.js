/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next";
exports.ids = ["vendor-chunks/next"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/output/log.js":
/*!****************************************************!*\
  !*** ./node_modules/next/dist/build/output/log.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    bootstrap: function() {\n        return bootstrap;\n    },\n    error: function() {\n        return error;\n    },\n    event: function() {\n        return event;\n    },\n    info: function() {\n        return info;\n    },\n    prefixes: function() {\n        return prefixes;\n    },\n    ready: function() {\n        return ready;\n    },\n    trace: function() {\n        return trace;\n    },\n    wait: function() {\n        return wait;\n    },\n    warn: function() {\n        return warn;\n    },\n    warnOnce: function() {\n        return warnOnce;\n    }\n});\nconst _picocolors = __webpack_require__(/*! ../../lib/picocolors */ \"(rsc)/./node_modules/next/dist/lib/picocolors.js\");\nconst prefixes = {\n    wait: (0, _picocolors.white)((0, _picocolors.bold)(\"○\")),\n    error: (0, _picocolors.red)((0, _picocolors.bold)(\"⨯\")),\n    warn: (0, _picocolors.yellow)((0, _picocolors.bold)(\"⚠\")),\n    ready: \"▲\",\n    info: (0, _picocolors.white)((0, _picocolors.bold)(\" \")),\n    event: (0, _picocolors.green)((0, _picocolors.bold)(\"✓\")),\n    trace: (0, _picocolors.magenta)((0, _picocolors.bold)(\"\\xbb\"))\n};\nconst LOGGING_METHOD = {\n    log: \"log\",\n    warn: \"warn\",\n    error: \"error\"\n};\nfunction prefixedLog(prefixType, ...message) {\n    if ((message[0] === \"\" || message[0] === undefined) && message.length === 1) {\n        message.shift();\n    }\n    const consoleMethod = prefixType in LOGGING_METHOD ? LOGGING_METHOD[prefixType] : \"log\";\n    const prefix = prefixes[prefixType];\n    // If there's no message, don't print the prefix but a new line\n    if (message.length === 0) {\n        console[consoleMethod](\"\");\n    } else {\n        console[consoleMethod](\" \" + prefix, ...message);\n    }\n}\nfunction bootstrap(...message) {\n    console.log(\" \", ...message);\n}\nfunction wait(...message) {\n    prefixedLog(\"wait\", ...message);\n}\nfunction error(...message) {\n    prefixedLog(\"error\", ...message);\n}\nfunction warn(...message) {\n    prefixedLog(\"warn\", ...message);\n}\nfunction ready(...message) {\n    prefixedLog(\"ready\", ...message);\n}\nfunction info(...message) {\n    prefixedLog(\"info\", ...message);\n}\nfunction event(...message) {\n    prefixedLog(\"event\", ...message);\n}\nfunction trace(...message) {\n    prefixedLog(\"trace\", ...message);\n}\nconst warnOnceMessages = new Set();\nfunction warnOnce(...message) {\n    if (!warnOnceMessages.has(message[0])) {\n        warnOnceMessages.add(message.join(\" \"));\n        warn(...message);\n    }\n}\n\n//# sourceMappingURL=log.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL291dHB1dC9sb2cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixNQUFNLENBV0w7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG9CQUFvQixtQkFBTyxDQUFDLDhFQUFzQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlzdGVyeW1lc3NhZ2UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL291dHB1dC9sb2cuanM/NjQzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGJvb3RzdHJhcDogbnVsbCxcbiAgICBlcnJvcjogbnVsbCxcbiAgICBldmVudDogbnVsbCxcbiAgICBpbmZvOiBudWxsLFxuICAgIHByZWZpeGVzOiBudWxsLFxuICAgIHJlYWR5OiBudWxsLFxuICAgIHRyYWNlOiBudWxsLFxuICAgIHdhaXQ6IG51bGwsXG4gICAgd2FybjogbnVsbCxcbiAgICB3YXJuT25jZTogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBib290c3RyYXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYm9vdHN0cmFwO1xuICAgIH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgfSxcbiAgICBldmVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9LFxuICAgIGluZm86IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaW5mbztcbiAgICB9LFxuICAgIHByZWZpeGVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeGVzO1xuICAgIH0sXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVhZHk7XG4gICAgfSxcbiAgICB0cmFjZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0cmFjZTtcbiAgICB9LFxuICAgIHdhaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gd2FpdDtcbiAgICB9LFxuICAgIHdhcm46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gd2FybjtcbiAgICB9LFxuICAgIHdhcm5PbmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdhcm5PbmNlO1xuICAgIH1cbn0pO1xuY29uc3QgX3BpY29jb2xvcnMgPSByZXF1aXJlKFwiLi4vLi4vbGliL3BpY29jb2xvcnNcIik7XG5jb25zdCBwcmVmaXhlcyA9IHtcbiAgICB3YWl0OiAoMCwgX3BpY29jb2xvcnMud2hpdGUpKCgwLCBfcGljb2NvbG9ycy5ib2xkKShcIuKXi1wiKSksXG4gICAgZXJyb3I6ICgwLCBfcGljb2NvbG9ycy5yZWQpKCgwLCBfcGljb2NvbG9ycy5ib2xkKShcIuKor1wiKSksXG4gICAgd2FybjogKDAsIF9waWNvY29sb3JzLnllbGxvdykoKDAsIF9waWNvY29sb3JzLmJvbGQpKFwi4pqgXCIpKSxcbiAgICByZWFkeTogXCLilrJcIixcbiAgICBpbmZvOiAoMCwgX3BpY29jb2xvcnMud2hpdGUpKCgwLCBfcGljb2NvbG9ycy5ib2xkKShcIiBcIikpLFxuICAgIGV2ZW50OiAoMCwgX3BpY29jb2xvcnMuZ3JlZW4pKCgwLCBfcGljb2NvbG9ycy5ib2xkKShcIuKck1wiKSksXG4gICAgdHJhY2U6ICgwLCBfcGljb2NvbG9ycy5tYWdlbnRhKSgoMCwgX3BpY29jb2xvcnMuYm9sZCkoXCJcXHhiYlwiKSlcbn07XG5jb25zdCBMT0dHSU5HX01FVEhPRCA9IHtcbiAgICBsb2c6IFwibG9nXCIsXG4gICAgd2FybjogXCJ3YXJuXCIsXG4gICAgZXJyb3I6IFwiZXJyb3JcIlxufTtcbmZ1bmN0aW9uIHByZWZpeGVkTG9nKHByZWZpeFR5cGUsIC4uLm1lc3NhZ2UpIHtcbiAgICBpZiAoKG1lc3NhZ2VbMF0gPT09IFwiXCIgfHwgbWVzc2FnZVswXSA9PT0gdW5kZWZpbmVkKSAmJiBtZXNzYWdlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBtZXNzYWdlLnNoaWZ0KCk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnNvbGVNZXRob2QgPSBwcmVmaXhUeXBlIGluIExPR0dJTkdfTUVUSE9EID8gTE9HR0lOR19NRVRIT0RbcHJlZml4VHlwZV0gOiBcImxvZ1wiO1xuICAgIGNvbnN0IHByZWZpeCA9IHByZWZpeGVzW3ByZWZpeFR5cGVdO1xuICAgIC8vIElmIHRoZXJlJ3Mgbm8gbWVzc2FnZSwgZG9uJ3QgcHJpbnQgdGhlIHByZWZpeCBidXQgYSBuZXcgbGluZVxuICAgIGlmIChtZXNzYWdlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGVNZXRob2RdKFwiXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGVbY29uc29sZU1ldGhvZF0oXCIgXCIgKyBwcmVmaXgsIC4uLm1lc3NhZ2UpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGJvb3RzdHJhcCguLi5tZXNzYWdlKSB7XG4gICAgY29uc29sZS5sb2coXCIgXCIsIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gd2FpdCguLi5tZXNzYWdlKSB7XG4gICAgcHJlZml4ZWRMb2coXCJ3YWl0XCIsIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gZXJyb3IoLi4ubWVzc2FnZSkge1xuICAgIHByZWZpeGVkTG9nKFwiZXJyb3JcIiwgLi4ubWVzc2FnZSk7XG59XG5mdW5jdGlvbiB3YXJuKC4uLm1lc3NhZ2UpIHtcbiAgICBwcmVmaXhlZExvZyhcIndhcm5cIiwgLi4ubWVzc2FnZSk7XG59XG5mdW5jdGlvbiByZWFkeSguLi5tZXNzYWdlKSB7XG4gICAgcHJlZml4ZWRMb2coXCJyZWFkeVwiLCAuLi5tZXNzYWdlKTtcbn1cbmZ1bmN0aW9uIGluZm8oLi4ubWVzc2FnZSkge1xuICAgIHByZWZpeGVkTG9nKFwiaW5mb1wiLCAuLi5tZXNzYWdlKTtcbn1cbmZ1bmN0aW9uIGV2ZW50KC4uLm1lc3NhZ2UpIHtcbiAgICBwcmVmaXhlZExvZyhcImV2ZW50XCIsIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gdHJhY2UoLi4ubWVzc2FnZSkge1xuICAgIHByZWZpeGVkTG9nKFwidHJhY2VcIiwgLi4ubWVzc2FnZSk7XG59XG5jb25zdCB3YXJuT25jZU1lc3NhZ2VzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gd2Fybk9uY2UoLi4ubWVzc2FnZSkge1xuICAgIGlmICghd2Fybk9uY2VNZXNzYWdlcy5oYXMobWVzc2FnZVswXSkpIHtcbiAgICAgICAgd2Fybk9uY2VNZXNzYWdlcy5hZGQobWVzc2FnZS5qb2luKFwiIFwiKSk7XG4gICAgICAgIHdhcm4oLi4ubWVzc2FnZSk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2cuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/output/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/hooks-server-context.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/hooks-server-context.js ***!
  \**************************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    DynamicServerError: function() {\n        return DynamicServerError;\n    },\n    isDynamicServerError: function() {\n        return isDynamicServerError;\n    }\n});\nconst DYNAMIC_ERROR_CODE = \"DYNAMIC_SERVER_USAGE\";\nclass DynamicServerError extends Error {\n    constructor(description){\n        super(\"Dynamic server usage: \" + description);\n        this.description = description;\n        this.digest = DYNAMIC_ERROR_CODE;\n    }\n}\nfunction isDynamicServerError(err) {\n    if (typeof err !== \"object\" || err === null || !(\"digest\" in err) || typeof err.digest !== \"string\") {\n        return false;\n    }\n    return err.digest === DYNAMIC_ERROR_CODE;\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=hooks-server-context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2hvb2tzLXNlcnZlci1jb250ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztJQUVhQSxvQkFBa0I7ZUFBbEJBOztJQVFHQyxzQkFBb0I7ZUFBcEJBOzs7QUFWaEIsTUFBTUMscUJBQXFCO0FBRXBCLE1BQU1GLDJCQUEyQkc7SUFHdENDLFlBQVlDLFdBQW1DLENBQUU7UUFDL0MsS0FBSyxDQUFDLDJCQUF5QkE7YUFETEEsV0FBQUEsR0FBQUE7YUFGNUJDLE1BQUFBLEdBQW9DSjtJQUlwQztBQUNGO0FBRU8sU0FBU0QscUJBQXFCTSxHQUFZO0lBQy9DLElBQ0UsT0FBT0EsUUFBUSxZQUNmQSxRQUFRLFFBQ1IsQ0FBRSxhQUFZQSxHQUFBQSxLQUNkLE9BQU9BLElBQUlELE1BQU0sS0FBSyxVQUN0QjtRQUNBLE9BQU87SUFDVDtJQUVBLE9BQU9DLElBQUlELE1BQU0sS0FBS0o7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teXN0ZXJ5bWVzc2FnZS8uLi8uLi8uLi9zcmMvY2xpZW50L2NvbXBvbmVudHMvaG9va3Mtc2VydmVyLWNvbnRleHQudHM/ODIzOCJdLCJuYW1lcyI6WyJEeW5hbWljU2VydmVyRXJyb3IiLCJpc0R5bmFtaWNTZXJ2ZXJFcnJvciIsIkRZTkFNSUNfRVJST1JfQ09ERSIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJkZXNjcmlwdGlvbiIsImRpZ2VzdCIsImVyciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/hooks-server-context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/static-generation-bailout.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/static-generation-bailout.js ***!
  \*******************************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    StaticGenBailoutError: function() {\n        return StaticGenBailoutError;\n    },\n    isStaticGenBailoutError: function() {\n        return isStaticGenBailoutError;\n    }\n});\nconst NEXT_STATIC_GEN_BAILOUT = \"NEXT_STATIC_GEN_BAILOUT\";\nclass StaticGenBailoutError extends Error {\n    constructor(...args){\n        super(...args);\n        this.code = NEXT_STATIC_GEN_BAILOUT;\n    }\n}\nfunction isStaticGenBailoutError(error) {\n    if (typeof error !== \"object\" || error === null || !(\"code\" in error)) {\n        return false;\n    }\n    return error.code === NEXT_STATIC_GEN_BAILOUT;\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=static-generation-bailout.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWJhaWxvdXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0lBRWFBLHVCQUFxQjtlQUFyQkE7O0lBSUdDLHlCQUF1QjtlQUF2QkE7OztBQU5oQixNQUFNQywwQkFBMEI7QUFFekIsTUFBTUYsOEJBQThCRzs7O2FBQ3pCQyxJQUFBQSxHQUFPRjs7QUFDekI7QUFFTyxTQUFTRCx3QkFDZEksS0FBYztJQUVkLElBQUksT0FBT0EsVUFBVSxZQUFZQSxVQUFVLFFBQVEsQ0FBRSxXQUFVQSxLQUFBQSxHQUFRO1FBQ3JFLE9BQU87SUFDVDtJQUVBLE9BQU9BLE1BQU1ELElBQUksS0FBS0Y7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teXN0ZXJ5bWVzc2FnZS8uLi8uLi8uLi9zcmMvY2xpZW50L2NvbXBvbmVudHMvc3RhdGljLWdlbmVyYXRpb24tYmFpbG91dC50cz80YzMxIl0sIm5hbWVzIjpbIlN0YXRpY0dlbkJhaWxvdXRFcnJvciIsImlzU3RhdGljR2VuQmFpbG91dEVycm9yIiwiTkVYVF9TVEFUSUNfR0VOX0JBSUxPVVQiLCJFcnJvciIsImNvZGUiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/static-generation-bailout.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@opentelemetry/api/index.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("(()=>{\"use strict\";var e={491:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ContextAPI=void 0;const n=r(223);const a=r(172);const o=r(930);const i=\"context\";const c=new n.NoopContextManager;class ContextAPI{constructor(){}static getInstance(){if(!this._instance){this._instance=new ContextAPI}return this._instance}setGlobalContextManager(e){return(0,a.registerGlobal)(i,e,o.DiagAPI.instance())}active(){return this._getContextManager().active()}with(e,t,r,...n){return this._getContextManager().with(e,t,r,...n)}bind(e,t){return this._getContextManager().bind(e,t)}_getContextManager(){return(0,a.getGlobal)(i)||c}disable(){this._getContextManager().disable();(0,a.unregisterGlobal)(i,o.DiagAPI.instance())}}t.ContextAPI=ContextAPI},930:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagAPI=void 0;const n=r(56);const a=r(912);const o=r(957);const i=r(172);const c=\"diag\";class DiagAPI{constructor(){function _logProxy(e){return function(...t){const r=(0,i.getGlobal)(\"diag\");if(!r)return;return r[e](...t)}}const e=this;const setLogger=(t,r={logLevel:o.DiagLogLevel.INFO})=>{var n,c,s;if(t===e){const t=new Error(\"Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation\");e.error((n=t.stack)!==null&&n!==void 0?n:t.message);return false}if(typeof r===\"number\"){r={logLevel:r}}const u=(0,i.getGlobal)(\"diag\");const l=(0,a.createLogLevelDiagLogger)((c=r.logLevel)!==null&&c!==void 0?c:o.DiagLogLevel.INFO,t);if(u&&!r.suppressOverrideMessage){const e=(s=(new Error).stack)!==null&&s!==void 0?s:\"<failed to generate stacktrace>\";u.warn(`Current logger will be overwritten from ${e}`);l.warn(`Current logger will overwrite one already registered from ${e}`)}return(0,i.registerGlobal)(\"diag\",l,e,true)};e.setLogger=setLogger;e.disable=()=>{(0,i.unregisterGlobal)(c,e)};e.createComponentLogger=e=>new n.DiagComponentLogger(e);e.verbose=_logProxy(\"verbose\");e.debug=_logProxy(\"debug\");e.info=_logProxy(\"info\");e.warn=_logProxy(\"warn\");e.error=_logProxy(\"error\")}static instance(){if(!this._instance){this._instance=new DiagAPI}return this._instance}}t.DiagAPI=DiagAPI},653:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.MetricsAPI=void 0;const n=r(660);const a=r(172);const o=r(930);const i=\"metrics\";class MetricsAPI{constructor(){}static getInstance(){if(!this._instance){this._instance=new MetricsAPI}return this._instance}setGlobalMeterProvider(e){return(0,a.registerGlobal)(i,e,o.DiagAPI.instance())}getMeterProvider(){return(0,a.getGlobal)(i)||n.NOOP_METER_PROVIDER}getMeter(e,t,r){return this.getMeterProvider().getMeter(e,t,r)}disable(){(0,a.unregisterGlobal)(i,o.DiagAPI.instance())}}t.MetricsAPI=MetricsAPI},181:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.PropagationAPI=void 0;const n=r(172);const a=r(874);const o=r(194);const i=r(277);const c=r(369);const s=r(930);const u=\"propagation\";const l=new a.NoopTextMapPropagator;class PropagationAPI{constructor(){this.createBaggage=c.createBaggage;this.getBaggage=i.getBaggage;this.getActiveBaggage=i.getActiveBaggage;this.setBaggage=i.setBaggage;this.deleteBaggage=i.deleteBaggage}static getInstance(){if(!this._instance){this._instance=new PropagationAPI}return this._instance}setGlobalPropagator(e){return(0,n.registerGlobal)(u,e,s.DiagAPI.instance())}inject(e,t,r=o.defaultTextMapSetter){return this._getGlobalPropagator().inject(e,t,r)}extract(e,t,r=o.defaultTextMapGetter){return this._getGlobalPropagator().extract(e,t,r)}fields(){return this._getGlobalPropagator().fields()}disable(){(0,n.unregisterGlobal)(u,s.DiagAPI.instance())}_getGlobalPropagator(){return(0,n.getGlobal)(u)||l}}t.PropagationAPI=PropagationAPI},997:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.TraceAPI=void 0;const n=r(172);const a=r(846);const o=r(139);const i=r(607);const c=r(930);const s=\"trace\";class TraceAPI{constructor(){this._proxyTracerProvider=new a.ProxyTracerProvider;this.wrapSpanContext=o.wrapSpanContext;this.isSpanContextValid=o.isSpanContextValid;this.deleteSpan=i.deleteSpan;this.getSpan=i.getSpan;this.getActiveSpan=i.getActiveSpan;this.getSpanContext=i.getSpanContext;this.setSpan=i.setSpan;this.setSpanContext=i.setSpanContext}static getInstance(){if(!this._instance){this._instance=new TraceAPI}return this._instance}setGlobalTracerProvider(e){const t=(0,n.registerGlobal)(s,this._proxyTracerProvider,c.DiagAPI.instance());if(t){this._proxyTracerProvider.setDelegate(e)}return t}getTracerProvider(){return(0,n.getGlobal)(s)||this._proxyTracerProvider}getTracer(e,t){return this.getTracerProvider().getTracer(e,t)}disable(){(0,n.unregisterGlobal)(s,c.DiagAPI.instance());this._proxyTracerProvider=new a.ProxyTracerProvider}}t.TraceAPI=TraceAPI},277:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.deleteBaggage=t.setBaggage=t.getActiveBaggage=t.getBaggage=void 0;const n=r(491);const a=r(780);const o=(0,a.createContextKey)(\"OpenTelemetry Baggage Key\");function getBaggage(e){return e.getValue(o)||undefined}t.getBaggage=getBaggage;function getActiveBaggage(){return getBaggage(n.ContextAPI.getInstance().active())}t.getActiveBaggage=getActiveBaggage;function setBaggage(e,t){return e.setValue(o,t)}t.setBaggage=setBaggage;function deleteBaggage(e){return e.deleteValue(o)}t.deleteBaggage=deleteBaggage},993:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.BaggageImpl=void 0;class BaggageImpl{constructor(e){this._entries=e?new Map(e):new Map}getEntry(e){const t=this._entries.get(e);if(!t){return undefined}return Object.assign({},t)}getAllEntries(){return Array.from(this._entries.entries()).map((([e,t])=>[e,t]))}setEntry(e,t){const r=new BaggageImpl(this._entries);r._entries.set(e,t);return r}removeEntry(e){const t=new BaggageImpl(this._entries);t._entries.delete(e);return t}removeEntries(...e){const t=new BaggageImpl(this._entries);for(const r of e){t._entries.delete(r)}return t}clear(){return new BaggageImpl}}t.BaggageImpl=BaggageImpl},830:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.baggageEntryMetadataSymbol=void 0;t.baggageEntryMetadataSymbol=Symbol(\"BaggageEntryMetadata\")},369:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.baggageEntryMetadataFromString=t.createBaggage=void 0;const n=r(930);const a=r(993);const o=r(830);const i=n.DiagAPI.instance();function createBaggage(e={}){return new a.BaggageImpl(new Map(Object.entries(e)))}t.createBaggage=createBaggage;function baggageEntryMetadataFromString(e){if(typeof e!==\"string\"){i.error(`Cannot create baggage metadata from unknown type: ${typeof e}`);e=\"\"}return{__TYPE__:o.baggageEntryMetadataSymbol,toString(){return e}}}t.baggageEntryMetadataFromString=baggageEntryMetadataFromString},67:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.context=void 0;const n=r(491);t.context=n.ContextAPI.getInstance()},223:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopContextManager=void 0;const n=r(780);class NoopContextManager{active(){return n.ROOT_CONTEXT}with(e,t,r,...n){return t.call(r,...n)}bind(e,t){return t}enable(){return this}disable(){return this}}t.NoopContextManager=NoopContextManager},780:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ROOT_CONTEXT=t.createContextKey=void 0;function createContextKey(e){return Symbol.for(e)}t.createContextKey=createContextKey;class BaseContext{constructor(e){const t=this;t._currentContext=e?new Map(e):new Map;t.getValue=e=>t._currentContext.get(e);t.setValue=(e,r)=>{const n=new BaseContext(t._currentContext);n._currentContext.set(e,r);return n};t.deleteValue=e=>{const r=new BaseContext(t._currentContext);r._currentContext.delete(e);return r}}}t.ROOT_CONTEXT=new BaseContext},506:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.diag=void 0;const n=r(930);t.diag=n.DiagAPI.instance()},56:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagComponentLogger=void 0;const n=r(172);class DiagComponentLogger{constructor(e){this._namespace=e.namespace||\"DiagComponentLogger\"}debug(...e){return logProxy(\"debug\",this._namespace,e)}error(...e){return logProxy(\"error\",this._namespace,e)}info(...e){return logProxy(\"info\",this._namespace,e)}warn(...e){return logProxy(\"warn\",this._namespace,e)}verbose(...e){return logProxy(\"verbose\",this._namespace,e)}}t.DiagComponentLogger=DiagComponentLogger;function logProxy(e,t,r){const a=(0,n.getGlobal)(\"diag\");if(!a){return}r.unshift(t);return a[e](...r)}},972:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagConsoleLogger=void 0;const r=[{n:\"error\",c:\"error\"},{n:\"warn\",c:\"warn\"},{n:\"info\",c:\"info\"},{n:\"debug\",c:\"debug\"},{n:\"verbose\",c:\"trace\"}];class DiagConsoleLogger{constructor(){function _consoleFunc(e){return function(...t){if(console){let r=console[e];if(typeof r!==\"function\"){r=console.log}if(typeof r===\"function\"){return r.apply(console,t)}}}}for(let e=0;e<r.length;e++){this[r[e].n]=_consoleFunc(r[e].c)}}}t.DiagConsoleLogger=DiagConsoleLogger},912:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.createLogLevelDiagLogger=void 0;const n=r(957);function createLogLevelDiagLogger(e,t){if(e<n.DiagLogLevel.NONE){e=n.DiagLogLevel.NONE}else if(e>n.DiagLogLevel.ALL){e=n.DiagLogLevel.ALL}t=t||{};function _filterFunc(r,n){const a=t[r];if(typeof a===\"function\"&&e>=n){return a.bind(t)}return function(){}}return{error:_filterFunc(\"error\",n.DiagLogLevel.ERROR),warn:_filterFunc(\"warn\",n.DiagLogLevel.WARN),info:_filterFunc(\"info\",n.DiagLogLevel.INFO),debug:_filterFunc(\"debug\",n.DiagLogLevel.DEBUG),verbose:_filterFunc(\"verbose\",n.DiagLogLevel.VERBOSE)}}t.createLogLevelDiagLogger=createLogLevelDiagLogger},957:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagLogLevel=void 0;var r;(function(e){e[e[\"NONE\"]=0]=\"NONE\";e[e[\"ERROR\"]=30]=\"ERROR\";e[e[\"WARN\"]=50]=\"WARN\";e[e[\"INFO\"]=60]=\"INFO\";e[e[\"DEBUG\"]=70]=\"DEBUG\";e[e[\"VERBOSE\"]=80]=\"VERBOSE\";e[e[\"ALL\"]=9999]=\"ALL\"})(r=t.DiagLogLevel||(t.DiagLogLevel={}))},172:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.unregisterGlobal=t.getGlobal=t.registerGlobal=void 0;const n=r(200);const a=r(521);const o=r(130);const i=a.VERSION.split(\".\")[0];const c=Symbol.for(`opentelemetry.js.api.${i}`);const s=n._globalThis;function registerGlobal(e,t,r,n=false){var o;const i=s[c]=(o=s[c])!==null&&o!==void 0?o:{version:a.VERSION};if(!n&&i[e]){const t=new Error(`@opentelemetry/api: Attempted duplicate registration of API: ${e}`);r.error(t.stack||t.message);return false}if(i.version!==a.VERSION){const t=new Error(`@opentelemetry/api: Registration of version v${i.version} for ${e} does not match previously registered API v${a.VERSION}`);r.error(t.stack||t.message);return false}i[e]=t;r.debug(`@opentelemetry/api: Registered a global for ${e} v${a.VERSION}.`);return true}t.registerGlobal=registerGlobal;function getGlobal(e){var t,r;const n=(t=s[c])===null||t===void 0?void 0:t.version;if(!n||!(0,o.isCompatible)(n)){return}return(r=s[c])===null||r===void 0?void 0:r[e]}t.getGlobal=getGlobal;function unregisterGlobal(e,t){t.debug(`@opentelemetry/api: Unregistering a global for ${e} v${a.VERSION}.`);const r=s[c];if(r){delete r[e]}}t.unregisterGlobal=unregisterGlobal},130:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.isCompatible=t._makeCompatibilityCheck=void 0;const n=r(521);const a=/^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;function _makeCompatibilityCheck(e){const t=new Set([e]);const r=new Set;const n=e.match(a);if(!n){return()=>false}const o={major:+n[1],minor:+n[2],patch:+n[3],prerelease:n[4]};if(o.prerelease!=null){return function isExactmatch(t){return t===e}}function _reject(e){r.add(e);return false}function _accept(e){t.add(e);return true}return function isCompatible(e){if(t.has(e)){return true}if(r.has(e)){return false}const n=e.match(a);if(!n){return _reject(e)}const i={major:+n[1],minor:+n[2],patch:+n[3],prerelease:n[4]};if(i.prerelease!=null){return _reject(e)}if(o.major!==i.major){return _reject(e)}if(o.major===0){if(o.minor===i.minor&&o.patch<=i.patch){return _accept(e)}return _reject(e)}if(o.minor<=i.minor){return _accept(e)}return _reject(e)}}t._makeCompatibilityCheck=_makeCompatibilityCheck;t.isCompatible=_makeCompatibilityCheck(n.VERSION)},886:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.metrics=void 0;const n=r(653);t.metrics=n.MetricsAPI.getInstance()},901:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ValueType=void 0;var r;(function(e){e[e[\"INT\"]=0]=\"INT\";e[e[\"DOUBLE\"]=1]=\"DOUBLE\"})(r=t.ValueType||(t.ValueType={}))},102:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.createNoopMeter=t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC=t.NOOP_OBSERVABLE_GAUGE_METRIC=t.NOOP_OBSERVABLE_COUNTER_METRIC=t.NOOP_UP_DOWN_COUNTER_METRIC=t.NOOP_HISTOGRAM_METRIC=t.NOOP_COUNTER_METRIC=t.NOOP_METER=t.NoopObservableUpDownCounterMetric=t.NoopObservableGaugeMetric=t.NoopObservableCounterMetric=t.NoopObservableMetric=t.NoopHistogramMetric=t.NoopUpDownCounterMetric=t.NoopCounterMetric=t.NoopMetric=t.NoopMeter=void 0;class NoopMeter{constructor(){}createHistogram(e,r){return t.NOOP_HISTOGRAM_METRIC}createCounter(e,r){return t.NOOP_COUNTER_METRIC}createUpDownCounter(e,r){return t.NOOP_UP_DOWN_COUNTER_METRIC}createObservableGauge(e,r){return t.NOOP_OBSERVABLE_GAUGE_METRIC}createObservableCounter(e,r){return t.NOOP_OBSERVABLE_COUNTER_METRIC}createObservableUpDownCounter(e,r){return t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC}addBatchObservableCallback(e,t){}removeBatchObservableCallback(e){}}t.NoopMeter=NoopMeter;class NoopMetric{}t.NoopMetric=NoopMetric;class NoopCounterMetric extends NoopMetric{add(e,t){}}t.NoopCounterMetric=NoopCounterMetric;class NoopUpDownCounterMetric extends NoopMetric{add(e,t){}}t.NoopUpDownCounterMetric=NoopUpDownCounterMetric;class NoopHistogramMetric extends NoopMetric{record(e,t){}}t.NoopHistogramMetric=NoopHistogramMetric;class NoopObservableMetric{addCallback(e){}removeCallback(e){}}t.NoopObservableMetric=NoopObservableMetric;class NoopObservableCounterMetric extends NoopObservableMetric{}t.NoopObservableCounterMetric=NoopObservableCounterMetric;class NoopObservableGaugeMetric extends NoopObservableMetric{}t.NoopObservableGaugeMetric=NoopObservableGaugeMetric;class NoopObservableUpDownCounterMetric extends NoopObservableMetric{}t.NoopObservableUpDownCounterMetric=NoopObservableUpDownCounterMetric;t.NOOP_METER=new NoopMeter;t.NOOP_COUNTER_METRIC=new NoopCounterMetric;t.NOOP_HISTOGRAM_METRIC=new NoopHistogramMetric;t.NOOP_UP_DOWN_COUNTER_METRIC=new NoopUpDownCounterMetric;t.NOOP_OBSERVABLE_COUNTER_METRIC=new NoopObservableCounterMetric;t.NOOP_OBSERVABLE_GAUGE_METRIC=new NoopObservableGaugeMetric;t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC=new NoopObservableUpDownCounterMetric;function createNoopMeter(){return t.NOOP_METER}t.createNoopMeter=createNoopMeter},660:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NOOP_METER_PROVIDER=t.NoopMeterProvider=void 0;const n=r(102);class NoopMeterProvider{getMeter(e,t,r){return n.NOOP_METER}}t.NoopMeterProvider=NoopMeterProvider;t.NOOP_METER_PROVIDER=new NoopMeterProvider},200:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){if(n===undefined)n=r;Object.defineProperty(e,n,{enumerable:true,get:function(){return t[r]}})}:function(e,t,r,n){if(n===undefined)n=r;e[n]=t[r]});var a=this&&this.__exportStar||function(e,t){for(var r in e)if(r!==\"default\"&&!Object.prototype.hasOwnProperty.call(t,r))n(t,e,r)};Object.defineProperty(t,\"__esModule\",{value:true});a(r(46),t)},651:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t._globalThis=void 0;t._globalThis=typeof globalThis===\"object\"?globalThis:global},46:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){if(n===undefined)n=r;Object.defineProperty(e,n,{enumerable:true,get:function(){return t[r]}})}:function(e,t,r,n){if(n===undefined)n=r;e[n]=t[r]});var a=this&&this.__exportStar||function(e,t){for(var r in e)if(r!==\"default\"&&!Object.prototype.hasOwnProperty.call(t,r))n(t,e,r)};Object.defineProperty(t,\"__esModule\",{value:true});a(r(651),t)},939:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.propagation=void 0;const n=r(181);t.propagation=n.PropagationAPI.getInstance()},874:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopTextMapPropagator=void 0;class NoopTextMapPropagator{inject(e,t){}extract(e,t){return e}fields(){return[]}}t.NoopTextMapPropagator=NoopTextMapPropagator},194:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.defaultTextMapSetter=t.defaultTextMapGetter=void 0;t.defaultTextMapGetter={get(e,t){if(e==null){return undefined}return e[t]},keys(e){if(e==null){return[]}return Object.keys(e)}};t.defaultTextMapSetter={set(e,t,r){if(e==null){return}e[t]=r}}},845:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.trace=void 0;const n=r(997);t.trace=n.TraceAPI.getInstance()},403:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NonRecordingSpan=void 0;const n=r(476);class NonRecordingSpan{constructor(e=n.INVALID_SPAN_CONTEXT){this._spanContext=e}spanContext(){return this._spanContext}setAttribute(e,t){return this}setAttributes(e){return this}addEvent(e,t){return this}setStatus(e){return this}updateName(e){return this}end(e){}isRecording(){return false}recordException(e,t){}}t.NonRecordingSpan=NonRecordingSpan},614:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopTracer=void 0;const n=r(491);const a=r(607);const o=r(403);const i=r(139);const c=n.ContextAPI.getInstance();class NoopTracer{startSpan(e,t,r=c.active()){const n=Boolean(t===null||t===void 0?void 0:t.root);if(n){return new o.NonRecordingSpan}const s=r&&(0,a.getSpanContext)(r);if(isSpanContext(s)&&(0,i.isSpanContextValid)(s)){return new o.NonRecordingSpan(s)}else{return new o.NonRecordingSpan}}startActiveSpan(e,t,r,n){let o;let i;let s;if(arguments.length<2){return}else if(arguments.length===2){s=t}else if(arguments.length===3){o=t;s=r}else{o=t;i=r;s=n}const u=i!==null&&i!==void 0?i:c.active();const l=this.startSpan(e,o,u);const g=(0,a.setSpan)(u,l);return c.with(g,s,undefined,l)}}t.NoopTracer=NoopTracer;function isSpanContext(e){return typeof e===\"object\"&&typeof e[\"spanId\"]===\"string\"&&typeof e[\"traceId\"]===\"string\"&&typeof e[\"traceFlags\"]===\"number\"}},124:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopTracerProvider=void 0;const n=r(614);class NoopTracerProvider{getTracer(e,t,r){return new n.NoopTracer}}t.NoopTracerProvider=NoopTracerProvider},125:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ProxyTracer=void 0;const n=r(614);const a=new n.NoopTracer;class ProxyTracer{constructor(e,t,r,n){this._provider=e;this.name=t;this.version=r;this.options=n}startSpan(e,t,r){return this._getTracer().startSpan(e,t,r)}startActiveSpan(e,t,r,n){const a=this._getTracer();return Reflect.apply(a.startActiveSpan,a,arguments)}_getTracer(){if(this._delegate){return this._delegate}const e=this._provider.getDelegateTracer(this.name,this.version,this.options);if(!e){return a}this._delegate=e;return this._delegate}}t.ProxyTracer=ProxyTracer},846:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ProxyTracerProvider=void 0;const n=r(125);const a=r(124);const o=new a.NoopTracerProvider;class ProxyTracerProvider{getTracer(e,t,r){var a;return(a=this.getDelegateTracer(e,t,r))!==null&&a!==void 0?a:new n.ProxyTracer(this,e,t,r)}getDelegate(){var e;return(e=this._delegate)!==null&&e!==void 0?e:o}setDelegate(e){this._delegate=e}getDelegateTracer(e,t,r){var n;return(n=this._delegate)===null||n===void 0?void 0:n.getTracer(e,t,r)}}t.ProxyTracerProvider=ProxyTracerProvider},996:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.SamplingDecision=void 0;var r;(function(e){e[e[\"NOT_RECORD\"]=0]=\"NOT_RECORD\";e[e[\"RECORD\"]=1]=\"RECORD\";e[e[\"RECORD_AND_SAMPLED\"]=2]=\"RECORD_AND_SAMPLED\"})(r=t.SamplingDecision||(t.SamplingDecision={}))},607:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.getSpanContext=t.setSpanContext=t.deleteSpan=t.setSpan=t.getActiveSpan=t.getSpan=void 0;const n=r(780);const a=r(403);const o=r(491);const i=(0,n.createContextKey)(\"OpenTelemetry Context Key SPAN\");function getSpan(e){return e.getValue(i)||undefined}t.getSpan=getSpan;function getActiveSpan(){return getSpan(o.ContextAPI.getInstance().active())}t.getActiveSpan=getActiveSpan;function setSpan(e,t){return e.setValue(i,t)}t.setSpan=setSpan;function deleteSpan(e){return e.deleteValue(i)}t.deleteSpan=deleteSpan;function setSpanContext(e,t){return setSpan(e,new a.NonRecordingSpan(t))}t.setSpanContext=setSpanContext;function getSpanContext(e){var t;return(t=getSpan(e))===null||t===void 0?void 0:t.spanContext()}t.getSpanContext=getSpanContext},325:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.TraceStateImpl=void 0;const n=r(564);const a=32;const o=512;const i=\",\";const c=\"=\";class TraceStateImpl{constructor(e){this._internalState=new Map;if(e)this._parse(e)}set(e,t){const r=this._clone();if(r._internalState.has(e)){r._internalState.delete(e)}r._internalState.set(e,t);return r}unset(e){const t=this._clone();t._internalState.delete(e);return t}get(e){return this._internalState.get(e)}serialize(){return this._keys().reduce(((e,t)=>{e.push(t+c+this.get(t));return e}),[]).join(i)}_parse(e){if(e.length>o)return;this._internalState=e.split(i).reverse().reduce(((e,t)=>{const r=t.trim();const a=r.indexOf(c);if(a!==-1){const o=r.slice(0,a);const i=r.slice(a+1,t.length);if((0,n.validateKey)(o)&&(0,n.validateValue)(i)){e.set(o,i)}else{}}return e}),new Map);if(this._internalState.size>a){this._internalState=new Map(Array.from(this._internalState.entries()).reverse().slice(0,a))}}_keys(){return Array.from(this._internalState.keys()).reverse()}_clone(){const e=new TraceStateImpl;e._internalState=new Map(this._internalState);return e}}t.TraceStateImpl=TraceStateImpl},564:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.validateValue=t.validateKey=void 0;const r=\"[_0-9a-z-*/]\";const n=`[a-z]${r}{0,255}`;const a=`[a-z0-9]${r}{0,240}@[a-z]${r}{0,13}`;const o=new RegExp(`^(?:${n}|${a})$`);const i=/^[ -~]{0,255}[!-~]$/;const c=/,|=/;function validateKey(e){return o.test(e)}t.validateKey=validateKey;function validateValue(e){return i.test(e)&&!c.test(e)}t.validateValue=validateValue},98:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.createTraceState=void 0;const n=r(325);function createTraceState(e){return new n.TraceStateImpl(e)}t.createTraceState=createTraceState},476:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.INVALID_SPAN_CONTEXT=t.INVALID_TRACEID=t.INVALID_SPANID=void 0;const n=r(475);t.INVALID_SPANID=\"0000000000000000\";t.INVALID_TRACEID=\"00000000000000000000000000000000\";t.INVALID_SPAN_CONTEXT={traceId:t.INVALID_TRACEID,spanId:t.INVALID_SPANID,traceFlags:n.TraceFlags.NONE}},357:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.SpanKind=void 0;var r;(function(e){e[e[\"INTERNAL\"]=0]=\"INTERNAL\";e[e[\"SERVER\"]=1]=\"SERVER\";e[e[\"CLIENT\"]=2]=\"CLIENT\";e[e[\"PRODUCER\"]=3]=\"PRODUCER\";e[e[\"CONSUMER\"]=4]=\"CONSUMER\"})(r=t.SpanKind||(t.SpanKind={}))},139:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.wrapSpanContext=t.isSpanContextValid=t.isValidSpanId=t.isValidTraceId=void 0;const n=r(476);const a=r(403);const o=/^([0-9a-f]{32})$/i;const i=/^[0-9a-f]{16}$/i;function isValidTraceId(e){return o.test(e)&&e!==n.INVALID_TRACEID}t.isValidTraceId=isValidTraceId;function isValidSpanId(e){return i.test(e)&&e!==n.INVALID_SPANID}t.isValidSpanId=isValidSpanId;function isSpanContextValid(e){return isValidTraceId(e.traceId)&&isValidSpanId(e.spanId)}t.isSpanContextValid=isSpanContextValid;function wrapSpanContext(e){return new a.NonRecordingSpan(e)}t.wrapSpanContext=wrapSpanContext},847:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.SpanStatusCode=void 0;var r;(function(e){e[e[\"UNSET\"]=0]=\"UNSET\";e[e[\"OK\"]=1]=\"OK\";e[e[\"ERROR\"]=2]=\"ERROR\"})(r=t.SpanStatusCode||(t.SpanStatusCode={}))},475:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.TraceFlags=void 0;var r;(function(e){e[e[\"NONE\"]=0]=\"NONE\";e[e[\"SAMPLED\"]=1]=\"SAMPLED\"})(r=t.TraceFlags||(t.TraceFlags={}))},521:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.VERSION=void 0;t.VERSION=\"1.6.0\"}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var a=t[r]={exports:{}};var o=true;try{e[r].call(a.exports,a,a.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return a.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r={};(()=>{var e=r;Object.defineProperty(e,\"__esModule\",{value:true});e.trace=e.propagation=e.metrics=e.diag=e.context=e.INVALID_SPAN_CONTEXT=e.INVALID_TRACEID=e.INVALID_SPANID=e.isValidSpanId=e.isValidTraceId=e.isSpanContextValid=e.createTraceState=e.TraceFlags=e.SpanStatusCode=e.SpanKind=e.SamplingDecision=e.ProxyTracerProvider=e.ProxyTracer=e.defaultTextMapSetter=e.defaultTextMapGetter=e.ValueType=e.createNoopMeter=e.DiagLogLevel=e.DiagConsoleLogger=e.ROOT_CONTEXT=e.createContextKey=e.baggageEntryMetadataFromString=void 0;var t=__nccwpck_require__(369);Object.defineProperty(e,\"baggageEntryMetadataFromString\",{enumerable:true,get:function(){return t.baggageEntryMetadataFromString}});var n=__nccwpck_require__(780);Object.defineProperty(e,\"createContextKey\",{enumerable:true,get:function(){return n.createContextKey}});Object.defineProperty(e,\"ROOT_CONTEXT\",{enumerable:true,get:function(){return n.ROOT_CONTEXT}});var a=__nccwpck_require__(972);Object.defineProperty(e,\"DiagConsoleLogger\",{enumerable:true,get:function(){return a.DiagConsoleLogger}});var o=__nccwpck_require__(957);Object.defineProperty(e,\"DiagLogLevel\",{enumerable:true,get:function(){return o.DiagLogLevel}});var i=__nccwpck_require__(102);Object.defineProperty(e,\"createNoopMeter\",{enumerable:true,get:function(){return i.createNoopMeter}});var c=__nccwpck_require__(901);Object.defineProperty(e,\"ValueType\",{enumerable:true,get:function(){return c.ValueType}});var s=__nccwpck_require__(194);Object.defineProperty(e,\"defaultTextMapGetter\",{enumerable:true,get:function(){return s.defaultTextMapGetter}});Object.defineProperty(e,\"defaultTextMapSetter\",{enumerable:true,get:function(){return s.defaultTextMapSetter}});var u=__nccwpck_require__(125);Object.defineProperty(e,\"ProxyTracer\",{enumerable:true,get:function(){return u.ProxyTracer}});var l=__nccwpck_require__(846);Object.defineProperty(e,\"ProxyTracerProvider\",{enumerable:true,get:function(){return l.ProxyTracerProvider}});var g=__nccwpck_require__(996);Object.defineProperty(e,\"SamplingDecision\",{enumerable:true,get:function(){return g.SamplingDecision}});var p=__nccwpck_require__(357);Object.defineProperty(e,\"SpanKind\",{enumerable:true,get:function(){return p.SpanKind}});var d=__nccwpck_require__(847);Object.defineProperty(e,\"SpanStatusCode\",{enumerable:true,get:function(){return d.SpanStatusCode}});var _=__nccwpck_require__(475);Object.defineProperty(e,\"TraceFlags\",{enumerable:true,get:function(){return _.TraceFlags}});var f=__nccwpck_require__(98);Object.defineProperty(e,\"createTraceState\",{enumerable:true,get:function(){return f.createTraceState}});var b=__nccwpck_require__(139);Object.defineProperty(e,\"isSpanContextValid\",{enumerable:true,get:function(){return b.isSpanContextValid}});Object.defineProperty(e,\"isValidTraceId\",{enumerable:true,get:function(){return b.isValidTraceId}});Object.defineProperty(e,\"isValidSpanId\",{enumerable:true,get:function(){return b.isValidSpanId}});var v=__nccwpck_require__(476);Object.defineProperty(e,\"INVALID_SPANID\",{enumerable:true,get:function(){return v.INVALID_SPANID}});Object.defineProperty(e,\"INVALID_TRACEID\",{enumerable:true,get:function(){return v.INVALID_TRACEID}});Object.defineProperty(e,\"INVALID_SPAN_CONTEXT\",{enumerable:true,get:function(){return v.INVALID_SPAN_CONTEXT}});const O=__nccwpck_require__(67);Object.defineProperty(e,\"context\",{enumerable:true,get:function(){return O.context}});const P=__nccwpck_require__(506);Object.defineProperty(e,\"diag\",{enumerable:true,get:function(){return P.diag}});const N=__nccwpck_require__(886);Object.defineProperty(e,\"metrics\",{enumerable:true,get:function(){return N.metrics}});const S=__nccwpck_require__(939);Object.defineProperty(e,\"propagation\",{enumerable:true,get:function(){return S.propagation}});const C=__nccwpck_require__(845);Object.defineProperty(e,\"trace\",{enumerable:true,get:function(){return C.trace}});e[\"default\"]={context:O.context,diag:P.diag,metrics:N.metrics,propagation:S.propagation,trace:C.trace}})();module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-legacy.node.development.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-legacy.node.development.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @license React\n * react-dom-server-legacy.node.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(rsc)/./node_modules/next/dist/compiled/react/index.js\");\nvar ReactDOM = __webpack_require__(/*! react-dom */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-dom.js\");\nvar stream = __webpack_require__(/*! stream */ \"stream\");\n\nvar ReactVersion = '18.3.0-canary-14898b6a9-20240318';\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      printWarning('warn', format, args);\n    }\n  }\n}\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_SCOPE_TYPE = Symbol.for('react.scope');\nvar REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// in case they error.\n\nvar jsxPropsParents = new WeakMap();\nvar jsxChildrenParents = new WeakMap();\nfunction objectName(object) {\n  // $FlowFixMe[method-unbinding]\n  var name = Object.prototype.toString.call(object);\n  return name.replace(/^\\[object (.*)\\]$/, function (m, p0) {\n    return p0;\n  });\n}\n\nfunction describeKeyForErrorMessage(key) {\n  var encodedKey = JSON.stringify(key);\n  return '\"' + key + '\"' === encodedKey ? key : encodedKey;\n}\n\nfunction describeValueForErrorMessage(value) {\n  switch (typeof value) {\n    case 'string':\n      {\n        return JSON.stringify(value.length <= 10 ? value : value.slice(0, 10) + '...');\n      }\n\n    case 'object':\n      {\n        if (isArray(value)) {\n          return '[...]';\n        }\n\n        if (value !== null && value.$$typeof === CLIENT_REFERENCE_TAG) {\n          return describeClientReference();\n        }\n\n        var name = objectName(value);\n\n        if (name === 'Object') {\n          return '{...}';\n        }\n\n        return name;\n      }\n\n    case 'function':\n      {\n        if (value.$$typeof === CLIENT_REFERENCE_TAG) {\n          return describeClientReference();\n        }\n\n        var _name = value.displayName || value.name;\n\n        return _name ? 'function ' + _name : 'function';\n      }\n\n    default:\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      return String(value);\n  }\n}\n\nfunction describeElementType(type) {\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeElementType(type.render);\n\n      case REACT_MEMO_TYPE:\n        return describeElementType(type.type);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeElementType(init(payload));\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar CLIENT_REFERENCE_TAG = Symbol.for('react.client.reference');\n\nfunction describeClientReference(ref) {\n  return 'client';\n}\n\nfunction describeObjectForErrorMessage(objectOrArray, expandedName) {\n  var objKind = objectName(objectOrArray);\n\n  if (objKind !== 'Object' && objKind !== 'Array') {\n    return objKind;\n  }\n\n  var str = '';\n  var start = -1;\n  var length = 0;\n\n  if (isArray(objectOrArray)) {\n    if (jsxChildrenParents.has(objectOrArray)) {\n      // Print JSX Children\n      var type = jsxChildrenParents.get(objectOrArray);\n      str = '<' + describeElementType(type) + '>';\n      var array = objectOrArray;\n\n      for (var i = 0; i < array.length; i++) {\n        var value = array[i];\n        var substr = void 0;\n\n        if (typeof value === 'string') {\n          substr = value;\n        } else if (typeof value === 'object' && value !== null) {\n          substr = '{' + describeObjectForErrorMessage(value) + '}';\n        } else {\n          substr = '{' + describeValueForErrorMessage(value) + '}';\n        }\n\n        if ('' + i === expandedName) {\n          start = str.length;\n          length = substr.length;\n          str += substr;\n        } else if (substr.length < 15 && str.length + substr.length < 40) {\n          str += substr;\n        } else {\n          str += '{...}';\n        }\n      }\n\n      str += '</' + describeElementType(type) + '>';\n    } else {\n      // Print Array\n      str = '[';\n      var _array = objectOrArray;\n\n      for (var _i = 0; _i < _array.length; _i++) {\n        if (_i > 0) {\n          str += ', ';\n        }\n\n        var _value = _array[_i];\n\n        var _substr = void 0;\n\n        if (typeof _value === 'object' && _value !== null) {\n          _substr = describeObjectForErrorMessage(_value);\n        } else {\n          _substr = describeValueForErrorMessage(_value);\n        }\n\n        if ('' + _i === expandedName) {\n          start = str.length;\n          length = _substr.length;\n          str += _substr;\n        } else if (_substr.length < 10 && str.length + _substr.length < 40) {\n          str += _substr;\n        } else {\n          str += '...';\n        }\n      }\n\n      str += ']';\n    }\n  } else {\n    if (objectOrArray.$$typeof === REACT_ELEMENT_TYPE) {\n      str = '<' + describeElementType(objectOrArray.type) + '/>';\n    } else if (objectOrArray.$$typeof === CLIENT_REFERENCE_TAG) {\n      return describeClientReference();\n    } else if (jsxPropsParents.has(objectOrArray)) {\n      // Print JSX\n      var _type = jsxPropsParents.get(objectOrArray);\n\n      str = '<' + (describeElementType(_type) || '...');\n      var object = objectOrArray;\n      var names = Object.keys(object);\n\n      for (var _i2 = 0; _i2 < names.length; _i2++) {\n        str += ' ';\n        var name = names[_i2];\n        str += describeKeyForErrorMessage(name) + '=';\n        var _value2 = object[name];\n\n        var _substr2 = void 0;\n\n        if (name === expandedName && typeof _value2 === 'object' && _value2 !== null) {\n          _substr2 = describeObjectForErrorMessage(_value2);\n        } else {\n          _substr2 = describeValueForErrorMessage(_value2);\n        }\n\n        if (typeof _value2 !== 'string') {\n          _substr2 = '{' + _substr2 + '}';\n        }\n\n        if (name === expandedName) {\n          start = str.length;\n          length = _substr2.length;\n          str += _substr2;\n        } else if (_substr2.length < 10 && str.length + _substr2.length < 40) {\n          str += _substr2;\n        } else {\n          str += '...';\n        }\n      }\n\n      str += '>';\n    } else {\n      // Print Object\n      str = '{';\n      var _object = objectOrArray;\n\n      var _names = Object.keys(_object);\n\n      for (var _i3 = 0; _i3 < _names.length; _i3++) {\n        if (_i3 > 0) {\n          str += ', ';\n        }\n\n        var _name2 = _names[_i3];\n        str += describeKeyForErrorMessage(_name2) + ': ';\n        var _value3 = _object[_name2];\n\n        var _substr3 = void 0;\n\n        if (typeof _value3 === 'object' && _value3 !== null) {\n          _substr3 = describeObjectForErrorMessage(_value3);\n        } else {\n          _substr3 = describeValueForErrorMessage(_value3);\n        }\n\n        if (_name2 === expandedName) {\n          start = str.length;\n          length = _substr3.length;\n          str += _substr3;\n        } else if (_substr3.length < 10 && str.length + _substr3.length < 40) {\n          str += _substr3;\n        } else {\n          str += '...';\n        }\n      }\n\n      str += '}';\n    }\n  }\n\n  if (expandedName === undefined) {\n    return str;\n  }\n\n  if (start > -1 && length > 0) {\n    var highlight = ' '.repeat(start) + '^'.repeat(length);\n    return '\\n  ' + str + '\\n  ' + highlight;\n  }\n\n  return '\\n  ' + str;\n}\n\n// A pure JS implementation of a string hashing function. We do not use it for\n// security or obfuscation purposes, only to create compact hashes. So we\n// prioritize speed over collision avoidance. For example, we use this to hash\n// the component key path used by useFormState for MPA-style submissions.\n//\n// In environments where built-in hashing functions are available, we prefer\n// those instead. Like Node's crypto module, or Bun.hash. Unfortunately this\n// does not include the web standard crypto API because those methods are all\n// async. For our purposes, we need it to be sync because the cost of context\n// switching is too high to be worth it.\n//\n// The most popular hashing algorithm that meets these requirements in the JS\n// ecosystem is MurmurHash3, and almost all implementations I could find used\n// some version of the implementation by Gary Court inlined below.\nfunction createFastHashJS(key) {\n  return murmurhash3_32_gc(key, 0);\n}\n/* eslint-disable prefer-const, no-fallthrough */\n\n/**\n * @license\n *\n * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)\n *\n * Copyright (c) 2011 Gary Court\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nfunction murmurhash3_32_gc(key, seed) {\n  var remainder, bytes, h1, h1b, c1, c2, k1, i;\n  remainder = key.length & 3; // key.length % 4\n\n  bytes = key.length - remainder;\n  h1 = seed;\n  c1 = 0xcc9e2d51;\n  c2 = 0x1b873593;\n  i = 0;\n\n  while (i < bytes) {\n    k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(++i) & 0xff) << 8 | (key.charCodeAt(++i) & 0xff) << 16 | (key.charCodeAt(++i) & 0xff) << 24;\n    ++i;\n    k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n    k1 = k1 << 15 | k1 >>> 17;\n    k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n    h1 ^= k1;\n    h1 = h1 << 13 | h1 >>> 19;\n    h1b = (h1 & 0xffff) * 5 + (((h1 >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;\n    h1 = (h1b & 0xffff) + 0x6b64 + (((h1b >>> 16) + 0xe654 & 0xffff) << 16);\n  }\n\n  k1 = 0;\n\n  switch (remainder) {\n    case 3:\n      k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      k1 ^= key.charCodeAt(i) & 0xff;\n      k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n      k1 = k1 << 15 | k1 >>> 17;\n      k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n      h1 ^= k1;\n  }\n\n  h1 ^= key.length;\n  h1 ^= h1 >>> 16;\n  h1 = (h1 & 0xffff) * 0x85ebca6b + (((h1 >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;\n  h1 ^= h1 >>> 13;\n  h1 = (h1 & 0xffff) * 0xc2b2ae35 + (((h1 >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;\n  h1 ^= h1 >>> 16;\n  return h1 >>> 0;\n}\n\nfunction scheduleWork(callback) {\n  callback();\n}\nfunction beginWriting(destination) {}\nfunction writeChunk(destination, chunk) {\n  writeChunkAndReturn(destination, chunk);\n}\nfunction writeChunkAndReturn(destination, chunk) {\n  return destination.push(chunk);\n}\nfunction completeWriting(destination) {}\nfunction close(destination) {\n  destination.push(null);\n}\nfunction stringToChunk(content) {\n  return content;\n}\nfunction stringToPrecomputedChunk(content) {\n  return content;\n}\nfunction closeWithError(destination, error) {\n  // $FlowFixMe[incompatible-call]: This is an Error object or the destination accepts other types.\n  destination.destroy(error);\n}\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\n\nfunction checkAttributeStringCoercion(value, attributeName) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided `%s` attribute is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', attributeName, typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nfunction checkOptionStringCoercion(value, propName) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided `%s` option is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', propName, typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nfunction checkCSSPropertyStringCoercion(value, propName) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided `%s` CSS property is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', propName, typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nfunction checkHtmlStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided HTML markup uses a value of unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\n// -----------------------------------------------------------------------------\nvar enableFloat = true; // Enables unstable_useMemoCache hook, intended as a compilation target for\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/* eslint-disable max-len */\n\nvar ATTRIBUTE_NAME_START_CHAR = \":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n/* eslint-enable max-len */\n\nvar ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + \"\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\nvar VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');\nvar illegalAttributeNameCache = {};\nvar validatedAttributeNameCache = {};\nfunction isAttributeNameSafe(attributeName) {\n  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {\n    return true;\n  }\n\n  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {\n    return false;\n  }\n\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n\n  illegalAttributeNameCache[attributeName] = true;\n\n  {\n    error('Invalid attribute name: `%s`', attributeName);\n  }\n\n  return false;\n}\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\nvar unitlessNumbers = new Set(['animationIterationCount', 'aspectRatio', 'borderImageOutset', 'borderImageSlice', 'borderImageWidth', 'boxFlex', 'boxFlexGroup', 'boxOrdinalGroup', 'columnCount', 'columns', 'flex', 'flexGrow', 'flexPositive', 'flexShrink', 'flexNegative', 'flexOrder', 'gridArea', 'gridRow', 'gridRowEnd', 'gridRowSpan', 'gridRowStart', 'gridColumn', 'gridColumnEnd', 'gridColumnSpan', 'gridColumnStart', 'fontWeight', 'lineClamp', 'lineHeight', 'opacity', 'order', 'orphans', 'scale', 'tabSize', 'widows', 'zIndex', 'zoom', 'fillOpacity', // SVG-related properties\n'floodOpacity', 'stopOpacity', 'strokeDasharray', 'strokeDashoffset', 'strokeMiterlimit', 'strokeOpacity', 'strokeWidth', 'MozAnimationIterationCount', // Known Prefixed Properties\n'MozBoxFlex', // TODO: Remove these since they shouldn't be used in modern code\n'MozBoxFlexGroup', 'MozLineClamp', 'msAnimationIterationCount', 'msFlex', 'msZoom', 'msFlexGrow', 'msFlexNegative', 'msFlexOrder', 'msFlexPositive', 'msFlexShrink', 'msGridColumn', 'msGridColumnSpan', 'msGridRow', 'msGridRowSpan', 'WebkitAnimationIterationCount', 'WebkitBoxFlex', 'WebKitBoxFlexGroup', 'WebkitBoxOrdinalGroup', 'WebkitColumnCount', 'WebkitColumns', 'WebkitFlex', 'WebkitFlexGrow', 'WebkitFlexPositive', 'WebkitFlexShrink', 'WebkitLineClamp']);\nfunction isUnitlessNumber (name) {\n  return unitlessNumbers.has(name);\n}\n\nvar aliases = new Map([['acceptCharset', 'accept-charset'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv'], // HTML and SVG attributes, but the SVG attribute is case sensitive.],\n['crossOrigin', 'crossorigin'], // This is a list of all SVG attributes that need special casing.\n// Regular attributes that just accept strings.],\n['accentHeight', 'accent-height'], ['alignmentBaseline', 'alignment-baseline'], ['arabicForm', 'arabic-form'], ['baselineShift', 'baseline-shift'], ['capHeight', 'cap-height'], ['clipPath', 'clip-path'], ['clipRule', 'clip-rule'], ['colorInterpolation', 'color-interpolation'], ['colorInterpolationFilters', 'color-interpolation-filters'], ['colorProfile', 'color-profile'], ['colorRendering', 'color-rendering'], ['dominantBaseline', 'dominant-baseline'], ['enableBackground', 'enable-background'], ['fillOpacity', 'fill-opacity'], ['fillRule', 'fill-rule'], ['floodColor', 'flood-color'], ['floodOpacity', 'flood-opacity'], ['fontFamily', 'font-family'], ['fontSize', 'font-size'], ['fontSizeAdjust', 'font-size-adjust'], ['fontStretch', 'font-stretch'], ['fontStyle', 'font-style'], ['fontVariant', 'font-variant'], ['fontWeight', 'font-weight'], ['glyphName', 'glyph-name'], ['glyphOrientationHorizontal', 'glyph-orientation-horizontal'], ['glyphOrientationVertical', 'glyph-orientation-vertical'], ['horizAdvX', 'horiz-adv-x'], ['horizOriginX', 'horiz-origin-x'], ['imageRendering', 'image-rendering'], ['letterSpacing', 'letter-spacing'], ['lightingColor', 'lighting-color'], ['markerEnd', 'marker-end'], ['markerMid', 'marker-mid'], ['markerStart', 'marker-start'], ['overlinePosition', 'overline-position'], ['overlineThickness', 'overline-thickness'], ['paintOrder', 'paint-order'], ['panose-1', 'panose-1'], ['pointerEvents', 'pointer-events'], ['renderingIntent', 'rendering-intent'], ['shapeRendering', 'shape-rendering'], ['stopColor', 'stop-color'], ['stopOpacity', 'stop-opacity'], ['strikethroughPosition', 'strikethrough-position'], ['strikethroughThickness', 'strikethrough-thickness'], ['strokeDasharray', 'stroke-dasharray'], ['strokeDashoffset', 'stroke-dashoffset'], ['strokeLinecap', 'stroke-linecap'], ['strokeLinejoin', 'stroke-linejoin'], ['strokeMiterlimit', 'stroke-miterlimit'], ['strokeOpacity', 'stroke-opacity'], ['strokeWidth', 'stroke-width'], ['textAnchor', 'text-anchor'], ['textDecoration', 'text-decoration'], ['textRendering', 'text-rendering'], ['transformOrigin', 'transform-origin'], ['underlinePosition', 'underline-position'], ['underlineThickness', 'underline-thickness'], ['unicodeBidi', 'unicode-bidi'], ['unicodeRange', 'unicode-range'], ['unitsPerEm', 'units-per-em'], ['vAlphabetic', 'v-alphabetic'], ['vHanging', 'v-hanging'], ['vIdeographic', 'v-ideographic'], ['vMathematical', 'v-mathematical'], ['vectorEffect', 'vector-effect'], ['vertAdvY', 'vert-adv-y'], ['vertOriginX', 'vert-origin-x'], ['vertOriginY', 'vert-origin-y'], ['wordSpacing', 'word-spacing'], ['writingMode', 'writing-mode'], ['xmlnsXlink', 'xmlns:xlink'], ['xHeight', 'x-height']]);\nfunction getAttributeAlias (name) {\n  return aliases.get(name) || name;\n}\n\nvar hasReadOnlyValue = {\n  button: true,\n  checkbox: true,\n  image: true,\n  hidden: true,\n  radio: true,\n  reset: true,\n  submit: true\n};\nfunction checkControlledValueProps(tagName, props) {\n  {\n    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {\n      if (tagName === 'select') {\n        error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, set `onChange`.');\n      } else {\n        error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.');\n      }\n    }\n\n    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {\n      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n    }\n  }\n}\n\nvar ariaProperties = {\n  'aria-current': 0,\n  // state\n  'aria-description': 0,\n  'aria-details': 0,\n  'aria-disabled': 0,\n  // state\n  'aria-hidden': 0,\n  // state\n  'aria-invalid': 0,\n  // state\n  'aria-keyshortcuts': 0,\n  'aria-label': 0,\n  'aria-roledescription': 0,\n  // Widget Attributes\n  'aria-autocomplete': 0,\n  'aria-checked': 0,\n  'aria-expanded': 0,\n  'aria-haspopup': 0,\n  'aria-level': 0,\n  'aria-modal': 0,\n  'aria-multiline': 0,\n  'aria-multiselectable': 0,\n  'aria-orientation': 0,\n  'aria-placeholder': 0,\n  'aria-pressed': 0,\n  'aria-readonly': 0,\n  'aria-required': 0,\n  'aria-selected': 0,\n  'aria-sort': 0,\n  'aria-valuemax': 0,\n  'aria-valuemin': 0,\n  'aria-valuenow': 0,\n  'aria-valuetext': 0,\n  // Live Region Attributes\n  'aria-atomic': 0,\n  'aria-busy': 0,\n  'aria-live': 0,\n  'aria-relevant': 0,\n  // Drag-and-Drop Attributes\n  'aria-dropeffect': 0,\n  'aria-grabbed': 0,\n  // Relationship Attributes\n  'aria-activedescendant': 0,\n  'aria-colcount': 0,\n  'aria-colindex': 0,\n  'aria-colspan': 0,\n  'aria-controls': 0,\n  'aria-describedby': 0,\n  'aria-errormessage': 0,\n  'aria-flowto': 0,\n  'aria-labelledby': 0,\n  'aria-owns': 0,\n  'aria-posinset': 0,\n  'aria-rowcount': 0,\n  'aria-rowindex': 0,\n  'aria-rowspan': 0,\n  'aria-setsize': 0\n};\n\nvar warnedProperties$1 = {};\nvar rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\nvar rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\n\nfunction validateProperty$1(tagName, name) {\n  {\n    if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {\n      return true;\n    }\n\n    if (rARIACamel$1.test(name)) {\n      var ariaName = 'aria-' + name.slice(4).toLowerCase();\n      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n      // DOM properties, then it is an invalid aria-* attribute.\n\n      if (correctName == null) {\n        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);\n\n        warnedProperties$1[name] = true;\n        return true;\n      } // aria-* attributes should be lowercase; suggest the lowercase version.\n\n\n      if (name !== correctName) {\n        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);\n\n        warnedProperties$1[name] = true;\n        return true;\n      }\n    }\n\n    if (rARIA$1.test(name)) {\n      var lowerCasedName = name.toLowerCase();\n      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n      // DOM properties, then it is an invalid aria-* attribute.\n\n      if (standardName == null) {\n        warnedProperties$1[name] = true;\n        return false;\n      } // aria-* attributes should be lowercase; suggest the lowercase version.\n\n\n      if (name !== standardName) {\n        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);\n\n        warnedProperties$1[name] = true;\n        return true;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction validateProperties$2(type, props) {\n  {\n    var invalidProps = [];\n\n    for (var key in props) {\n      var isValid = validateProperty$1(type, key);\n\n      if (!isValid) {\n        invalidProps.push(key);\n      }\n    }\n\n    var unknownPropString = invalidProps.map(function (prop) {\n      return '`' + prop + '`';\n    }).join(', ');\n\n    if (invalidProps.length === 1) {\n      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);\n    } else if (invalidProps.length > 1) {\n      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);\n    }\n  }\n}\n\nvar didWarnValueNull = false;\nfunction validateProperties$1(type, props) {\n  {\n    if (type !== 'input' && type !== 'textarea' && type !== 'select') {\n      return;\n    }\n\n    if (props != null && props.value === null && !didWarnValueNull) {\n      didWarnValueNull = true;\n\n      if (type === 'select' && props.multiple) {\n        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);\n      } else {\n        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);\n      }\n    }\n  }\n}\n\nfunction isCustomElement(tagName, props) {\n  if (tagName.indexOf('-') === -1) {\n    return false;\n  }\n\n  switch (tagName) {\n    // These are reserved SVG and MathML elements.\n    // We don't mind this list too much because we expect it to never grow.\n    // The alternative is to track the namespace in a few places which is convoluted.\n    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n    case 'annotation-xml':\n    case 'color-profile':\n    case 'font-face':\n    case 'font-face-src':\n    case 'font-face-uri':\n    case 'font-face-format':\n    case 'font-face-name':\n    case 'missing-glyph':\n      return false;\n\n    default:\n      return true;\n  }\n}\n\n// When adding attributes to the HTML or SVG allowed attribute list, be sure to\n// also add them to this module to ensure casing and incorrect name\n// warnings.\nvar possibleStandardNames = {\n  // HTML\n  accept: 'accept',\n  acceptcharset: 'acceptCharset',\n  'accept-charset': 'acceptCharset',\n  accesskey: 'accessKey',\n  action: 'action',\n  allowfullscreen: 'allowFullScreen',\n  alt: 'alt',\n  as: 'as',\n  async: 'async',\n  autocapitalize: 'autoCapitalize',\n  autocomplete: 'autoComplete',\n  autocorrect: 'autoCorrect',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  autosave: 'autoSave',\n  capture: 'capture',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  challenge: 'challenge',\n  charset: 'charSet',\n  checked: 'checked',\n  children: 'children',\n  cite: 'cite',\n  class: 'className',\n  classid: 'classID',\n  classname: 'className',\n  cols: 'cols',\n  colspan: 'colSpan',\n  content: 'content',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  controls: 'controls',\n  controlslist: 'controlsList',\n  coords: 'coords',\n  crossorigin: 'crossOrigin',\n  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',\n  data: 'data',\n  datetime: 'dateTime',\n  default: 'default',\n  defaultchecked: 'defaultChecked',\n  defaultvalue: 'defaultValue',\n  defer: 'defer',\n  dir: 'dir',\n  disabled: 'disabled',\n  disablepictureinpicture: 'disablePictureInPicture',\n  disableremoteplayback: 'disableRemotePlayback',\n  download: 'download',\n  draggable: 'draggable',\n  enctype: 'encType',\n  enterkeyhint: 'enterKeyHint',\n  fetchpriority: 'fetchPriority',\n  for: 'htmlFor',\n  form: 'form',\n  formmethod: 'formMethod',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  headers: 'headers',\n  height: 'height',\n  hidden: 'hidden',\n  high: 'high',\n  href: 'href',\n  hreflang: 'hrefLang',\n  htmlfor: 'htmlFor',\n  httpequiv: 'httpEquiv',\n  'http-equiv': 'httpEquiv',\n  icon: 'icon',\n  id: 'id',\n  imagesizes: 'imageSizes',\n  imagesrcset: 'imageSrcSet',\n  innerhtml: 'innerHTML',\n  inputmode: 'inputMode',\n  integrity: 'integrity',\n  is: 'is',\n  itemid: 'itemID',\n  itemprop: 'itemProp',\n  itemref: 'itemRef',\n  itemscope: 'itemScope',\n  itemtype: 'itemType',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  kind: 'kind',\n  label: 'label',\n  lang: 'lang',\n  list: 'list',\n  loop: 'loop',\n  low: 'low',\n  manifest: 'manifest',\n  marginwidth: 'marginWidth',\n  marginheight: 'marginHeight',\n  max: 'max',\n  maxlength: 'maxLength',\n  media: 'media',\n  mediagroup: 'mediaGroup',\n  method: 'method',\n  min: 'min',\n  minlength: 'minLength',\n  multiple: 'multiple',\n  muted: 'muted',\n  name: 'name',\n  nomodule: 'noModule',\n  nonce: 'nonce',\n  novalidate: 'noValidate',\n  open: 'open',\n  optimum: 'optimum',\n  pattern: 'pattern',\n  placeholder: 'placeholder',\n  playsinline: 'playsInline',\n  poster: 'poster',\n  preload: 'preload',\n  profile: 'profile',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  referrerpolicy: 'referrerPolicy',\n  rel: 'rel',\n  required: 'required',\n  reversed: 'reversed',\n  role: 'role',\n  rows: 'rows',\n  rowspan: 'rowSpan',\n  sandbox: 'sandbox',\n  scope: 'scope',\n  scoped: 'scoped',\n  scrolling: 'scrolling',\n  seamless: 'seamless',\n  selected: 'selected',\n  shape: 'shape',\n  size: 'size',\n  sizes: 'sizes',\n  span: 'span',\n  spellcheck: 'spellCheck',\n  src: 'src',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  start: 'start',\n  step: 'step',\n  style: 'style',\n  summary: 'summary',\n  tabindex: 'tabIndex',\n  target: 'target',\n  title: 'title',\n  type: 'type',\n  usemap: 'useMap',\n  value: 'value',\n  width: 'width',\n  wmode: 'wmode',\n  wrap: 'wrap',\n  // SVG\n  about: 'about',\n  accentheight: 'accentHeight',\n  'accent-height': 'accentHeight',\n  accumulate: 'accumulate',\n  additive: 'additive',\n  alignmentbaseline: 'alignmentBaseline',\n  'alignment-baseline': 'alignmentBaseline',\n  allowreorder: 'allowReorder',\n  alphabetic: 'alphabetic',\n  amplitude: 'amplitude',\n  arabicform: 'arabicForm',\n  'arabic-form': 'arabicForm',\n  ascent: 'ascent',\n  attributename: 'attributeName',\n  attributetype: 'attributeType',\n  autoreverse: 'autoReverse',\n  azimuth: 'azimuth',\n  basefrequency: 'baseFrequency',\n  baselineshift: 'baselineShift',\n  'baseline-shift': 'baselineShift',\n  baseprofile: 'baseProfile',\n  bbox: 'bbox',\n  begin: 'begin',\n  bias: 'bias',\n  by: 'by',\n  calcmode: 'calcMode',\n  capheight: 'capHeight',\n  'cap-height': 'capHeight',\n  clip: 'clip',\n  clippath: 'clipPath',\n  'clip-path': 'clipPath',\n  clippathunits: 'clipPathUnits',\n  cliprule: 'clipRule',\n  'clip-rule': 'clipRule',\n  color: 'color',\n  colorinterpolation: 'colorInterpolation',\n  'color-interpolation': 'colorInterpolation',\n  colorinterpolationfilters: 'colorInterpolationFilters',\n  'color-interpolation-filters': 'colorInterpolationFilters',\n  colorprofile: 'colorProfile',\n  'color-profile': 'colorProfile',\n  colorrendering: 'colorRendering',\n  'color-rendering': 'colorRendering',\n  contentscripttype: 'contentScriptType',\n  contentstyletype: 'contentStyleType',\n  cursor: 'cursor',\n  cx: 'cx',\n  cy: 'cy',\n  d: 'd',\n  datatype: 'datatype',\n  decelerate: 'decelerate',\n  descent: 'descent',\n  diffuseconstant: 'diffuseConstant',\n  direction: 'direction',\n  display: 'display',\n  divisor: 'divisor',\n  dominantbaseline: 'dominantBaseline',\n  'dominant-baseline': 'dominantBaseline',\n  dur: 'dur',\n  dx: 'dx',\n  dy: 'dy',\n  edgemode: 'edgeMode',\n  elevation: 'elevation',\n  enablebackground: 'enableBackground',\n  'enable-background': 'enableBackground',\n  end: 'end',\n  exponent: 'exponent',\n  externalresourcesrequired: 'externalResourcesRequired',\n  fill: 'fill',\n  fillopacity: 'fillOpacity',\n  'fill-opacity': 'fillOpacity',\n  fillrule: 'fillRule',\n  'fill-rule': 'fillRule',\n  filter: 'filter',\n  filterres: 'filterRes',\n  filterunits: 'filterUnits',\n  floodopacity: 'floodOpacity',\n  'flood-opacity': 'floodOpacity',\n  floodcolor: 'floodColor',\n  'flood-color': 'floodColor',\n  focusable: 'focusable',\n  fontfamily: 'fontFamily',\n  'font-family': 'fontFamily',\n  fontsize: 'fontSize',\n  'font-size': 'fontSize',\n  fontsizeadjust: 'fontSizeAdjust',\n  'font-size-adjust': 'fontSizeAdjust',\n  fontstretch: 'fontStretch',\n  'font-stretch': 'fontStretch',\n  fontstyle: 'fontStyle',\n  'font-style': 'fontStyle',\n  fontvariant: 'fontVariant',\n  'font-variant': 'fontVariant',\n  fontweight: 'fontWeight',\n  'font-weight': 'fontWeight',\n  format: 'format',\n  from: 'from',\n  fx: 'fx',\n  fy: 'fy',\n  g1: 'g1',\n  g2: 'g2',\n  glyphname: 'glyphName',\n  'glyph-name': 'glyphName',\n  glyphorientationhorizontal: 'glyphOrientationHorizontal',\n  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',\n  glyphorientationvertical: 'glyphOrientationVertical',\n  'glyph-orientation-vertical': 'glyphOrientationVertical',\n  glyphref: 'glyphRef',\n  gradienttransform: 'gradientTransform',\n  gradientunits: 'gradientUnits',\n  hanging: 'hanging',\n  horizadvx: 'horizAdvX',\n  'horiz-adv-x': 'horizAdvX',\n  horizoriginx: 'horizOriginX',\n  'horiz-origin-x': 'horizOriginX',\n  ideographic: 'ideographic',\n  imagerendering: 'imageRendering',\n  'image-rendering': 'imageRendering',\n  in2: 'in2',\n  in: 'in',\n  inlist: 'inlist',\n  intercept: 'intercept',\n  k1: 'k1',\n  k2: 'k2',\n  k3: 'k3',\n  k4: 'k4',\n  k: 'k',\n  kernelmatrix: 'kernelMatrix',\n  kernelunitlength: 'kernelUnitLength',\n  kerning: 'kerning',\n  keypoints: 'keyPoints',\n  keysplines: 'keySplines',\n  keytimes: 'keyTimes',\n  lengthadjust: 'lengthAdjust',\n  letterspacing: 'letterSpacing',\n  'letter-spacing': 'letterSpacing',\n  lightingcolor: 'lightingColor',\n  'lighting-color': 'lightingColor',\n  limitingconeangle: 'limitingConeAngle',\n  local: 'local',\n  markerend: 'markerEnd',\n  'marker-end': 'markerEnd',\n  markerheight: 'markerHeight',\n  markermid: 'markerMid',\n  'marker-mid': 'markerMid',\n  markerstart: 'markerStart',\n  'marker-start': 'markerStart',\n  markerunits: 'markerUnits',\n  markerwidth: 'markerWidth',\n  mask: 'mask',\n  maskcontentunits: 'maskContentUnits',\n  maskunits: 'maskUnits',\n  mathematical: 'mathematical',\n  mode: 'mode',\n  numoctaves: 'numOctaves',\n  offset: 'offset',\n  opacity: 'opacity',\n  operator: 'operator',\n  order: 'order',\n  orient: 'orient',\n  orientation: 'orientation',\n  origin: 'origin',\n  overflow: 'overflow',\n  overlineposition: 'overlinePosition',\n  'overline-position': 'overlinePosition',\n  overlinethickness: 'overlineThickness',\n  'overline-thickness': 'overlineThickness',\n  paintorder: 'paintOrder',\n  'paint-order': 'paintOrder',\n  panose1: 'panose1',\n  'panose-1': 'panose1',\n  pathlength: 'pathLength',\n  patterncontentunits: 'patternContentUnits',\n  patterntransform: 'patternTransform',\n  patternunits: 'patternUnits',\n  pointerevents: 'pointerEvents',\n  'pointer-events': 'pointerEvents',\n  points: 'points',\n  pointsatx: 'pointsAtX',\n  pointsaty: 'pointsAtY',\n  pointsatz: 'pointsAtZ',\n  prefix: 'prefix',\n  preservealpha: 'preserveAlpha',\n  preserveaspectratio: 'preserveAspectRatio',\n  primitiveunits: 'primitiveUnits',\n  property: 'property',\n  r: 'r',\n  radius: 'radius',\n  refx: 'refX',\n  refy: 'refY',\n  renderingintent: 'renderingIntent',\n  'rendering-intent': 'renderingIntent',\n  repeatcount: 'repeatCount',\n  repeatdur: 'repeatDur',\n  requiredextensions: 'requiredExtensions',\n  requiredfeatures: 'requiredFeatures',\n  resource: 'resource',\n  restart: 'restart',\n  result: 'result',\n  results: 'results',\n  rotate: 'rotate',\n  rx: 'rx',\n  ry: 'ry',\n  scale: 'scale',\n  security: 'security',\n  seed: 'seed',\n  shaperendering: 'shapeRendering',\n  'shape-rendering': 'shapeRendering',\n  slope: 'slope',\n  spacing: 'spacing',\n  specularconstant: 'specularConstant',\n  specularexponent: 'specularExponent',\n  speed: 'speed',\n  spreadmethod: 'spreadMethod',\n  startoffset: 'startOffset',\n  stddeviation: 'stdDeviation',\n  stemh: 'stemh',\n  stemv: 'stemv',\n  stitchtiles: 'stitchTiles',\n  stopcolor: 'stopColor',\n  'stop-color': 'stopColor',\n  stopopacity: 'stopOpacity',\n  'stop-opacity': 'stopOpacity',\n  strikethroughposition: 'strikethroughPosition',\n  'strikethrough-position': 'strikethroughPosition',\n  strikethroughthickness: 'strikethroughThickness',\n  'strikethrough-thickness': 'strikethroughThickness',\n  string: 'string',\n  stroke: 'stroke',\n  strokedasharray: 'strokeDasharray',\n  'stroke-dasharray': 'strokeDasharray',\n  strokedashoffset: 'strokeDashoffset',\n  'stroke-dashoffset': 'strokeDashoffset',\n  strokelinecap: 'strokeLinecap',\n  'stroke-linecap': 'strokeLinecap',\n  strokelinejoin: 'strokeLinejoin',\n  'stroke-linejoin': 'strokeLinejoin',\n  strokemiterlimit: 'strokeMiterlimit',\n  'stroke-miterlimit': 'strokeMiterlimit',\n  strokewidth: 'strokeWidth',\n  'stroke-width': 'strokeWidth',\n  strokeopacity: 'strokeOpacity',\n  'stroke-opacity': 'strokeOpacity',\n  suppresscontenteditablewarning: 'suppressContentEditableWarning',\n  suppresshydrationwarning: 'suppressHydrationWarning',\n  surfacescale: 'surfaceScale',\n  systemlanguage: 'systemLanguage',\n  tablevalues: 'tableValues',\n  targetx: 'targetX',\n  targety: 'targetY',\n  textanchor: 'textAnchor',\n  'text-anchor': 'textAnchor',\n  textdecoration: 'textDecoration',\n  'text-decoration': 'textDecoration',\n  textlength: 'textLength',\n  textrendering: 'textRendering',\n  'text-rendering': 'textRendering',\n  to: 'to',\n  transform: 'transform',\n  transformorigin: 'transformOrigin',\n  'transform-origin': 'transformOrigin',\n  typeof: 'typeof',\n  u1: 'u1',\n  u2: 'u2',\n  underlineposition: 'underlinePosition',\n  'underline-position': 'underlinePosition',\n  underlinethickness: 'underlineThickness',\n  'underline-thickness': 'underlineThickness',\n  unicode: 'unicode',\n  unicodebidi: 'unicodeBidi',\n  'unicode-bidi': 'unicodeBidi',\n  unicoderange: 'unicodeRange',\n  'unicode-range': 'unicodeRange',\n  unitsperem: 'unitsPerEm',\n  'units-per-em': 'unitsPerEm',\n  unselectable: 'unselectable',\n  valphabetic: 'vAlphabetic',\n  'v-alphabetic': 'vAlphabetic',\n  values: 'values',\n  vectoreffect: 'vectorEffect',\n  'vector-effect': 'vectorEffect',\n  version: 'version',\n  vertadvy: 'vertAdvY',\n  'vert-adv-y': 'vertAdvY',\n  vertoriginx: 'vertOriginX',\n  'vert-origin-x': 'vertOriginX',\n  vertoriginy: 'vertOriginY',\n  'vert-origin-y': 'vertOriginY',\n  vhanging: 'vHanging',\n  'v-hanging': 'vHanging',\n  videographic: 'vIdeographic',\n  'v-ideographic': 'vIdeographic',\n  viewbox: 'viewBox',\n  viewtarget: 'viewTarget',\n  visibility: 'visibility',\n  vmathematical: 'vMathematical',\n  'v-mathematical': 'vMathematical',\n  vocab: 'vocab',\n  widths: 'widths',\n  wordspacing: 'wordSpacing',\n  'word-spacing': 'wordSpacing',\n  writingmode: 'writingMode',\n  'writing-mode': 'writingMode',\n  x1: 'x1',\n  x2: 'x2',\n  x: 'x',\n  xchannelselector: 'xChannelSelector',\n  xheight: 'xHeight',\n  'x-height': 'xHeight',\n  xlinkactuate: 'xlinkActuate',\n  'xlink:actuate': 'xlinkActuate',\n  xlinkarcrole: 'xlinkArcrole',\n  'xlink:arcrole': 'xlinkArcrole',\n  xlinkhref: 'xlinkHref',\n  'xlink:href': 'xlinkHref',\n  xlinkrole: 'xlinkRole',\n  'xlink:role': 'xlinkRole',\n  xlinkshow: 'xlinkShow',\n  'xlink:show': 'xlinkShow',\n  xlinktitle: 'xlinkTitle',\n  'xlink:title': 'xlinkTitle',\n  xlinktype: 'xlinkType',\n  'xlink:type': 'xlinkType',\n  xmlbase: 'xmlBase',\n  'xml:base': 'xmlBase',\n  xmllang: 'xmlLang',\n  'xml:lang': 'xmlLang',\n  xmlns: 'xmlns',\n  'xml:space': 'xmlSpace',\n  xmlnsxlink: 'xmlnsXlink',\n  'xmlns:xlink': 'xmlnsXlink',\n  xmlspace: 'xmlSpace',\n  y1: 'y1',\n  y2: 'y2',\n  y: 'y',\n  ychannelselector: 'yChannelSelector',\n  z: 'z',\n  zoomandpan: 'zoomAndPan'\n};\n\nvar warnedProperties = {};\nvar EVENT_NAME_REGEX = /^on./;\nvar INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\nvar rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$') ;\nvar rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$') ;\n\nfunction validateProperty(tagName, name, value, eventRegistry) {\n  {\n    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n      return true;\n    }\n\n    var lowerCasedName = name.toLowerCase();\n\n    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {\n      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');\n\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    {\n      // Actions are special because unlike events they can have other value types.\n      if (typeof value === 'function') {\n        if (tagName === 'form' && name === 'action') {\n          return true;\n        }\n\n        if (tagName === 'input' && name === 'formAction') {\n          return true;\n        }\n\n        if (tagName === 'button' && name === 'formAction') {\n          return true;\n        }\n      }\n    } // We can't rely on the event system being injected on the server.\n\n\n    if (eventRegistry != null) {\n      var registrationNameDependencies = eventRegistry.registrationNameDependencies,\n          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;\n\n      if (registrationNameDependencies.hasOwnProperty(name)) {\n        return true;\n      }\n\n      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;\n\n      if (registrationName != null) {\n        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);\n\n        warnedProperties[name] = true;\n        return true;\n      }\n\n      if (EVENT_NAME_REGEX.test(name)) {\n        error('Unknown event handler property `%s`. It will be ignored.', name);\n\n        warnedProperties[name] = true;\n        return true;\n      }\n    } else if (EVENT_NAME_REGEX.test(name)) {\n      // If no event plugins have been injected, we are in a server environment.\n      // So we can't tell if the event name is correct for sure, but we can filter\n      // out known bad ones like `onclick`. We can't suggest a specific replacement though.\n      if (INVALID_EVENT_NAME_REGEX.test(name)) {\n        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);\n      }\n\n      warnedProperties[name] = true;\n      return true;\n    } // Let the ARIA attribute hook validate ARIA attributes\n\n\n    if (rARIA.test(name) || rARIACamel.test(name)) {\n      return true;\n    }\n\n    if (lowerCasedName === 'innerhtml') {\n      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');\n\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'aria') {\n      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');\n\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {\n      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);\n\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'number' && isNaN(value)) {\n      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);\n\n      warnedProperties[name] = true;\n      return true;\n    } // Known attributes should match the casing specified in the property config.\n\n\n    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n      var standardName = possibleStandardNames[lowerCasedName];\n\n      if (standardName !== name) {\n        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);\n\n        warnedProperties[name] = true;\n        return true;\n      }\n    } else if (name !== lowerCasedName) {\n      // Unknown attributes should have lowercase casing since that's how they\n      // will be cased anyway with server rendering.\n      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);\n\n      warnedProperties[name] = true;\n      return true;\n    } // Now that we've validated casing, do not validate\n    // data types for reserved props\n\n\n    switch (name) {\n      case 'dangerouslySetInnerHTML':\n      case 'children':\n      case 'style':\n      case 'suppressContentEditableWarning':\n      case 'suppressHydrationWarning':\n      case 'defaultValue': // Reserved\n\n      case 'defaultChecked':\n      case 'innerHTML':\n      case 'ref':\n        {\n          return true;\n        }\n\n    }\n\n    switch (typeof value) {\n      case 'boolean':\n        {\n          switch (name) {\n            case 'autoFocus':\n            case 'checked':\n            case 'multiple':\n            case 'muted':\n            case 'selected':\n            case 'contentEditable':\n            case 'spellCheck':\n            case 'draggable':\n            case 'value':\n            case 'autoReverse':\n            case 'externalResourcesRequired':\n            case 'focusable':\n            case 'preserveAlpha':\n            case 'allowFullScreen':\n            case 'async':\n            case 'autoPlay':\n            case 'controls':\n            case 'default':\n            case 'defer':\n            case 'disabled':\n            case 'disablePictureInPicture':\n            case 'disableRemotePlayback':\n            case 'formNoValidate':\n            case 'hidden':\n            case 'loop':\n            case 'noModule':\n            case 'noValidate':\n            case 'open':\n            case 'playsInline':\n            case 'readOnly':\n            case 'required':\n            case 'reversed':\n            case 'scoped':\n            case 'seamless':\n            case 'itemScope':\n            case 'capture':\n            case 'download':\n              {\n                // Boolean properties can accept boolean values\n                return true;\n              }\n\n            default:\n              {\n                var prefix = name.toLowerCase().slice(0, 5);\n\n                if (prefix === 'data-' || prefix === 'aria-') {\n                  return true;\n                }\n\n                if (value) {\n                  error('Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.', value, name, name, value, name);\n                } else {\n                  error('Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.\\n\\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);\n                }\n\n                warnedProperties[name] = true;\n                return true;\n              }\n          }\n        }\n\n      case 'function':\n      case 'symbol':\n        // eslint-disable-line\n        // Warn when a known attribute is a bad type\n        warnedProperties[name] = true;\n        return false;\n\n      case 'string':\n        {\n          // Warn when passing the strings 'false' or 'true' into a boolean prop\n          if (value === 'false' || value === 'true') {\n            switch (name) {\n              case 'checked':\n              case 'selected':\n              case 'multiple':\n              case 'muted':\n              case 'allowFullScreen':\n              case 'async':\n              case 'autoPlay':\n              case 'controls':\n              case 'default':\n              case 'defer':\n              case 'disabled':\n              case 'disablePictureInPicture':\n              case 'disableRemotePlayback':\n              case 'formNoValidate':\n              case 'hidden':\n              case 'loop':\n              case 'noModule':\n              case 'noValidate':\n              case 'open':\n              case 'playsInline':\n              case 'readOnly':\n              case 'required':\n              case 'reversed':\n              case 'scoped':\n              case 'seamless':\n              case 'itemScope':\n                {\n                  break;\n                }\n\n              default:\n                {\n                  return true;\n                }\n            }\n\n            error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string \"false\".', name, value);\n\n            warnedProperties[name] = true;\n            return true;\n          }\n        }\n    }\n\n    return true;\n  }\n}\n\nfunction warnUnknownProperties(type, props, eventRegistry) {\n  {\n    var unknownProps = [];\n\n    for (var key in props) {\n      var isValid = validateProperty(type, key, props[key], eventRegistry);\n\n      if (!isValid) {\n        unknownProps.push(key);\n      }\n    }\n\n    var unknownPropString = unknownProps.map(function (prop) {\n      return '`' + prop + '`';\n    }).join(', ');\n\n    if (unknownProps.length === 1) {\n      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);\n    } else if (unknownProps.length > 1) {\n      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);\n    }\n  }\n}\n\nfunction validateProperties(type, props, eventRegistry) {\n  if (isCustomElement(type) || typeof props.is === 'string') {\n    return;\n  }\n\n  warnUnknownProperties(type, props, eventRegistry);\n}\n\n// 'msTransform' is correct, but the other prefixes should be capitalized\nvar badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\nvar msPattern$1 = /^-ms-/;\nvar hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon\n\nvar badStyleValueWithSemicolonPattern = /;\\s*$/;\nvar warnedStyleNames = {};\nvar warnedStyleValues = {};\nvar warnedForNaNValue = false;\nvar warnedForInfinityValue = false;\n\nfunction camelize(string) {\n  return string.replace(hyphenPattern, function (_, character) {\n    return character.toUpperCase();\n  });\n}\n\nfunction warnHyphenatedStyleName(name) {\n  {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n\n    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests\n    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n    // is converted to lowercase `ms`.\n    camelize(name.replace(msPattern$1, 'ms-')));\n  }\n}\n\nfunction warnBadVendoredStyleName(name) {\n  {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n\n    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));\n  }\n}\n\nfunction warnStyleValueWithSemicolon(name, value) {\n  {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n\n    error(\"Style property values shouldn't contain a semicolon. \" + 'Try \"%s: %s\" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));\n  }\n}\n\nfunction warnStyleValueIsNaN(name, value) {\n  {\n    if (warnedForNaNValue) {\n      return;\n    }\n\n    warnedForNaNValue = true;\n\n    error('`NaN` is an invalid value for the `%s` css style property.', name);\n  }\n}\n\nfunction warnStyleValueIsInfinity(name, value) {\n  {\n    if (warnedForInfinityValue) {\n      return;\n    }\n\n    warnedForInfinityValue = true;\n\n    error('`Infinity` is an invalid value for the `%s` css style property.', name);\n  }\n}\n\nfunction warnValidStyle(name, value) {\n  {\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value);\n    }\n\n    if (typeof value === 'number') {\n      if (isNaN(value)) {\n        warnStyleValueIsNaN(name);\n      } else if (!isFinite(value)) {\n        warnStyleValueIsInfinity(name);\n      }\n    }\n  }\n}\n\nfunction getCrossOriginString(input) {\n  if (typeof input === 'string') {\n    return input === 'use-credentials' ? input : '';\n  }\n\n  return undefined;\n}\n\n// code copied and modified from escape-html\nvar matchHtmlRegExp = /[\"'&<>]/;\n/**\n * Escapes special characters and HTML entities in a given html string.\n *\n * @param  {string} string HTML string to escape for later insertion\n * @return {string}\n * @public\n */\n\nfunction escapeHtml(string) {\n  {\n    checkHtmlStringCoercion(string);\n  }\n\n  var str = '' + string;\n  var match = matchHtmlRegExp.exec(str);\n\n  if (!match) {\n    return str;\n  }\n\n  var escape;\n  var html = '';\n  var index;\n  var lastIndex = 0;\n\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        // \"\n        escape = '&quot;';\n        break;\n\n      case 38:\n        // &\n        escape = '&amp;';\n        break;\n\n      case 39:\n        // '\n        escape = '&#x27;'; // modified from escape-html; used to be '&#39'\n\n        break;\n\n      case 60:\n        // <\n        escape = '&lt;';\n        break;\n\n      case 62:\n        // >\n        escape = '&gt;';\n        break;\n\n      default:\n        continue;\n    }\n\n    if (lastIndex !== index) {\n      html += str.slice(lastIndex, index);\n    }\n\n    lastIndex = index + 1;\n    html += escape;\n  }\n\n  return lastIndex !== index ? html + str.slice(lastIndex, index) : html;\n} // end code copied and modified from escape-html\n\n/**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */\n\n\nfunction escapeTextForBrowser(text) {\n  if (typeof text === 'boolean' || typeof text === 'number') {\n    // this shortcircuit helps perf for types that we know will never have\n    // special characters, especially given that this function is used often\n    // for numeric dom ids.\n    return '' + text;\n  }\n\n  return escapeHtml(text);\n}\n\nvar uppercasePattern = /([A-Z])/g;\nvar msPattern = /^ms-/;\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n */\n\nfunction hyphenateStyleName(name) {\n  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');\n}\n\n// and any newline or tab are filtered out as if they're not part of the URL.\n// https://url.spec.whatwg.org/#url-parsing\n// Tab or newline are defined as \\r\\n\\t:\n// https://infra.spec.whatwg.org/#ascii-tab-or-newline\n// A C0 control is a code point in the range \\u0000 NULL to \\u001F\n// INFORMATION SEPARATOR ONE, inclusive:\n// https://infra.spec.whatwg.org/#c0-control-or-space\n\n/* eslint-disable max-len */\n\nvar isJavaScriptProtocol = /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\nvar didWarn = false;\n\nfunction sanitizeURL(url) {\n  // We should never have symbols here because they get filtered out elsewhere.\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  var stringifiedURL = '' + url;\n\n  {\n    if (!didWarn && isJavaScriptProtocol.test(stringifiedURL)) {\n      didWarn = true;\n\n      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(stringifiedURL));\n    }\n  }\n\n  return url;\n}\n\n// The build script is at scripts/rollup/generate-inline-fizz-runtime.js.\n// Run `yarn generate-inline-fizz-runtime` to generate.\nvar clientRenderBoundary = '$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data=\"$!\",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};';\nvar completeBoundary = '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data=\"$!\",a.setAttribute(\"data-dgst\",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if(\"/$\"===d)if(0===f)break;else f--;else\"$\"!==d&&\"$?\"!==d&&\"$!\"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data=\"$\"}b._reactRetry&&b._reactRetry()}};';\nvar completeBoundaryWithStyles = '$RM=new Map;\\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll(\"link[data-precedence],style[data-precedence]\"),v=[],k=0;b=h[k++];)\"not all\"===b.getAttribute(\"media\")?v.push(b):(\"LINK\"===b.tagName&&n.set(b.getAttribute(\"href\"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement(\"link\");a.href=d;a.rel=\"stylesheet\";for(a.dataset.precedence=\\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute(\"media\");!e||\"l\"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute(\"data-precedence\");a.removeAttribute(\"media\")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,\"\"),u.bind(null,r,t,\"Resource failed to load\"))};';\nvar completeSegment = '$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};';\nvar formReplaying = 'addEventListener(\"submit\",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute(\"formAction\");null!=f&&(e=f,b=null)}\"javascript:throw new Error(\\'React form unexpectedly submitted.\\')\"===e&&(a.preventDefault(),b?(a=document.createElement(\"input\"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.ownerDocument||c,(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,d,b))}});';\n\nfunction getValueDescriptorExpectingObjectForWarning(thing) {\n  return thing === null ? '`null`' : thing === undefined ? '`undefined`' : thing === '' ? 'an empty string' : \"something with type \\\"\" + typeof thing + \"\\\"\";\n}\n\n// same object across all transitions.\n\nvar sharedNotPendingObject = {\n  pending: false,\n  data: null,\n  method: null,\n  action: null\n};\nvar NotPending = Object.freeze(sharedNotPendingObject) ;\n\nvar ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nvar ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;\nvar ReactDOMServerDispatcher = {\n  prefetchDNS: prefetchDNS,\n  preconnect: preconnect,\n  preload: preload,\n  preloadModule: preloadModule,\n  preinitStyle: preinitStyle,\n  preinitScript: preinitScript,\n  preinitModuleScript: preinitModuleScript\n};\nfunction prepareHostDispatcher() {\n  ReactDOMCurrentDispatcher.current = ReactDOMServerDispatcher;\n} // We make every property of the descriptor optional because it is not a contract that\nvar ScriptStreamingFormat = 0;\nvar DataStreamingFormat = 1;\nvar NothingSent\n/*                      */\n= 0;\nvar SentCompleteSegmentFunction\n/*      */\n= 1;\nvar SentCompleteBoundaryFunction\n/*     */\n= 2;\nvar SentClientRenderFunction\n/*         */\n= 4;\nvar SentStyleInsertionFunction\n/*       */\n= 8;\nvar SentFormReplayingRuntime\n/*         */\n= 16; // Per request, global state that is not contextual to the rendering subtree.\n// This cannot be resumed and therefore should only contain things that are\n// temporary working state or are never used in the prerender pass.\n// Credentials here are things that affect whether a browser will make a request\n// as well as things that affect which connection the browser will use for that request.\n// We want these to be aligned across preloads and resources because otherwise the preload\n// will be wasted.\n// We investigated whether referrerPolicy should be included here but from experimentation\n// it seems that browsers do not treat this as part of the http cache key and does not affect\n// which connection is used.\n\nvar EXISTS = null; // This constant is to mark preloads that have no unique credentials\n// to convey. It should never be checked by identity and we should not\n// assume Preload values in ResumableState equal this value because they\n// will have come from some parsed input.\n\nvar PRELOAD_NO_CREDS = [];\n\n{\n  Object.freeze(PRELOAD_NO_CREDS);\n} // Per response, global state that is not contextual to the rendering subtree.\n// This is resumable and therefore should be serializable.\n\n\nvar dataElementQuotedEnd = stringToPrecomputedChunk('\"></template>');\nvar startInlineScript = stringToPrecomputedChunk('<script>');\nvar endInlineScript = stringToPrecomputedChunk('</script>');\nvar startScriptSrc = stringToPrecomputedChunk('<script src=\"');\nvar startModuleSrc = stringToPrecomputedChunk('<script type=\"module\" src=\"');\nvar scriptNonce = stringToPrecomputedChunk('\" nonce=\"');\nvar scriptIntegirty = stringToPrecomputedChunk('\" integrity=\"');\nvar scriptCrossOrigin = stringToPrecomputedChunk('\" crossorigin=\"');\nvar endAsyncScript = stringToPrecomputedChunk('\" async=\"\"></script>');\n/**\n * This escaping function is designed to work with bootstrapScriptContent and importMap only.\n * because we know we are escaping the entire script. We can avoid for instance\n * escaping html comment string sequences that are valid javascript as well because\n * if there are no sebsequent <script sequences the html parser will never enter\n * script data double escaped state (see: https://www.w3.org/TR/html53/syntax.html#script-data-double-escaped-state)\n *\n * While untrusted script content should be made safe before using this api it will\n * ensure that the script cannot be early terminated or never terminated state\n */\n\nfunction escapeBootstrapAndImportMapScriptContent(scriptText) {\n  {\n    checkHtmlStringCoercion(scriptText);\n  }\n\n  return ('' + scriptText).replace(scriptRegex, scriptReplacer);\n}\n\nvar scriptRegex = /(<\\/|<)(s)(cript)/gi;\n\nvar scriptReplacer = function (match, prefix, s, suffix) {\n  return \"\" + prefix + (s === 's' ? \"\\\\u0073\" : \"\\\\u0053\") + suffix;\n};\n\nvar importMapScriptStart = stringToPrecomputedChunk('<script type=\"importmap\">');\nvar importMapScriptEnd = stringToPrecomputedChunk('</script>'); // Since we store headers as strings we deal with their length in utf16 code units\n// rather than visual characters or the utf8 encoding that is used for most binary\n// serialization. Some common HTTP servers only allow for headers to be 4kB in length.\n// We choose a default length that is likely to be well under this already limited length however\n// pathological cases may still cause the utf-8 encoding of the headers to approach this limit.\n// It should also be noted that this maximum is a soft maximum. we have not reached the limit we will\n// allow one more header to be captured which means in practice if the limit is approached it will be exceeded\n\nvar DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS = 2000; // Allows us to keep track of what we've already written so we can refer back to it.\n// if passed externalRuntimeConfig and the enableFizzExternalRuntime feature flag\n// is set, the server will send instructions via data attributes (instead of inline scripts)\n\nfunction createRenderState$1(resumableState, nonce, externalRuntimeConfig, importMap, onHeaders, maxHeadersLength) {\n  var inlineScriptWithNonce = nonce === undefined ? startInlineScript : stringToPrecomputedChunk('<script nonce=\"' + escapeTextForBrowser(nonce) + '\">');\n  var idPrefix = resumableState.idPrefix;\n  var bootstrapChunks = [];\n  var externalRuntimeScript = null;\n  var bootstrapScriptContent = resumableState.bootstrapScriptContent,\n      bootstrapScripts = resumableState.bootstrapScripts,\n      bootstrapModules = resumableState.bootstrapModules;\n\n  if (bootstrapScriptContent !== undefined) {\n    bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapAndImportMapScriptContent(bootstrapScriptContent)), endInlineScript);\n  }\n\n  {\n\n    if (externalRuntimeConfig !== undefined) {\n      if (typeof externalRuntimeConfig === 'string') {\n        externalRuntimeScript = {\n          src: externalRuntimeConfig,\n          chunks: []\n        };\n        pushScriptImpl(externalRuntimeScript.chunks, {\n          src: externalRuntimeConfig,\n          async: true,\n          integrity: undefined,\n          nonce: nonce\n        });\n      } else {\n        externalRuntimeScript = {\n          src: externalRuntimeConfig.src,\n          chunks: []\n        };\n        pushScriptImpl(externalRuntimeScript.chunks, {\n          src: externalRuntimeConfig.src,\n          async: true,\n          integrity: externalRuntimeConfig.integrity,\n          nonce: nonce\n        });\n      }\n    }\n  }\n\n  var importMapChunks = [];\n\n  if (importMap !== undefined) {\n    var map = importMap;\n    importMapChunks.push(importMapScriptStart);\n    importMapChunks.push(stringToChunk(escapeBootstrapAndImportMapScriptContent(JSON.stringify(map))));\n    importMapChunks.push(importMapScriptEnd);\n  }\n\n  {\n    if (onHeaders && typeof maxHeadersLength === 'number') {\n      if (maxHeadersLength <= 0) {\n        error('React expected a positive non-zero `maxHeadersLength` option but found %s instead. When using the `onHeaders` option you may supply an optional `maxHeadersLength` option as well however, when setting this value to zero or less no headers will be captured.', maxHeadersLength === 0 ? 'zero' : maxHeadersLength);\n      }\n    }\n  }\n\n  var headers = onHeaders ? {\n    preconnects: '',\n    fontPreloads: '',\n    highImagePreloads: '',\n    remainingCapacity: typeof maxHeadersLength === 'number' ? maxHeadersLength : DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS\n  } : null;\n  var renderState = {\n    placeholderPrefix: stringToPrecomputedChunk(idPrefix + 'P:'),\n    segmentPrefix: stringToPrecomputedChunk(idPrefix + 'S:'),\n    boundaryPrefix: stringToPrecomputedChunk(idPrefix + 'B:'),\n    startInlineScript: inlineScriptWithNonce,\n    htmlChunks: null,\n    headChunks: null,\n    externalRuntimeScript: externalRuntimeScript,\n    bootstrapChunks: bootstrapChunks,\n    importMapChunks: importMapChunks,\n    onHeaders: onHeaders,\n    headers: headers,\n    resets: {\n      font: {},\n      dns: {},\n      connect: {\n        default: {},\n        anonymous: {},\n        credentials: {}\n      },\n      image: {},\n      style: {}\n    },\n    charsetChunks: [],\n    viewportChunks: [],\n    hoistableChunks: [],\n    // cleared on flush\n    preconnects: new Set(),\n    fontPreloads: new Set(),\n    highImagePreloads: new Set(),\n    // usedImagePreloads: new Set(),\n    styles: new Map(),\n    bootstrapScripts: new Set(),\n    scripts: new Set(),\n    bulkPreloads: new Set(),\n    preloads: {\n      images: new Map(),\n      stylesheets: new Map(),\n      scripts: new Map(),\n      moduleScripts: new Map()\n    },\n    nonce: nonce,\n    // like a module global for currently rendering boundary\n    hoistableState: null,\n    stylesToHoist: false\n  };\n\n  if (bootstrapScripts !== undefined) {\n    for (var i = 0; i < bootstrapScripts.length; i++) {\n      var scriptConfig = bootstrapScripts[i];\n      var src = void 0,\n          crossOrigin = void 0,\n          integrity = void 0;\n      var props = {\n        rel: 'preload',\n        as: 'script',\n        fetchPriority: 'low',\n        nonce: nonce\n      };\n\n      if (typeof scriptConfig === 'string') {\n        props.href = src = scriptConfig;\n      } else {\n        props.href = src = scriptConfig.src;\n        props.integrity = integrity = typeof scriptConfig.integrity === 'string' ? scriptConfig.integrity : undefined;\n        props.crossOrigin = crossOrigin = typeof scriptConfig === 'string' || scriptConfig.crossOrigin == null ? undefined : scriptConfig.crossOrigin === 'use-credentials' ? 'use-credentials' : '';\n      }\n\n      preloadBootstrapScriptOrModule(resumableState, renderState, src, props);\n      bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(src)));\n\n      if (nonce) {\n        bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));\n      }\n\n      if (typeof integrity === 'string') {\n        bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(integrity)));\n      }\n\n      if (typeof crossOrigin === 'string') {\n        bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(crossOrigin)));\n      }\n\n      bootstrapChunks.push(endAsyncScript);\n    }\n  }\n\n  if (bootstrapModules !== undefined) {\n    for (var _i = 0; _i < bootstrapModules.length; _i++) {\n      var _scriptConfig = bootstrapModules[_i];\n\n      var _src = void 0,\n          _crossOrigin = void 0,\n          _integrity = void 0;\n\n      var _props = {\n        rel: 'modulepreload',\n        fetchPriority: 'low',\n        nonce: nonce\n      };\n\n      if (typeof _scriptConfig === 'string') {\n        _props.href = _src = _scriptConfig;\n      } else {\n        _props.href = _src = _scriptConfig.src;\n        _props.integrity = _integrity = typeof _scriptConfig.integrity === 'string' ? _scriptConfig.integrity : undefined;\n        _props.crossOrigin = _crossOrigin = typeof _scriptConfig === 'string' || _scriptConfig.crossOrigin == null ? undefined : _scriptConfig.crossOrigin === 'use-credentials' ? 'use-credentials' : '';\n      }\n\n      preloadBootstrapScriptOrModule(resumableState, renderState, _src, _props);\n      bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(_src)));\n\n      if (nonce) {\n        bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));\n      }\n\n      if (typeof _integrity === 'string') {\n        bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(_integrity)));\n      }\n\n      if (typeof _crossOrigin === 'string') {\n        bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(_crossOrigin)));\n      }\n\n      bootstrapChunks.push(endAsyncScript);\n    }\n  }\n\n  return renderState;\n}\nfunction createResumableState(identifierPrefix, externalRuntimeConfig, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {\n  var idPrefix = identifierPrefix === undefined ? '' : identifierPrefix;\n  var streamingFormat = ScriptStreamingFormat;\n\n  {\n    if (externalRuntimeConfig !== undefined) {\n      streamingFormat = DataStreamingFormat;\n    }\n  }\n\n  return {\n    idPrefix: idPrefix,\n    nextFormID: 0,\n    streamingFormat: streamingFormat,\n    bootstrapScriptContent: bootstrapScriptContent,\n    bootstrapScripts: bootstrapScripts,\n    bootstrapModules: bootstrapModules,\n    instructions: NothingSent,\n    hasBody: false,\n    hasHtml: false,\n    // @TODO add bootstrap script to implicit preloads\n    // persistent\n    unknownResources: {},\n    dnsResources: {},\n    connectResources: {\n      default: {},\n      anonymous: {},\n      credentials: {}\n    },\n    imageResources: {},\n    styleResources: {},\n    scriptResources: {},\n    moduleUnknownResources: {},\n    moduleScriptResources: {}\n  };\n}\n// modes. We only include the variants as they matter for the sake of our purposes.\n// We don't actually provide the namespace therefore we use constants instead of the string.\n\nvar ROOT_HTML_MODE = 0; // Used for the root most element tag.\n// We have a less than HTML_HTML_MODE check elsewhere. If you add more cases here, make sure it\n// still makes sense\n\nvar HTML_HTML_MODE = 1; // Used for the <html> if it is at the top level.\n\nvar HTML_MODE = 2;\nvar SVG_MODE = 3;\nvar MATHML_MODE = 4;\nvar HTML_TABLE_MODE = 5;\nvar HTML_TABLE_BODY_MODE = 6;\nvar HTML_TABLE_ROW_MODE = 7;\nvar HTML_COLGROUP_MODE = 8; // We have a greater than HTML_TABLE_MODE check elsewhere. If you add more cases here, make sure it\n// still makes sense\n\nvar NO_SCOPE =\n/*         */\n0;\nvar NOSCRIPT_SCOPE =\n/*   */\n1;\nvar PICTURE_SCOPE =\n/*    */\n2; // Lets us keep track of contextual state and pick it back up after suspending.\n\nfunction createFormatContext(insertionMode, selectedValue, tagScope) {\n  return {\n    insertionMode: insertionMode,\n    selectedValue: selectedValue,\n    tagScope: tagScope\n  };\n}\n\nfunction createRootFormatContext(namespaceURI) {\n  var insertionMode = namespaceURI === 'http://www.w3.org/2000/svg' ? SVG_MODE : namespaceURI === 'http://www.w3.org/1998/Math/MathML' ? MATHML_MODE : ROOT_HTML_MODE;\n  return createFormatContext(insertionMode, null, NO_SCOPE);\n}\nfunction getChildFormatContext(parentContext, type, props) {\n  switch (type) {\n    case 'noscript':\n      return createFormatContext(HTML_MODE, null, parentContext.tagScope | NOSCRIPT_SCOPE);\n\n    case 'select':\n      return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue, parentContext.tagScope);\n\n    case 'svg':\n      return createFormatContext(SVG_MODE, null, parentContext.tagScope);\n\n    case 'picture':\n      return createFormatContext(HTML_MODE, null, parentContext.tagScope | PICTURE_SCOPE);\n\n    case 'math':\n      return createFormatContext(MATHML_MODE, null, parentContext.tagScope);\n\n    case 'foreignObject':\n      return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n    // Table parents are special in that their children can only be created at all if they're\n    // wrapped in a table parent. So we need to encode that we're entering this mode.\n\n    case 'table':\n      return createFormatContext(HTML_TABLE_MODE, null, parentContext.tagScope);\n\n    case 'thead':\n    case 'tbody':\n    case 'tfoot':\n      return createFormatContext(HTML_TABLE_BODY_MODE, null, parentContext.tagScope);\n\n    case 'colgroup':\n      return createFormatContext(HTML_COLGROUP_MODE, null, parentContext.tagScope);\n\n    case 'tr':\n      return createFormatContext(HTML_TABLE_ROW_MODE, null, parentContext.tagScope);\n  }\n\n  if (parentContext.insertionMode >= HTML_TABLE_MODE) {\n    // Whatever tag this was, it wasn't a table parent or other special parent, so we must have\n    // entered plain HTML again.\n    return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n  }\n\n  if (parentContext.insertionMode === ROOT_HTML_MODE) {\n    if (type === 'html') {\n      // We've emitted the root and is now in <html> mode.\n      return createFormatContext(HTML_HTML_MODE, null, parentContext.tagScope);\n    } else {\n      // We've emitted the root and is now in plain HTML mode.\n      return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n    }\n  } else if (parentContext.insertionMode === HTML_HTML_MODE) {\n    // We've emitted the document element and is now in plain HTML mode.\n    return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n  }\n\n  return parentContext;\n}\nfunction makeId(resumableState, treeId, localId) {\n  var idPrefix = resumableState.idPrefix;\n  var id = ':' + idPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end\n  // that represents the position of this useId hook among all the useId\n  // hooks for this fiber.\n\n  if (localId > 0) {\n    id += 'H' + localId.toString(32);\n  }\n\n  return id + ':';\n}\n\nfunction encodeHTMLTextNode(text) {\n  return escapeTextForBrowser(text);\n}\n\nvar textSeparator = stringToPrecomputedChunk('<!-- -->');\nfunction pushTextInstance$1(target, text, renderState, textEmbedded) {\n  if (text === '') {\n    // Empty text doesn't have a DOM node representation and the hydration is aware of this.\n    return textEmbedded;\n  }\n\n  if (textEmbedded) {\n    target.push(textSeparator);\n  }\n\n  target.push(stringToChunk(encodeHTMLTextNode(text)));\n  return true;\n} // Called when Fizz is done with a Segment. Currently the only purpose is to conditionally\n// emit a text separator when we don't know for sure it is safe to omit\n\nfunction pushSegmentFinale$1(target, renderState, lastPushedText, textEmbedded) {\n  if (lastPushedText && textEmbedded) {\n    target.push(textSeparator);\n  }\n}\nvar styleNameCache = new Map();\n\nfunction processStyleName(styleName) {\n  var chunk = styleNameCache.get(styleName);\n\n  if (chunk !== undefined) {\n    return chunk;\n  }\n\n  var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));\n  styleNameCache.set(styleName, result);\n  return result;\n}\n\nvar styleAttributeStart = stringToPrecomputedChunk(' style=\"');\nvar styleAssign = stringToPrecomputedChunk(':');\nvar styleSeparator = stringToPrecomputedChunk(';');\n\nfunction pushStyleAttribute(target, style) {\n  if (typeof style !== 'object') {\n    throw new Error('The `style` prop expects a mapping from style properties to values, ' + \"not a string. For example, style={{marginRight: spacing + 'em'}} when \" + 'using JSX.');\n  }\n\n  var isFirst = true;\n\n  for (var styleName in style) {\n    if (!hasOwnProperty.call(style, styleName)) {\n      continue;\n    } // If you provide unsafe user data here they can inject arbitrary CSS\n    // which may be problematic (I couldn't repro this):\n    // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n    // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n    // This is not an XSS hole but instead a potential CSS injection issue\n    // which has lead to a greater discussion about how we're going to\n    // trust URLs moving forward. See #2115901\n\n\n    var styleValue = style[styleName];\n\n    if (styleValue == null || typeof styleValue === 'boolean' || styleValue === '') {\n      // TODO: We used to set empty string as a style with an empty value. Does that ever make sense?\n      continue;\n    }\n\n    var nameChunk = void 0;\n    var valueChunk = void 0;\n    var isCustomProperty = styleName.indexOf('--') === 0;\n\n    if (isCustomProperty) {\n      nameChunk = stringToChunk(escapeTextForBrowser(styleName));\n\n      {\n        checkCSSPropertyStringCoercion(styleValue, styleName);\n      }\n\n      valueChunk = stringToChunk(escapeTextForBrowser(('' + styleValue).trim()));\n    } else {\n      {\n        warnValidStyle(styleName, styleValue);\n      }\n\n      nameChunk = processStyleName(styleName);\n\n      if (typeof styleValue === 'number') {\n        if (styleValue !== 0 && !isUnitlessNumber(styleName)) {\n          valueChunk = stringToChunk(styleValue + 'px'); // Presumes implicit 'px' suffix for unitless numbers\n        } else {\n          valueChunk = stringToChunk('' + styleValue);\n        }\n      } else {\n        {\n          checkCSSPropertyStringCoercion(styleValue, styleName);\n        }\n\n        valueChunk = stringToChunk(escapeTextForBrowser(('' + styleValue).trim()));\n      }\n    }\n\n    if (isFirst) {\n      isFirst = false; // If it's first, we don't need any separators prefixed.\n\n      target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);\n    } else {\n      target.push(styleSeparator, nameChunk, styleAssign, valueChunk);\n    }\n  }\n\n  if (!isFirst) {\n    target.push(attributeEnd);\n  }\n}\n\nvar attributeSeparator = stringToPrecomputedChunk(' ');\nvar attributeAssign = stringToPrecomputedChunk('=\"');\nvar attributeEnd = stringToPrecomputedChunk('\"');\nvar attributeEmptyString = stringToPrecomputedChunk('=\"\"');\n\nfunction pushBooleanAttribute(target, name, value) // not null or undefined\n{\n  if (value && typeof value !== 'function' && typeof value !== 'symbol') {\n    target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n  }\n}\n\nfunction pushStringAttribute(target, name, value) // not null or undefined\n{\n  if (typeof value !== 'function' && typeof value !== 'symbol' && typeof value !== 'boolean') {\n    target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n  }\n}\n\nfunction makeFormFieldPrefix(resumableState) {\n  var id = resumableState.nextFormID++;\n  return resumableState.idPrefix + id;\n} // Since this will likely be repeated a lot in the HTML, we use a more concise message\n// than on the client and hopefully it's googleable.\n\n\nvar actionJavaScriptURL = stringToPrecomputedChunk(escapeTextForBrowser( // eslint-disable-next-line no-script-url\n\"javascript:throw new Error('React form unexpectedly submitted.')\"));\nvar startHiddenInputChunk = stringToPrecomputedChunk('<input type=\"hidden\"');\n\nfunction pushAdditionalFormField(value, key) {\n  var target = this;\n  target.push(startHiddenInputChunk);\n\n  if (typeof value !== 'string') {\n    throw new Error('File/Blob fields are not yet supported in progressive forms. ' + 'It probably means you are closing over binary data or FormData in a Server Action.');\n  }\n\n  pushStringAttribute(target, 'name', key);\n  pushStringAttribute(target, 'value', value);\n  target.push(endOfStartTagSelfClosing);\n}\n\nfunction pushAdditionalFormFields(target, formData) {\n  if (formData !== null) {\n    // $FlowFixMe[prop-missing]: FormData has forEach.\n    formData.forEach(pushAdditionalFormField, target);\n  }\n}\n\nfunction pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name) {\n  var formData = null;\n\n  if (typeof formAction === 'function') {\n    // Function form actions cannot control the form properties\n    {\n      if (name !== null && !didWarnFormActionName) {\n        didWarnFormActionName = true;\n\n        error('Cannot specify a \"name\" prop for a button that specifies a function as a formAction. ' + 'React needs it to encode which action should be invoked. It will get overridden.');\n      }\n\n      if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {\n        didWarnFormActionMethod = true;\n\n        error('Cannot specify a formEncType or formMethod for a button that specifies a ' + 'function as a formAction. React provides those automatically. They will get overridden.');\n      }\n\n      if (formTarget !== null && !didWarnFormActionTarget) {\n        didWarnFormActionTarget = true;\n\n        error('Cannot specify a formTarget for a button that specifies a function as a formAction. ' + 'The function will always be executed in the same window.');\n      }\n    }\n\n    var customAction = formAction.$$FORM_ACTION;\n\n    if (typeof customAction === 'function') {\n      // This action has a custom progressive enhancement form that can submit the form\n      // back to the server if it's invoked before hydration. Such as a Server Action.\n      var prefix = makeFormFieldPrefix(resumableState);\n      var customFields = formAction.$$FORM_ACTION(prefix);\n      name = customFields.name;\n      formAction = customFields.action || '';\n      formEncType = customFields.encType;\n      formMethod = customFields.method;\n      formTarget = customFields.target;\n      formData = customFields.data;\n    } else {\n      // Set a javascript URL that doesn't do anything. We don't expect this to be invoked\n      // because we'll preventDefault in the Fizz runtime, but it can happen if a form is\n      // manually submitted or if someone calls stopPropagation before React gets the event.\n      // If CSP is used to block javascript: URLs that's fine too. It just won't show this\n      // error message but the URL will be logged.\n      target.push(attributeSeparator, stringToChunk('formAction'), attributeAssign, actionJavaScriptURL, attributeEnd);\n      name = null;\n      formAction = null;\n      formEncType = null;\n      formMethod = null;\n      formTarget = null;\n      injectFormReplayingRuntime(resumableState, renderState);\n    }\n  }\n\n  if (name != null) {\n    pushAttribute(target, 'name', name);\n  }\n\n  if (formAction != null) {\n    pushAttribute(target, 'formAction', formAction);\n  }\n\n  if (formEncType != null) {\n    pushAttribute(target, 'formEncType', formEncType);\n  }\n\n  if (formMethod != null) {\n    pushAttribute(target, 'formMethod', formMethod);\n  }\n\n  if (formTarget != null) {\n    pushAttribute(target, 'formTarget', formTarget);\n  }\n\n  return formData;\n}\n\nfunction pushAttribute(target, name, value) // not null or undefined\n{\n  switch (name) {\n    // These are very common props and therefore are in the beginning of the switch.\n    // TODO: aria-label is a very common prop but allows booleans so is not like the others\n    // but should ideally go in this list too.\n    case 'className':\n      {\n        pushStringAttribute(target, 'class', value);\n        break;\n      }\n\n    case 'tabIndex':\n      {\n        pushStringAttribute(target, 'tabindex', value);\n        break;\n      }\n\n    case 'dir':\n    case 'role':\n    case 'viewBox':\n    case 'width':\n    case 'height':\n      {\n        pushStringAttribute(target, name, value);\n        break;\n      }\n\n    case 'style':\n      {\n        pushStyleAttribute(target, value);\n        return;\n      }\n\n    case 'src':\n    case 'href':\n    // Fall through to the last case which shouldn't remove empty strings.\n\n    case 'action':\n    case 'formAction':\n      {\n        // TODO: Consider only special casing these for each tag.\n        if (value == null || typeof value === 'function' || typeof value === 'symbol' || typeof value === 'boolean') {\n          return;\n        }\n\n        {\n          checkAttributeStringCoercion(value, name);\n        }\n\n        var sanitizedValue = sanitizeURL('' + value);\n        target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(sanitizedValue)), attributeEnd);\n        return;\n      }\n\n    case 'defaultValue':\n    case 'defaultChecked': // These shouldn't be set as attributes on generic HTML elements.\n\n    case 'innerHTML': // Must use dangerouslySetInnerHTML instead.\n\n    case 'suppressContentEditableWarning':\n    case 'suppressHydrationWarning':\n    case 'ref':\n      // Ignored. These are built-in to React on the client.\n      return;\n\n    case 'autoFocus':\n    case 'multiple':\n    case 'muted':\n      {\n        pushBooleanAttribute(target, name.toLowerCase(), value);\n        return;\n      }\n\n    case 'xlinkHref':\n      {\n        if (typeof value === 'function' || typeof value === 'symbol' || typeof value === 'boolean') {\n          return;\n        }\n\n        {\n          checkAttributeStringCoercion(value, name);\n        }\n\n        var _sanitizedValue = sanitizeURL('' + value);\n\n        target.push(attributeSeparator, stringToChunk('xlink:href'), attributeAssign, stringToChunk(escapeTextForBrowser(_sanitizedValue)), attributeEnd);\n        return;\n      }\n\n    case 'contentEditable':\n    case 'spellCheck':\n    case 'draggable':\n    case 'value':\n    case 'autoReverse':\n    case 'externalResourcesRequired':\n    case 'focusable':\n    case 'preserveAlpha':\n      {\n        // Booleanish String\n        // These are \"enumerated\" attributes that accept \"true\" and \"false\".\n        // In React, we let users pass `true` and `false` even though technically\n        // these aren't boolean attributes (they are coerced to strings).\n        if (typeof value !== 'function' && typeof value !== 'symbol') {\n          target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n        }\n\n        return;\n      }\n\n    case 'allowFullScreen':\n    case 'async':\n    case 'autoPlay':\n    case 'controls':\n    case 'default':\n    case 'defer':\n    case 'disabled':\n    case 'disablePictureInPicture':\n    case 'disableRemotePlayback':\n    case 'formNoValidate':\n    case 'hidden':\n    case 'loop':\n    case 'noModule':\n    case 'noValidate':\n    case 'open':\n    case 'playsInline':\n    case 'readOnly':\n    case 'required':\n    case 'reversed':\n    case 'scoped':\n    case 'seamless':\n    case 'itemScope':\n      {\n        // Boolean\n        if (value && typeof value !== 'function' && typeof value !== 'symbol') {\n          target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n        }\n\n        return;\n      }\n\n    case 'capture':\n    case 'download':\n      {\n        // Overloaded Boolean\n        if (value === true) {\n          target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n        } else if (value === false) ; else if (typeof value !== 'function' && typeof value !== 'symbol') {\n          target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n        }\n\n        return;\n      }\n\n    case 'cols':\n    case 'rows':\n    case 'size':\n    case 'span':\n      {\n        // These are HTML attributes that must be positive numbers.\n        if (typeof value !== 'function' && typeof value !== 'symbol' && !isNaN(value) && value >= 1) {\n          target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n        }\n\n        return;\n      }\n\n    case 'rowSpan':\n    case 'start':\n      {\n        // These are HTML attributes that must be numbers.\n        if (typeof value !== 'function' && typeof value !== 'symbol' && !isNaN(value)) {\n          target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n        }\n\n        return;\n      }\n\n    case 'xlinkActuate':\n      pushStringAttribute(target, 'xlink:actuate', value);\n      return;\n\n    case 'xlinkArcrole':\n      pushStringAttribute(target, 'xlink:arcrole', value);\n      return;\n\n    case 'xlinkRole':\n      pushStringAttribute(target, 'xlink:role', value);\n      return;\n\n    case 'xlinkShow':\n      pushStringAttribute(target, 'xlink:show', value);\n      return;\n\n    case 'xlinkTitle':\n      pushStringAttribute(target, 'xlink:title', value);\n      return;\n\n    case 'xlinkType':\n      pushStringAttribute(target, 'xlink:type', value);\n      return;\n\n    case 'xmlBase':\n      pushStringAttribute(target, 'xml:base', value);\n      return;\n\n    case 'xmlLang':\n      pushStringAttribute(target, 'xml:lang', value);\n      return;\n\n    case 'xmlSpace':\n      pushStringAttribute(target, 'xml:space', value);\n      return;\n\n    default:\n      if ( // shouldIgnoreAttribute\n      // We have already filtered out null/undefined and reserved words.\n      name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {\n        return;\n      }\n\n      var attributeName = getAttributeAlias(name);\n\n      if (isAttributeNameSafe(attributeName)) {\n        // shouldRemoveAttribute\n        switch (typeof value) {\n          case 'function':\n          case 'symbol':\n            // eslint-disable-line\n            return;\n\n          case 'boolean':\n            {\n              var prefix = attributeName.toLowerCase().slice(0, 5);\n\n              if (prefix !== 'data-' && prefix !== 'aria-') {\n                return;\n              }\n            }\n        }\n\n        target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n      }\n\n  }\n}\n\nvar endOfStartTag = stringToPrecomputedChunk('>');\nvar endOfStartTagSelfClosing = stringToPrecomputedChunk('/>');\n\nfunction pushInnerHTML(target, innerHTML, children) {\n  if (innerHTML != null) {\n    if (children != null) {\n      throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');\n    }\n\n    if (typeof innerHTML !== 'object' || !('__html' in innerHTML)) {\n      throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');\n    }\n\n    var html = innerHTML.__html;\n\n    if (html !== null && html !== undefined) {\n      {\n        checkHtmlStringCoercion(html);\n      }\n\n      target.push(stringToChunk('' + html));\n    }\n  }\n} // TODO: Move these to RenderState so that we warn for every request.\n// It would help debugging in stateful servers (e.g. service worker).\n\n\nvar didWarnDefaultInputValue = false;\nvar didWarnDefaultChecked = false;\nvar didWarnDefaultSelectValue = false;\nvar didWarnDefaultTextareaValue = false;\nvar didWarnInvalidOptionChildren = false;\nvar didWarnInvalidOptionInnerHTML = false;\nvar didWarnSelectedSetOnOption = false;\nvar didWarnFormActionType = false;\nvar didWarnFormActionName = false;\nvar didWarnFormActionTarget = false;\nvar didWarnFormActionMethod = false;\n\nfunction checkSelectProp(props, propName) {\n  {\n    var value = props[propName];\n\n    if (value != null) {\n      var array = isArray(value);\n\n      if (props.multiple && !array) {\n        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.', propName);\n      } else if (!props.multiple && array) {\n        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.', propName);\n      }\n    }\n  }\n}\n\nfunction pushStartSelect(target, props) {\n  {\n    checkControlledValueProps('select', props);\n    checkSelectProp(props, 'value');\n    checkSelectProp(props, 'defaultValue');\n\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultSelectValue) {\n      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');\n\n      didWarnDefaultSelectValue = true;\n    }\n  }\n\n  target.push(startChunkForTag('select'));\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          // TODO: This doesn't really make sense for select since it can't use the controlled\n          // value in the innerHTML.\n          innerHTML = propValue;\n          break;\n\n        case 'defaultValue':\n        case 'value':\n          // These are set on the Context instead and applied to the nested options.\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag);\n  pushInnerHTML(target, innerHTML, children);\n  return children;\n}\n\nfunction flattenOptionChildren(children) {\n  var content = ''; // Flatten children and warn if they aren't strings or numbers;\n  // invalid types are ignored.\n\n  React.Children.forEach(children, function (child) {\n    if (child == null) {\n      return;\n    }\n\n    content += child;\n\n    {\n      if (!didWarnInvalidOptionChildren && typeof child !== 'string' && typeof child !== 'number') {\n        didWarnInvalidOptionChildren = true;\n\n        error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');\n      }\n    }\n  });\n  return content;\n}\n\nvar selectedMarkerAttribute = stringToPrecomputedChunk(' selected=\"\"');\n\nfunction pushStartOption(target, props, formatContext) {\n  var selectedValue = formatContext.selectedValue;\n  target.push(startChunkForTag('option'));\n  var children = null;\n  var value = null;\n  var selected = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'selected':\n          // ignore\n          selected = propValue;\n\n          {\n            // TODO: Remove support for `selected` in <option>.\n            if (!didWarnSelectedSetOnOption) {\n              error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');\n\n              didWarnSelectedSetOnOption = true;\n            }\n          }\n\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        case 'value':\n          value = propValue;\n        // We intentionally fallthrough to also set the attribute on the node.\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  if (selectedValue != null) {\n    var stringValue;\n\n    if (value !== null) {\n      {\n        checkAttributeStringCoercion(value, 'value');\n      }\n\n      stringValue = '' + value;\n    } else {\n      {\n        if (innerHTML !== null) {\n          if (!didWarnInvalidOptionInnerHTML) {\n            didWarnInvalidOptionInnerHTML = true;\n\n            error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');\n          }\n        }\n      }\n\n      stringValue = flattenOptionChildren(children);\n    }\n\n    if (isArray(selectedValue)) {\n      // multiple\n      for (var i = 0; i < selectedValue.length; i++) {\n        {\n          checkAttributeStringCoercion(selectedValue[i], 'value');\n        }\n\n        var v = '' + selectedValue[i];\n\n        if (v === stringValue) {\n          target.push(selectedMarkerAttribute);\n          break;\n        }\n      }\n    } else {\n      {\n        checkAttributeStringCoercion(selectedValue, 'select.value');\n      }\n\n      if ('' + selectedValue === stringValue) {\n        target.push(selectedMarkerAttribute);\n      }\n    }\n  } else if (selected) {\n    target.push(selectedMarkerAttribute);\n  }\n\n  target.push(endOfStartTag);\n  pushInnerHTML(target, innerHTML, children);\n  return children;\n}\n\nvar formReplayingRuntimeScript = stringToPrecomputedChunk(formReplaying);\n\nfunction injectFormReplayingRuntime(resumableState, renderState) {\n  // If we haven't sent it yet, inject the runtime that tracks submitted JS actions\n  // for later replaying by Fiber. If we use an external runtime, we don't need\n  // to emit anything. It's always used.\n  if ((resumableState.instructions & SentFormReplayingRuntime) === NothingSent && (!renderState.externalRuntimeScript)) {\n    resumableState.instructions |= SentFormReplayingRuntime;\n    renderState.bootstrapChunks.unshift(renderState.startInlineScript, formReplayingRuntimeScript, endInlineScript);\n  }\n}\n\nvar formStateMarkerIsMatching = stringToPrecomputedChunk('<!--F!-->');\nvar formStateMarkerIsNotMatching = stringToPrecomputedChunk('<!--F-->');\nfunction pushFormStateMarkerIsMatching(target) {\n  target.push(formStateMarkerIsMatching);\n}\nfunction pushFormStateMarkerIsNotMatching(target) {\n  target.push(formStateMarkerIsNotMatching);\n}\n\nfunction pushStartForm(target, props, resumableState, renderState) {\n  target.push(startChunkForTag('form'));\n  var children = null;\n  var innerHTML = null;\n  var formAction = null;\n  var formEncType = null;\n  var formMethod = null;\n  var formTarget = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        case 'action':\n          formAction = propValue;\n          break;\n\n        case 'encType':\n          formEncType = propValue;\n          break;\n\n        case 'method':\n          formMethod = propValue;\n          break;\n\n        case 'target':\n          formTarget = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  var formData = null;\n  var formActionName = null;\n\n  if (typeof formAction === 'function') {\n    // Function form actions cannot control the form properties\n    {\n      if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {\n        didWarnFormActionMethod = true;\n\n        error('Cannot specify a encType or method for a form that specifies a ' + 'function as the action. React provides those automatically. ' + 'They will get overridden.');\n      }\n\n      if (formTarget !== null && !didWarnFormActionTarget) {\n        didWarnFormActionTarget = true;\n\n        error('Cannot specify a target for a form that specifies a function as the action. ' + 'The function will always be executed in the same window.');\n      }\n    }\n\n    var customAction = formAction.$$FORM_ACTION;\n\n    if (typeof customAction === 'function') {\n      // This action has a custom progressive enhancement form that can submit the form\n      // back to the server if it's invoked before hydration. Such as a Server Action.\n      var prefix = makeFormFieldPrefix(resumableState);\n      var customFields = formAction.$$FORM_ACTION(prefix);\n      formAction = customFields.action || '';\n      formEncType = customFields.encType;\n      formMethod = customFields.method;\n      formTarget = customFields.target;\n      formData = customFields.data;\n      formActionName = customFields.name;\n    } else {\n      // Set a javascript URL that doesn't do anything. We don't expect this to be invoked\n      // because we'll preventDefault in the Fizz runtime, but it can happen if a form is\n      // manually submitted or if someone calls stopPropagation before React gets the event.\n      // If CSP is used to block javascript: URLs that's fine too. It just won't show this\n      // error message but the URL will be logged.\n      target.push(attributeSeparator, stringToChunk('action'), attributeAssign, actionJavaScriptURL, attributeEnd);\n      formAction = null;\n      formEncType = null;\n      formMethod = null;\n      formTarget = null;\n      injectFormReplayingRuntime(resumableState, renderState);\n    }\n  }\n\n  if (formAction != null) {\n    pushAttribute(target, 'action', formAction);\n  }\n\n  if (formEncType != null) {\n    pushAttribute(target, 'encType', formEncType);\n  }\n\n  if (formMethod != null) {\n    pushAttribute(target, 'method', formMethod);\n  }\n\n  if (formTarget != null) {\n    pushAttribute(target, 'target', formTarget);\n  }\n\n  target.push(endOfStartTag);\n\n  if (formActionName !== null) {\n    target.push(startHiddenInputChunk);\n    pushStringAttribute(target, 'name', formActionName);\n    target.push(endOfStartTagSelfClosing);\n    pushAdditionalFormFields(target, formData);\n  }\n\n  pushInnerHTML(target, innerHTML, children);\n\n  if (typeof children === 'string') {\n    // Special case children as a string to avoid the unnecessary comment.\n    // TODO: Remove this special case after the general optimization is in place.\n    target.push(stringToChunk(encodeHTMLTextNode(children)));\n    return null;\n  }\n\n  return children;\n}\n\nfunction pushInput(target, props, resumableState, renderState) {\n  {\n    checkControlledValueProps('input', props);\n  }\n\n  target.push(startChunkForTag('input'));\n  var name = null;\n  var formAction = null;\n  var formEncType = null;\n  var formMethod = null;\n  var formTarget = null;\n  var value = null;\n  var defaultValue = null;\n  var checked = null;\n  var defaultChecked = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n        case 'dangerouslySetInnerHTML':\n          throw new Error('input' + \" is a self-closing tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n\n        case 'name':\n          name = propValue;\n          break;\n\n        case 'formAction':\n          formAction = propValue;\n          break;\n\n        case 'formEncType':\n          formEncType = propValue;\n          break;\n\n        case 'formMethod':\n          formMethod = propValue;\n          break;\n\n        case 'formTarget':\n          formTarget = propValue;\n          break;\n\n        case 'defaultChecked':\n          defaultChecked = propValue;\n          break;\n\n        case 'defaultValue':\n          defaultValue = propValue;\n          break;\n\n        case 'checked':\n          checked = propValue;\n          break;\n\n        case 'value':\n          value = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  {\n    if (formAction !== null && props.type !== 'image' && props.type !== 'submit' && !didWarnFormActionType) {\n      didWarnFormActionType = true;\n\n      error('An input can only specify a formAction along with type=\"submit\" or type=\"image\".');\n    }\n  }\n\n  var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);\n\n  {\n    if (checked !== null && defaultChecked !== null && !didWarnDefaultChecked) {\n      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', 'A component', props.type);\n\n      didWarnDefaultChecked = true;\n    }\n\n    if (value !== null && defaultValue !== null && !didWarnDefaultInputValue) {\n      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', 'A component', props.type);\n\n      didWarnDefaultInputValue = true;\n    }\n  }\n\n  if (checked !== null) {\n    pushBooleanAttribute(target, 'checked', checked);\n  } else if (defaultChecked !== null) {\n    pushBooleanAttribute(target, 'checked', defaultChecked);\n  }\n\n  if (value !== null) {\n    pushAttribute(target, 'value', value);\n  } else if (defaultValue !== null) {\n    pushAttribute(target, 'value', defaultValue);\n  }\n\n  target.push(endOfStartTagSelfClosing); // We place any additional hidden form fields after the input.\n\n  pushAdditionalFormFields(target, formData);\n  return null;\n}\n\nfunction pushStartButton(target, props, resumableState, renderState) {\n  target.push(startChunkForTag('button'));\n  var children = null;\n  var innerHTML = null;\n  var name = null;\n  var formAction = null;\n  var formEncType = null;\n  var formMethod = null;\n  var formTarget = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        case 'name':\n          name = propValue;\n          break;\n\n        case 'formAction':\n          formAction = propValue;\n          break;\n\n        case 'formEncType':\n          formEncType = propValue;\n          break;\n\n        case 'formMethod':\n          formMethod = propValue;\n          break;\n\n        case 'formTarget':\n          formTarget = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  {\n    if (formAction !== null && props.type != null && props.type !== 'submit' && !didWarnFormActionType) {\n      didWarnFormActionType = true;\n\n      error('A button can only specify a formAction along with type=\"submit\" or no type.');\n    }\n  }\n\n  var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);\n  target.push(endOfStartTag); // We place any additional hidden form fields we need to include inside the button itself.\n\n  pushAdditionalFormFields(target, formData);\n  pushInnerHTML(target, innerHTML, children);\n\n  if (typeof children === 'string') {\n    // Special case children as a string to avoid the unnecessary comment.\n    // TODO: Remove this special case after the general optimization is in place.\n    target.push(stringToChunk(encodeHTMLTextNode(children)));\n    return null;\n  }\n\n  return children;\n}\n\nfunction pushStartTextArea(target, props) {\n  {\n    checkControlledValueProps('textarea', props);\n\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultTextareaValue) {\n      error('Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');\n\n      didWarnDefaultTextareaValue = true;\n    }\n  }\n\n  target.push(startChunkForTag('textarea'));\n  var value = null;\n  var defaultValue = null;\n  var children = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'value':\n          value = propValue;\n          break;\n\n        case 'defaultValue':\n          defaultValue = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  if (value === null && defaultValue !== null) {\n    value = defaultValue;\n  }\n\n  target.push(endOfStartTag); // TODO (yungsters): Remove support for children content in <textarea>.\n\n  if (children != null) {\n    {\n      error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');\n    }\n\n    if (value != null) {\n      throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');\n    }\n\n    if (isArray(children)) {\n      if (children.length > 1) {\n        throw new Error('<textarea> can only have at most one child.');\n      } // TODO: remove the coercion and the DEV check below because it will\n      // always be overwritten by the coercion several lines below it. #22309\n\n\n      {\n        checkHtmlStringCoercion(children[0]);\n      }\n\n      value = '' + children[0];\n    }\n\n    {\n      checkHtmlStringCoercion(children);\n    }\n\n    value = '' + children;\n  }\n\n  if (typeof value === 'string' && value[0] === '\\n') {\n    // text/html ignores the first character in these tags if it's a newline\n    // Prefer to break application/xml over text/html (for now) by adding\n    // a newline specifically to get eaten by the parser. (Alternately for\n    // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n    // \\r is normalized out by HTMLTextAreaElement#value.)\n    // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n    // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n    // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n    // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n    //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n    target.push(leadingNewline);\n  } // ToString and push directly instead of recurse over children.\n  // We don't really support complex children in the value anyway.\n  // This also currently avoids a trailing comment node which breaks textarea.\n\n\n  if (value !== null) {\n    {\n      checkAttributeStringCoercion(value, 'value');\n    }\n\n    target.push(stringToChunk(encodeHTMLTextNode('' + value)));\n  }\n\n  return null;\n}\n\nfunction pushMeta(target, props, renderState, textEmbedded, insertionMode, noscriptTagInScope, isFallback) {\n  {\n    if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {\n      return pushSelfClosing(target, props, 'meta');\n    } else {\n      if (textEmbedded) {\n        // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n        // to be safe and assume text will follow by inserting a textSeparator\n        target.push(textSeparator);\n      }\n\n      if (isFallback) {\n        // Hoistable Elements for fallbacks are simply omitted. we don't want to emit them early\n        // because they are likely superceded by primary content and we want to avoid needing to clean\n        // them up when the primary content is ready. They are never hydrated on the client anyway because\n        // boundaries in fallback are awaited or client render, in either case there is never hydration\n        return null;\n      } else if (typeof props.charSet === 'string') {\n        // \"charset\" Should really be config and not picked up from tags however since this is\n        // the only way to embed the tag today we flush it on a special queue on the Request so it\n        // can go before everything else. Like viewport this means that the tag will escape it's\n        // parent container.\n        return pushSelfClosing(renderState.charsetChunks, props, 'meta');\n      } else if (props.name === 'viewport') {\n        // \"viewport\" is flushed on the Request so it can go earlier that Float resources that\n        // might be affected by it. This means it can escape the boundary it is rendered within.\n        // This is a pragmatic solution to viewport being incredibly sensitive to document order\n        // without requiring all hoistables to be flushed too early.\n        return pushSelfClosing(renderState.viewportChunks, props, 'meta');\n      } else {\n        return pushSelfClosing(renderState.hoistableChunks, props, 'meta');\n      }\n    }\n  }\n}\n\nfunction pushLink(target, props, resumableState, renderState, hoistableState, textEmbedded, insertionMode, noscriptTagInScope, isFallback) {\n  {\n    var rel = props.rel;\n    var href = props.href;\n    var precedence = props.precedence;\n\n    if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof rel !== 'string' || typeof href !== 'string' || href === '') {\n      {\n        if (rel === 'stylesheet' && typeof props.precedence === 'string') {\n          if (typeof href !== 'string' || !href) {\n            error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and expected the `href` prop to be a non-empty string but ecountered %s instead. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop ensure there is a non-empty string `href` prop as well, otherwise remove the `precedence` prop.', getValueDescriptorExpectingObjectForWarning(href));\n          }\n        }\n      }\n\n      pushLinkImpl(target, props);\n      return null;\n    }\n\n    if (props.rel === 'stylesheet') {\n      // This <link> may hoistable as a Stylesheet Resource, otherwise it will emit in place\n      var key = getResourceKey(href);\n\n      if (typeof precedence !== 'string' || props.disabled != null || props.onLoad || props.onError) {\n        // This stylesheet is either not opted into Resource semantics or has conflicting properties which\n        // disqualify it for such. We can still create a preload resource to help it load faster on the\n        // client\n        {\n          if (typeof precedence === 'string') {\n            if (props.disabled != null) {\n              error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and a `disabled` prop. The presence of the `disabled` prop indicates an intent to manage the stylesheet active state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the `disabled` prop, otherwise remove the `precedence` prop.');\n            } else if (props.onLoad || props.onError) {\n              var propDescription = props.onLoad && props.onError ? '`onLoad` and `onError` props' : props.onLoad ? '`onLoad` prop' : '`onError` prop';\n\n              error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', propDescription, propDescription);\n            }\n          }\n        }\n\n        return pushLinkImpl(target, props);\n      } else {\n        // This stylesheet refers to a Resource and we create a new one if necessary\n        var styleQueue = renderState.styles.get(precedence);\n        var hasKey = resumableState.styleResources.hasOwnProperty(key);\n        var resourceState = hasKey ? resumableState.styleResources[key] : undefined;\n\n        if (resourceState !== EXISTS) {\n          // We are going to create this resource now so it is marked as Exists\n          resumableState.styleResources[key] = EXISTS; // If this is the first time we've encountered this precedence we need\n          // to create a StyleQueue\n\n          if (!styleQueue) {\n            styleQueue = {\n              precedence: stringToChunk(escapeTextForBrowser(precedence)),\n              rules: [],\n              hrefs: [],\n              sheets: new Map()\n            };\n            renderState.styles.set(precedence, styleQueue);\n          }\n\n          var resource = {\n            state: PENDING$1,\n            props: stylesheetPropsFromRawProps(props)\n          };\n\n          if (resourceState) {\n            // When resourceState is truty it is a Preload state. We cast it for clarity\n            var preloadState = resourceState;\n\n            if (preloadState.length === 2) {\n              adoptPreloadCredentials(resource.props, preloadState);\n            }\n\n            var preloadResource = renderState.preloads.stylesheets.get(key);\n\n            if (preloadResource && preloadResource.length > 0) {\n              // The Preload for this resource was created in this render pass and has not flushed yet so\n              // we need to clear it to avoid it flushing.\n              preloadResource.length = 0;\n            } else {\n              // Either the preload resource from this render already flushed in this render pass\n              // or the preload flushed in a prior pass (prerender). In either case we need to mark\n              // this resource as already having been preloaded.\n              resource.state = PRELOADED;\n            }\n          } // We add the newly created resource to our StyleQueue and if necessary\n          // track the resource with the currently rendering boundary\n\n\n          styleQueue.sheets.set(key, resource);\n\n          if (hoistableState) {\n            hoistableState.stylesheets.add(resource);\n          }\n        } else {\n          // We need to track whether this boundary should wait on this resource or not.\n          // Typically this resource should always exist since we either had it or just created\n          // it. However, it's possible when you resume that the style has already been emitted\n          // and then it wouldn't be recreated in the RenderState and there's no need to track\n          // it again since we should've hoisted it to the shell already.\n          if (styleQueue) {\n            var _resource = styleQueue.sheets.get(key);\n\n            if (_resource) {\n              if (hoistableState) {\n                hoistableState.stylesheets.add(_resource);\n              }\n            }\n          }\n        }\n\n        if (textEmbedded) {\n          // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n          // to be safe and assume text will follow by inserting a textSeparator\n          target.push(textSeparator);\n        }\n\n        return null;\n      }\n    } else if (props.onLoad || props.onError) {\n      // When using load handlers we cannot hoist and need to emit links in place\n      return pushLinkImpl(target, props);\n    } else {\n      // We can hoist this link so we may need to emit a text separator.\n      // @TODO refactor text separators so we don't have to defensively add\n      // them when we don't end up emitting a tag as a result of pushStartInstance\n      if (textEmbedded) {\n        // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n        // to be safe and assume text will follow by inserting a textSeparator\n        target.push(textSeparator);\n      }\n\n      if (isFallback) {\n        // Hoistable Elements for fallbacks are simply omitted. we don't want to emit them early\n        // because they are likely superceded by primary content and we want to avoid needing to clean\n        // them up when the primary content is ready. They are never hydrated on the client anyway because\n        // boundaries in fallback are awaited or client render, in either case there is never hydration\n        return null;\n      } else {\n        return pushLinkImpl(renderState.hoistableChunks, props);\n      }\n    }\n  }\n}\n\nfunction pushLinkImpl(target, props) {\n  target.push(startChunkForTag('link'));\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n        case 'dangerouslySetInnerHTML':\n          throw new Error('link' + \" is a self-closing tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTagSelfClosing);\n  return null;\n}\n\nfunction pushStyle(target, props, resumableState, renderState, hoistableState, textEmbedded, insertionMode, noscriptTagInScope) {\n  {\n    if (hasOwnProperty.call(props, 'children')) {\n      var children = props.children;\n      var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n\n      if (typeof child === 'function' || typeof child === 'symbol' || Array.isArray(child)) {\n        var childType = typeof child === 'function' ? 'a Function' : typeof child === 'symbol' ? 'a Sybmol' : 'an Array';\n\n        error('React expect children of <style> tags to be a string, number, or object with a `toString` method but found %s instead. ' + 'In browsers style Elements can only have `Text` Nodes as children.', childType);\n      }\n    }\n  }\n\n  {\n    var precedence = props.precedence;\n    var href = props.href;\n\n    if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof precedence !== 'string' || typeof href !== 'string' || href === '') {\n      // This style tag is not able to be turned into a Style Resource\n      return pushStyleImpl(target, props);\n    }\n\n    {\n      if (href.includes(' ')) {\n        error('React expected the `href` prop for a <style> tag opting into hoisting semantics using the `precedence` prop to not have any spaces but ecountered spaces instead. using spaces in this prop will cause hydration of this style to fail on the client. The href for the <style> where this ocurred is \"%s\".', href);\n      }\n    }\n\n    var key = getResourceKey(href);\n    var styleQueue = renderState.styles.get(precedence);\n    var hasKey = resumableState.styleResources.hasOwnProperty(key);\n    var resourceState = hasKey ? resumableState.styleResources[key] : undefined;\n\n    if (resourceState !== EXISTS) {\n      // We are going to create this resource now so it is marked as Exists\n      resumableState.styleResources[key] = EXISTS;\n\n      {\n        if (resourceState) {\n          error('React encountered a hoistable style tag for the same href as a preload: \"%s\". When using a style tag to inline styles you should not also preload it as a stylsheet.', href);\n        }\n      }\n\n      if (!styleQueue) {\n        // This is the first time we've encountered this precedence we need\n        // to create a StyleQueue.\n        styleQueue = {\n          precedence: stringToChunk(escapeTextForBrowser(precedence)),\n          rules: [],\n          hrefs: [stringToChunk(escapeTextForBrowser(href))],\n          sheets: new Map()\n        };\n        renderState.styles.set(precedence, styleQueue);\n      } else {\n        // We have seen this precedence before and need to track this href\n        styleQueue.hrefs.push(stringToChunk(escapeTextForBrowser(href)));\n      }\n\n      pushStyleContents(styleQueue.rules, props);\n    }\n\n    if (styleQueue) {\n      // We need to track whether this boundary should wait on this resource or not.\n      // Typically this resource should always exist since we either had it or just created\n      // it. However, it's possible when you resume that the style has already been emitted\n      // and then it wouldn't be recreated in the RenderState and there's no need to track\n      // it again since we should've hoisted it to the shell already.\n      if (hoistableState) {\n        hoistableState.styles.add(styleQueue);\n      }\n    }\n\n    if (textEmbedded) {\n      // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n      // to be safe and assume text will follow by inserting a textSeparator\n      target.push(textSeparator);\n    }\n  }\n}\n\nfunction pushStyleImpl(target, props) {\n  target.push(startChunkForTag('style'));\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag);\n  var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n\n  if (typeof child !== 'function' && typeof child !== 'symbol' && child !== null && child !== undefined) {\n    // eslint-disable-next-line react-internal/safe-string-coercion\n    target.push(stringToChunk(escapeTextForBrowser('' + child)));\n  }\n\n  pushInnerHTML(target, innerHTML, children);\n  target.push(endChunkForTag('style'));\n  return null;\n}\n\nfunction pushStyleContents(target, props) {\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n      }\n    }\n  }\n\n  var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n\n  if (typeof child !== 'function' && typeof child !== 'symbol' && child !== null && child !== undefined) {\n    // eslint-disable-next-line react-internal/safe-string-coercion\n    target.push(stringToChunk(escapeTextForBrowser('' + child)));\n  }\n\n  pushInnerHTML(target, innerHTML, children);\n  return;\n}\n\nfunction pushImg(target, props, resumableState, renderState, pictureTagInScope) {\n  var src = props.src,\n      srcSet = props.srcSet;\n\n  if (props.loading !== 'lazy' && (src || srcSet) && (typeof src === 'string' || src == null) && (typeof srcSet === 'string' || srcSet == null) && props.fetchPriority !== 'low' && pictureTagInScope === false && // We exclude data URIs in src and srcSet since these should not be preloaded\n  !(typeof src === 'string' && src[4] === ':' && (src[0] === 'd' || src[0] === 'D') && (src[1] === 'a' || src[1] === 'A') && (src[2] === 't' || src[2] === 'T') && (src[3] === 'a' || src[3] === 'A')) && !(typeof srcSet === 'string' && srcSet[4] === ':' && (srcSet[0] === 'd' || srcSet[0] === 'D') && (srcSet[1] === 'a' || srcSet[1] === 'A') && (srcSet[2] === 't' || srcSet[2] === 'T') && (srcSet[3] === 'a' || srcSet[3] === 'A'))) {\n    // We have a suspensey image and ought to preload it to optimize the loading of display blocking\n    // resumableState.\n    var sizes = typeof props.sizes === 'string' ? props.sizes : undefined;\n    var key = getImageResourceKey(src, srcSet, sizes);\n    var promotablePreloads = renderState.preloads.images;\n    var resource = promotablePreloads.get(key);\n\n    if (resource) {\n      // We consider whether this preload can be promoted to higher priority flushing queue.\n      // The only time a resource will exist here is if it was created during this render\n      // and was not already in the high priority queue.\n      if (props.fetchPriority === 'high' || renderState.highImagePreloads.size < 10) {\n        // Delete the resource from the map since we are promoting it and don't want to\n        // reenter this branch in a second pass for duplicate img hrefs.\n        promotablePreloads.delete(key); // $FlowFixMe - Flow should understand that this is a Resource if the condition was true\n\n        renderState.highImagePreloads.add(resource);\n      }\n    } else if (!resumableState.imageResources.hasOwnProperty(key)) {\n      // We must construct a new preload resource\n      resumableState.imageResources[key] = PRELOAD_NO_CREDS;\n      var crossOrigin = getCrossOriginString(props.crossOrigin);\n      var headers = renderState.headers;\n      var header;\n\n      if (headers && headers.remainingCapacity > 0 && ( // this is a hueristic similar to capping element preloads to 10 unless explicitly\n      // fetchPriority=\"high\". We use length here which means it will fit fewer images when\n      // the urls are long and more when short. arguably byte size is a better hueristic because\n      // it directly translates to how much we send down before content is actually seen.\n      // We could unify the counts and also make it so the total is tracked regardless of\n      // flushing output but since the headers are likely to be go earlier than content\n      // they don't really conflict so for now I've kept them separate\n      props.fetchPriority === 'high' || headers.highImagePreloads.length < 500) && ( // We manually construct the options for the preload only from strings. We don't want to pollute\n      // the params list with arbitrary props and if we copied everything over as it we might get\n      // coercion errors. We have checks for this in Dev but it seems safer to just only accept values\n      // that are strings\n      header = getPreloadAsHeader(src, 'image', {\n        imageSrcSet: props.srcSet,\n        imageSizes: props.sizes,\n        crossOrigin: crossOrigin,\n        integrity: props.integrity,\n        nonce: props.nonce,\n        type: props.type,\n        fetchPriority: props.fetchPriority,\n        referrerPolicy: props.refererPolicy\n      }), // We always consume the header length since once we find one header that doesn't fit\n      // we assume all the rest won't as well. This is to avoid getting into a situation\n      // where we have a very small remaining capacity but no headers will ever fit and we end\n      // up constantly trying to see if the next resource might make it. In the future we can\n      // make this behavior different between render and prerender since in the latter case\n      // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n      // headers.\n      (headers.remainingCapacity -= header.length) >= 2)) {\n        // If we postpone in the shell we will still emit this preload so we track\n        // it to make sure we don't reset it.\n        renderState.resets.image[key] = PRELOAD_NO_CREDS;\n\n        if (headers.highImagePreloads) {\n          headers.highImagePreloads += ', ';\n        } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n\n\n        headers.highImagePreloads += header;\n      } else {\n        resource = [];\n        pushLinkImpl(resource, {\n          rel: 'preload',\n          as: 'image',\n          // There is a bug in Safari where imageSrcSet is not respected on preload links\n          // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n          // This harms older browers that do not support imageSrcSet by making their preloads not work\n          // but this population is shrinking fast and is already small so we accept this tradeoff.\n          href: srcSet ? undefined : src,\n          imageSrcSet: srcSet,\n          imageSizes: sizes,\n          crossOrigin: crossOrigin,\n          integrity: props.integrity,\n          type: props.type,\n          fetchPriority: props.fetchPriority,\n          referrerPolicy: props.referrerPolicy\n        });\n\n        if (props.fetchPriority === 'high' || renderState.highImagePreloads.size < 10) {\n          renderState.highImagePreloads.add(resource);\n        } else {\n          renderState.bulkPreloads.add(resource); // We can bump the priority up if the same img is rendered later\n          // with fetchPriority=\"high\"\n\n          promotablePreloads.set(key, resource);\n        }\n      }\n    }\n  }\n\n  return pushSelfClosing(target, props, 'img');\n}\n\nfunction pushSelfClosing(target, props, tag) {\n  target.push(startChunkForTag(tag));\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n        case 'dangerouslySetInnerHTML':\n          throw new Error(tag + \" is a self-closing tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTagSelfClosing);\n  return null;\n}\n\nfunction pushStartMenuItem(target, props) {\n  target.push(startChunkForTag('menuitem'));\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n        case 'dangerouslySetInnerHTML':\n          throw new Error('menuitems cannot have `children` nor `dangerouslySetInnerHTML`.');\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag);\n  return null;\n}\n\nfunction pushTitle(target, props, renderState, insertionMode, noscriptTagInScope, isFallback) {\n  {\n    if (hasOwnProperty.call(props, 'children')) {\n      var children = props.children;\n      var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n\n      if (Array.isArray(children) && children.length > 1) {\n        error('React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an Array with length %s instead.' + ' Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert `children` of <title> tags to a single string value' + ' which is why Arrays of length greater than 1 are not supported. When using JSX it can be commong to combine text nodes and value nodes.' + ' For example: <title>hello {nameOfUser}</title>. While not immediately apparent, `children` in this case is an Array with length 2. If your `children` prop' + ' is using this form try rewriting it using a template string: <title>{`hello ${nameOfUser}`}</title>.', children.length);\n      } else if (typeof child === 'function' || typeof child === 'symbol') {\n        var childType = typeof child === 'function' ? 'a Function' : 'a Sybmol';\n\n        error('React expect children of <title> tags to be a string, number, or object with a novel `toString` method but found %s instead.' + ' Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title>' + ' tags to a single string value.', childType);\n      } else if (child && child.toString === {}.toString) {\n        if (child.$$typeof != null) {\n          error('React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that appears to be' + ' a React element which never implements a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to' + ' be able to convert children of <title> tags to a single string value which is why rendering React elements is not supported. If the `children` of <title> is' + ' a React Component try moving the <title> tag into that component. If the `children` of <title> is some HTML markup change it to be Text only to be valid HTML.');\n        } else {\n          error('React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that does not implement' + ' a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags' + ' to a single string value. Using the default `toString` method available on every object is almost certainly an error. Consider whether the `children` of this <title>' + ' is an object in error and change it to a string or number value if so. Otherwise implement a `toString` method that React can use to produce a valid <title>.');\n        }\n      }\n    }\n  }\n\n  {\n    if (insertionMode !== SVG_MODE && !noscriptTagInScope && props.itemProp == null) {\n      if (isFallback) {\n        // Hoistable Elements for fallbacks are simply omitted. we don't want to emit them early\n        // because they are likely superceded by primary content and we want to avoid needing to clean\n        // them up when the primary content is ready. They are never hydrated on the client anyway because\n        // boundaries in fallback are awaited or client render, in either case there is never hydration\n        return null;\n      } else {\n        pushTitleImpl(renderState.hoistableChunks, props);\n      }\n    } else {\n      return pushTitleImpl(target, props);\n    }\n  }\n}\n\nfunction pushTitleImpl(target, props) {\n  target.push(startChunkForTag('title'));\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag);\n  var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n\n  if (typeof child !== 'function' && typeof child !== 'symbol' && child !== null && child !== undefined) {\n    // eslint-disable-next-line react-internal/safe-string-coercion\n    target.push(stringToChunk(escapeTextForBrowser('' + child)));\n  }\n\n  pushInnerHTML(target, innerHTML, children);\n  target.push(endChunkForTag('title'));\n  return null;\n}\n\nfunction pushStartHead(target, props, renderState, insertionMode) {\n  {\n    if (insertionMode < HTML_MODE && renderState.headChunks === null) {\n      // This <head> is the Document.head and should be part of the preamble\n      renderState.headChunks = [];\n      return pushStartGenericElement(renderState.headChunks, props, 'head');\n    } else {\n      // This <head> is deep and is likely just an error. we emit it inline though.\n      // Validation should warn that this tag is the the wrong spot.\n      return pushStartGenericElement(target, props, 'head');\n    }\n  }\n}\n\nfunction pushStartHtml(target, props, renderState, insertionMode) {\n  {\n    if (insertionMode === ROOT_HTML_MODE && renderState.htmlChunks === null) {\n      // This <html> is the Document.documentElement and should be part of the preamble\n      renderState.htmlChunks = [doctypeChunk];\n      return pushStartGenericElement(renderState.htmlChunks, props, 'html');\n    } else {\n      // This <html> is deep and is likely just an error. we emit it inline though.\n      // Validation should warn that this tag is the the wrong spot.\n      return pushStartGenericElement(target, props, 'html');\n    }\n  }\n}\n\nfunction pushScript(target, props, resumableState, renderState, textEmbedded, insertionMode, noscriptTagInScope) {\n  {\n    var asyncProp = props.async;\n\n    if (typeof props.src !== 'string' || !props.src || !(asyncProp && typeof asyncProp !== 'function' && typeof asyncProp !== 'symbol') || props.onLoad || props.onError || insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {\n      // This script will not be a resource, we bailout early and emit it in place.\n      return pushScriptImpl(target, props);\n    }\n\n    var src = props.src;\n    var key = getResourceKey(src); // We can make this <script> into a ScriptResource\n\n    var resources, preloads;\n\n    if (props.type === 'module') {\n      resources = resumableState.moduleScriptResources;\n      preloads = renderState.preloads.moduleScripts;\n    } else {\n      resources = resumableState.scriptResources;\n      preloads = renderState.preloads.scripts;\n    }\n\n    var hasKey = resources.hasOwnProperty(key);\n    var resourceState = hasKey ? resources[key] : undefined;\n\n    if (resourceState !== EXISTS) {\n      // We are going to create this resource now so it is marked as Exists\n      resources[key] = EXISTS;\n      var scriptProps = props;\n\n      if (resourceState) {\n        // When resourceState is truty it is a Preload state. We cast it for clarity\n        var preloadState = resourceState;\n\n        if (preloadState.length === 2) {\n          scriptProps = assign({}, props);\n          adoptPreloadCredentials(scriptProps, preloadState);\n        }\n\n        var preloadResource = preloads.get(key);\n\n        if (preloadResource) {\n          // the preload resource exists was created in this render. Now that we have\n          // a script resource which will emit earlier than a preload would if it\n          // hasn't already flushed we prevent it from flushing by zeroing the length\n          preloadResource.length = 0;\n        }\n      }\n\n      var resource = []; // Add to the script flushing queue\n\n      renderState.scripts.add(resource); // encode the tag as Chunks\n\n      pushScriptImpl(resource, scriptProps);\n    }\n\n    if (textEmbedded) {\n      // This script follows text but we aren't writing a tag. while not as efficient as possible we need\n      // to be safe and assume text will follow by inserting a textSeparator\n      target.push(textSeparator);\n    }\n\n    return null;\n  }\n}\n\nfunction pushScriptImpl(target, props) {\n  target.push(startChunkForTag('script'));\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag);\n\n  {\n    if (children != null && typeof children !== 'string') {\n      var descriptiveStatement = typeof children === 'number' ? 'a number for children' : Array.isArray(children) ? 'an array for children' : 'something unexpected for children';\n\n      error('A script element was rendered with %s. If script element has children it must be a single string.' + ' Consider using dangerouslySetInnerHTML or passing a plain string as children.', descriptiveStatement);\n    }\n  }\n\n  pushInnerHTML(target, innerHTML, children);\n\n  if (typeof children === 'string') {\n    target.push(stringToChunk(encodeHTMLTextNode(children)));\n  }\n\n  target.push(endChunkForTag('script'));\n  return null;\n}\n\nfunction pushStartGenericElement(target, props, tag) {\n  target.push(startChunkForTag(tag));\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag);\n  pushInnerHTML(target, innerHTML, children);\n\n  if (typeof children === 'string') {\n    // Special case children as a string to avoid the unnecessary comment.\n    // TODO: Remove this special case after the general optimization is in place.\n    target.push(stringToChunk(encodeHTMLTextNode(children)));\n    return null;\n  }\n\n  return children;\n}\n\nfunction pushStartCustomElement(target, props, tag) {\n  target.push(startChunkForTag(tag));\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      var attributeName = propKey;\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        case 'style':\n          pushStyleAttribute(target, propValue);\n          break;\n\n        case 'suppressContentEditableWarning':\n        case 'suppressHydrationWarning':\n        case 'ref':\n          // Ignored. These are built-in to React on the client.\n          break;\n\n        case 'className':\n\n        // intentional fallthrough\n\n        default:\n          if (isAttributeNameSafe(propKey) && typeof propValue !== 'function' && typeof propValue !== 'symbol') {\n\n            target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);\n          }\n\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag);\n  pushInnerHTML(target, innerHTML, children);\n  return children;\n}\n\nvar leadingNewline = stringToPrecomputedChunk('\\n');\n\nfunction pushStartPreformattedElement(target, props, tag) {\n  target.push(startChunkForTag(tag));\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag); // text/html ignores the first character in these tags if it's a newline\n  // Prefer to break application/xml over text/html (for now) by adding\n  // a newline specifically to get eaten by the parser. (Alternately for\n  // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n  // \\r is normalized out by HTMLTextAreaElement#value.)\n  // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n  // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n  // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n  // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n  //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n  // TODO: This doesn't deal with the case where the child is an array\n  // or component that returns a string.\n\n  if (innerHTML != null) {\n    if (children != null) {\n      throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');\n    }\n\n    if (typeof innerHTML !== 'object' || !('__html' in innerHTML)) {\n      throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');\n    }\n\n    var html = innerHTML.__html;\n\n    if (html !== null && html !== undefined) {\n      if (typeof html === 'string' && html.length > 0 && html[0] === '\\n') {\n        target.push(leadingNewline, stringToChunk(html));\n      } else {\n        {\n          checkHtmlStringCoercion(html);\n        }\n\n        target.push(stringToChunk('' + html));\n      }\n    }\n  }\n\n  if (typeof children === 'string' && children[0] === '\\n') {\n    target.push(leadingNewline);\n  }\n\n  return children;\n} // We accept any tag to be rendered but since this gets injected into arbitrary\n// HTML, we want to make sure that it's a safe tag.\n// http://www.w3.org/TR/REC-xml/#NT-Name\n\n\nvar VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset\n\nvar validatedTagCache = new Map();\n\nfunction startChunkForTag(tag) {\n  var tagStartChunk = validatedTagCache.get(tag);\n\n  if (tagStartChunk === undefined) {\n    if (!VALID_TAG_REGEX.test(tag)) {\n      throw new Error(\"Invalid tag: \" + tag);\n    }\n\n    tagStartChunk = stringToPrecomputedChunk('<' + tag);\n    validatedTagCache.set(tag, tagStartChunk);\n  }\n\n  return tagStartChunk;\n}\nfunction pushStartInstance(target, type, props, resumableState, renderState, hoistableState, formatContext, textEmbedded, isFallback) {\n  {\n    validateProperties$2(type, props);\n    validateProperties$1(type, props);\n    validateProperties(type, props, null);\n\n    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {\n      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');\n    }\n\n    if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {\n      if (type.indexOf('-') === -1 && type.toLowerCase() !== type) {\n        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);\n      }\n    }\n  }\n\n  switch (type) {\n    case 'div':\n    case 'span':\n    case 'svg':\n    case 'path':\n      // Fast track very common tags\n      break;\n\n    case 'a':\n      {\n        break;\n      }\n\n    case 'g':\n    case 'p':\n    case 'li':\n      // Fast track very common tags\n      break;\n    // Special tags\n\n    case 'select':\n      return pushStartSelect(target, props);\n\n    case 'option':\n      return pushStartOption(target, props, formatContext);\n\n    case 'textarea':\n      return pushStartTextArea(target, props);\n\n    case 'input':\n      return pushInput(target, props, resumableState, renderState);\n\n    case 'button':\n      return pushStartButton(target, props, resumableState, renderState);\n\n    case 'form':\n      return pushStartForm(target, props, resumableState, renderState);\n\n    case 'menuitem':\n      return pushStartMenuItem(target, props);\n\n    case 'title':\n      return pushTitle(target, props, renderState, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback) ;\n\n    case 'link':\n      return pushLink(target, props, resumableState, renderState, hoistableState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);\n\n    case 'script':\n      return pushScript(target, props, resumableState, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE)) ;\n\n    case 'style':\n      return pushStyle(target, props, resumableState, renderState, hoistableState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));\n\n    case 'meta':\n      return pushMeta(target, props, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);\n    // Newline eating tags\n\n    case 'listing':\n    case 'pre':\n      {\n        return pushStartPreformattedElement(target, props, type);\n      }\n\n    case 'img':\n      {\n        return pushImg(target, props, resumableState, renderState, !!(formatContext.tagScope & PICTURE_SCOPE)) ;\n      }\n    // Omitted close tags\n\n    case 'base':\n    case 'area':\n    case 'br':\n    case 'col':\n    case 'embed':\n    case 'hr':\n    case 'keygen':\n    case 'param':\n    case 'source':\n    case 'track':\n    case 'wbr':\n      {\n        return pushSelfClosing(target, props, type);\n      }\n    // These are reserved SVG and MathML elements, that are never custom elements.\n    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n\n    case 'annotation-xml':\n    case 'color-profile':\n    case 'font-face':\n    case 'font-face-src':\n    case 'font-face-uri':\n    case 'font-face-format':\n    case 'font-face-name':\n    case 'missing-glyph':\n      {\n        break;\n      }\n    // Preamble start tags\n\n    case 'head':\n      return pushStartHead(target, props, renderState, formatContext.insertionMode);\n\n    case 'html':\n      {\n        return pushStartHtml(target, props, renderState, formatContext.insertionMode);\n      }\n\n    default:\n      {\n        if (type.indexOf('-') !== -1) {\n          // Custom element\n          return pushStartCustomElement(target, props, type);\n        }\n      }\n  } // Generic element\n\n\n  return pushStartGenericElement(target, props, type);\n}\nvar endTagCache = new Map();\n\nfunction endChunkForTag(tag) {\n  var chunk = endTagCache.get(tag);\n\n  if (chunk === undefined) {\n    chunk = stringToPrecomputedChunk('</' + tag + '>');\n    endTagCache.set(tag, chunk);\n  }\n\n  return chunk;\n}\n\nfunction pushEndInstance(target, type, props, resumableState, formatContext) {\n  switch (type) {\n    // When float is on we expect title and script tags to always be pushed in\n    // a unit and never return children. when we end up pushing the end tag we\n    // want to ensure there is no extra closing tag pushed\n    case 'title':\n    case 'style':\n    case 'script':\n    // Omitted close tags\n    // TODO: Instead of repeating this switch we could try to pass a flag from above.\n    // That would require returning a tuple. Which might be ok if it gets inlined.\n\n    case 'area':\n    case 'base':\n    case 'br':\n    case 'col':\n    case 'embed':\n    case 'hr':\n    case 'img':\n    case 'input':\n    case 'keygen':\n    case 'link':\n    case 'meta':\n    case 'param':\n    case 'source':\n    case 'track':\n    case 'wbr':\n      {\n        // No close tag needed.\n        return;\n      }\n    // Postamble end tags\n    // When float is enabled we omit the end tags for body and html when\n    // they represent the Document.body and Document.documentElement Nodes.\n    // This is so we can withhold them until the postamble when we know\n    // we won't emit any more tags\n\n    case 'body':\n      {\n        if (formatContext.insertionMode <= HTML_HTML_MODE) {\n          resumableState.hasBody = true;\n          return;\n        }\n\n        break;\n      }\n\n    case 'html':\n      if (formatContext.insertionMode === ROOT_HTML_MODE) {\n        resumableState.hasHtml = true;\n        return;\n      }\n\n      break;\n  }\n\n  target.push(endChunkForTag(type));\n}\n\nfunction writeBootstrap(destination, renderState) {\n  var bootstrapChunks = renderState.bootstrapChunks;\n  var i = 0;\n\n  for (; i < bootstrapChunks.length - 1; i++) {\n    writeChunk(destination, bootstrapChunks[i]);\n  }\n\n  if (i < bootstrapChunks.length) {\n    var lastChunk = bootstrapChunks[i];\n    bootstrapChunks.length = 0;\n    return writeChunkAndReturn(destination, lastChunk);\n  }\n\n  return true;\n}\n\nfunction writeCompletedRoot(destination, renderState) {\n  return writeBootstrap(destination, renderState);\n} // Structural Nodes\n// A placeholder is a node inside a hidden partial tree that can be filled in later, but before\n// display. It's never visible to users. We use the template tag because it can be used in every\n// type of parent. <script> tags also work in every other tag except <colgroup>.\n\nvar placeholder1 = stringToPrecomputedChunk('<template id=\"');\nvar placeholder2 = stringToPrecomputedChunk('\"></template>');\nfunction writePlaceholder(destination, renderState, id) {\n  writeChunk(destination, placeholder1);\n  writeChunk(destination, renderState.placeholderPrefix);\n  var formattedID = stringToChunk(id.toString(16));\n  writeChunk(destination, formattedID);\n  return writeChunkAndReturn(destination, placeholder2);\n} // Suspense boundaries are encoded as comments.\n\nvar startCompletedSuspenseBoundary = stringToPrecomputedChunk('<!--$-->');\nvar startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id=\"');\nvar startPendingSuspenseBoundary2 = stringToPrecomputedChunk('\"></template>');\nvar startClientRenderedSuspenseBoundary = stringToPrecomputedChunk('<!--$!-->');\nvar endSuspenseBoundary = stringToPrecomputedChunk('<!--/$-->');\nvar clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk('<template');\nvar clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('\"');\nvar clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst=\"');\nvar clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg=\"');\nvar clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck=\"');\nvar clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk('></template>');\nfunction writeStartCompletedSuspenseBoundary$1(destination, renderState) {\n  return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);\n}\nfunction writeStartPendingSuspenseBoundary(destination, renderState, id) {\n  writeChunk(destination, startPendingSuspenseBoundary1);\n\n  if (id === null) {\n    throw new Error('An ID must have been assigned before we can complete the boundary.');\n  }\n\n  writeChunk(destination, renderState.boundaryPrefix);\n  writeChunk(destination, stringToChunk(id.toString(16)));\n  return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);\n}\nfunction writeStartClientRenderedSuspenseBoundary$1(destination, renderState, errorDigest, errorMesssage, errorComponentStack) {\n  var result;\n  result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);\n  writeChunk(destination, clientRenderedSuspenseBoundaryError1);\n\n  if (errorDigest) {\n    writeChunk(destination, clientRenderedSuspenseBoundaryError1A);\n    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));\n    writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n  }\n\n  {\n    if (errorMesssage) {\n      writeChunk(destination, clientRenderedSuspenseBoundaryError1B);\n      writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));\n      writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n    }\n\n    if (errorComponentStack) {\n      writeChunk(destination, clientRenderedSuspenseBoundaryError1C);\n      writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));\n      writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n    }\n  }\n\n  result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);\n  return result;\n}\nfunction writeEndCompletedSuspenseBoundary$1(destination, renderState) {\n  return writeChunkAndReturn(destination, endSuspenseBoundary);\n}\nfunction writeEndPendingSuspenseBoundary(destination, renderState) {\n  return writeChunkAndReturn(destination, endSuspenseBoundary);\n}\nfunction writeEndClientRenderedSuspenseBoundary$1(destination, renderState) {\n  return writeChunkAndReturn(destination, endSuspenseBoundary);\n}\nvar startSegmentHTML = stringToPrecomputedChunk('<div hidden id=\"');\nvar startSegmentHTML2 = stringToPrecomputedChunk('\">');\nvar endSegmentHTML = stringToPrecomputedChunk('</div>');\nvar startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden=\"true\" style=\"display:none\" id=\"');\nvar startSegmentSVG2 = stringToPrecomputedChunk('\">');\nvar endSegmentSVG = stringToPrecomputedChunk('</svg>');\nvar startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden=\"true\" style=\"display:none\" id=\"');\nvar startSegmentMathML2 = stringToPrecomputedChunk('\">');\nvar endSegmentMathML = stringToPrecomputedChunk('</math>');\nvar startSegmentTable = stringToPrecomputedChunk('<table hidden id=\"');\nvar startSegmentTable2 = stringToPrecomputedChunk('\">');\nvar endSegmentTable = stringToPrecomputedChunk('</table>');\nvar startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id=\"');\nvar startSegmentTableBody2 = stringToPrecomputedChunk('\">');\nvar endSegmentTableBody = stringToPrecomputedChunk('</tbody></table>');\nvar startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id=\"');\nvar startSegmentTableRow2 = stringToPrecomputedChunk('\">');\nvar endSegmentTableRow = stringToPrecomputedChunk('</tr></table>');\nvar startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id=\"');\nvar startSegmentColGroup2 = stringToPrecomputedChunk('\">');\nvar endSegmentColGroup = stringToPrecomputedChunk('</colgroup></table>');\nfunction writeStartSegment(destination, renderState, formatContext, id) {\n  switch (formatContext.insertionMode) {\n    case ROOT_HTML_MODE:\n    case HTML_HTML_MODE:\n    case HTML_MODE:\n      {\n        writeChunk(destination, startSegmentHTML);\n        writeChunk(destination, renderState.segmentPrefix);\n        writeChunk(destination, stringToChunk(id.toString(16)));\n        return writeChunkAndReturn(destination, startSegmentHTML2);\n      }\n\n    case SVG_MODE:\n      {\n        writeChunk(destination, startSegmentSVG);\n        writeChunk(destination, renderState.segmentPrefix);\n        writeChunk(destination, stringToChunk(id.toString(16)));\n        return writeChunkAndReturn(destination, startSegmentSVG2);\n      }\n\n    case MATHML_MODE:\n      {\n        writeChunk(destination, startSegmentMathML);\n        writeChunk(destination, renderState.segmentPrefix);\n        writeChunk(destination, stringToChunk(id.toString(16)));\n        return writeChunkAndReturn(destination, startSegmentMathML2);\n      }\n\n    case HTML_TABLE_MODE:\n      {\n        writeChunk(destination, startSegmentTable);\n        writeChunk(destination, renderState.segmentPrefix);\n        writeChunk(destination, stringToChunk(id.toString(16)));\n        return writeChunkAndReturn(destination, startSegmentTable2);\n      }\n    // TODO: For the rest of these, there will be extra wrapper nodes that never\n    // get deleted from the document. We need to delete the table too as part\n    // of the injected scripts. They are invisible though so it's not too terrible\n    // and it's kind of an edge case to suspend in a table. Totally supported though.\n\n    case HTML_TABLE_BODY_MODE:\n      {\n        writeChunk(destination, startSegmentTableBody);\n        writeChunk(destination, renderState.segmentPrefix);\n        writeChunk(destination, stringToChunk(id.toString(16)));\n        return writeChunkAndReturn(destination, startSegmentTableBody2);\n      }\n\n    case HTML_TABLE_ROW_MODE:\n      {\n        writeChunk(destination, startSegmentTableRow);\n        writeChunk(destination, renderState.segmentPrefix);\n        writeChunk(destination, stringToChunk(id.toString(16)));\n        return writeChunkAndReturn(destination, startSegmentTableRow2);\n      }\n\n    case HTML_COLGROUP_MODE:\n      {\n        writeChunk(destination, startSegmentColGroup);\n        writeChunk(destination, renderState.segmentPrefix);\n        writeChunk(destination, stringToChunk(id.toString(16)));\n        return writeChunkAndReturn(destination, startSegmentColGroup2);\n      }\n\n    default:\n      {\n        throw new Error('Unknown insertion mode. This is a bug in React.');\n      }\n  }\n}\nfunction writeEndSegment(destination, formatContext) {\n  switch (formatContext.insertionMode) {\n    case ROOT_HTML_MODE:\n    case HTML_HTML_MODE:\n    case HTML_MODE:\n      {\n        return writeChunkAndReturn(destination, endSegmentHTML);\n      }\n\n    case SVG_MODE:\n      {\n        return writeChunkAndReturn(destination, endSegmentSVG);\n      }\n\n    case MATHML_MODE:\n      {\n        return writeChunkAndReturn(destination, endSegmentMathML);\n      }\n\n    case HTML_TABLE_MODE:\n      {\n        return writeChunkAndReturn(destination, endSegmentTable);\n      }\n\n    case HTML_TABLE_BODY_MODE:\n      {\n        return writeChunkAndReturn(destination, endSegmentTableBody);\n      }\n\n    case HTML_TABLE_ROW_MODE:\n      {\n        return writeChunkAndReturn(destination, endSegmentTableRow);\n      }\n\n    case HTML_COLGROUP_MODE:\n      {\n        return writeChunkAndReturn(destination, endSegmentColGroup);\n      }\n\n    default:\n      {\n        throw new Error('Unknown insertion mode. This is a bug in React.');\n      }\n  }\n}\nvar completeSegmentScript1Full = stringToPrecomputedChunk(completeSegment + '$RS(\"');\nvar completeSegmentScript1Partial = stringToPrecomputedChunk('$RS(\"');\nvar completeSegmentScript2 = stringToPrecomputedChunk('\",\"');\nvar completeSegmentScriptEnd = stringToPrecomputedChunk('\")</script>');\nvar completeSegmentData1 = stringToPrecomputedChunk('<template data-rsi=\"\" data-sid=\"');\nvar completeSegmentData2 = stringToPrecomputedChunk('\" data-pid=\"');\nvar completeSegmentDataEnd = dataElementQuotedEnd;\nfunction writeCompletedSegmentInstruction(destination, resumableState, renderState, contentSegmentID) {\n  var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;\n\n  if (scriptFormat) {\n    writeChunk(destination, renderState.startInlineScript);\n\n    if ((resumableState.instructions & SentCompleteSegmentFunction) === NothingSent) {\n      // The first time we write this, we'll need to include the full implementation.\n      resumableState.instructions |= SentCompleteSegmentFunction;\n      writeChunk(destination, completeSegmentScript1Full);\n    } else {\n      // Future calls can just reuse the same function.\n      writeChunk(destination, completeSegmentScript1Partial);\n    }\n  } else {\n    writeChunk(destination, completeSegmentData1);\n  } // Write function arguments, which are string literals\n\n\n  writeChunk(destination, renderState.segmentPrefix);\n  var formattedID = stringToChunk(contentSegmentID.toString(16));\n  writeChunk(destination, formattedID);\n\n  if (scriptFormat) {\n    writeChunk(destination, completeSegmentScript2);\n  } else {\n    writeChunk(destination, completeSegmentData2);\n  }\n\n  writeChunk(destination, renderState.placeholderPrefix);\n  writeChunk(destination, formattedID);\n\n  if (scriptFormat) {\n    return writeChunkAndReturn(destination, completeSegmentScriptEnd);\n  } else {\n    return writeChunkAndReturn(destination, completeSegmentDataEnd);\n  }\n}\nvar completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundary + '$RC(\"');\nvar completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC(\"');\nvar completeBoundaryWithStylesScript1FullBoth = stringToPrecomputedChunk(completeBoundary + completeBoundaryWithStyles + '$RR(\"');\nvar completeBoundaryWithStylesScript1FullPartial = stringToPrecomputedChunk(completeBoundaryWithStyles + '$RR(\"');\nvar completeBoundaryWithStylesScript1Partial = stringToPrecomputedChunk('$RR(\"');\nvar completeBoundaryScript2 = stringToPrecomputedChunk('\",\"');\nvar completeBoundaryScript3a = stringToPrecomputedChunk('\",');\nvar completeBoundaryScript3b = stringToPrecomputedChunk('\"');\nvar completeBoundaryScriptEnd = stringToPrecomputedChunk(')</script>');\nvar completeBoundaryData1 = stringToPrecomputedChunk('<template data-rci=\"\" data-bid=\"');\nvar completeBoundaryWithStylesData1 = stringToPrecomputedChunk('<template data-rri=\"\" data-bid=\"');\nvar completeBoundaryData2 = stringToPrecomputedChunk('\" data-sid=\"');\nvar completeBoundaryData3a = stringToPrecomputedChunk('\" data-sty=\"');\nvar completeBoundaryDataEnd = dataElementQuotedEnd;\nfunction writeCompletedBoundaryInstruction(destination, resumableState, renderState, id, hoistableState) {\n  var requiresStyleInsertion;\n\n  {\n    requiresStyleInsertion = renderState.stylesToHoist; // If necessary stylesheets will be flushed with this instruction.\n    // Any style tags not yet hoisted in the Document will also be hoisted.\n    // We reset this state since after this instruction executes all styles\n    // up to this point will have been hoisted\n\n    renderState.stylesToHoist = false;\n  }\n\n  var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;\n\n  if (scriptFormat) {\n    writeChunk(destination, renderState.startInlineScript);\n\n    if (requiresStyleInsertion) {\n      if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {\n        resumableState.instructions |= SentStyleInsertionFunction | SentCompleteBoundaryFunction;\n        writeChunk(destination, completeBoundaryWithStylesScript1FullBoth);\n      } else if ((resumableState.instructions & SentStyleInsertionFunction) === NothingSent) {\n        resumableState.instructions |= SentStyleInsertionFunction;\n        writeChunk(destination, completeBoundaryWithStylesScript1FullPartial);\n      } else {\n        writeChunk(destination, completeBoundaryWithStylesScript1Partial);\n      }\n    } else {\n      if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {\n        resumableState.instructions |= SentCompleteBoundaryFunction;\n        writeChunk(destination, completeBoundaryScript1Full);\n      } else {\n        writeChunk(destination, completeBoundaryScript1Partial);\n      }\n    }\n  } else {\n    if (requiresStyleInsertion) {\n      writeChunk(destination, completeBoundaryWithStylesData1);\n    } else {\n      writeChunk(destination, completeBoundaryData1);\n    }\n  }\n\n  var idChunk = stringToChunk(id.toString(16));\n  writeChunk(destination, renderState.boundaryPrefix);\n  writeChunk(destination, idChunk); // Write function arguments, which are string and array literals\n\n  if (scriptFormat) {\n    writeChunk(destination, completeBoundaryScript2);\n  } else {\n    writeChunk(destination, completeBoundaryData2);\n  }\n\n  writeChunk(destination, renderState.segmentPrefix);\n  writeChunk(destination, idChunk);\n\n  if (requiresStyleInsertion) {\n    // Script and data writers must format this differently:\n    //  - script writer emits an array literal, whose string elements are\n    //    escaped for javascript  e.g. [\"A\", \"B\"]\n    //  - data writer emits a string literal, which is escaped as html\n    //    e.g. [&#34;A&#34;, &#34;B&#34;]\n    if (scriptFormat) {\n      writeChunk(destination, completeBoundaryScript3a); // hoistableState encodes an array literal\n\n      writeStyleResourceDependenciesInJS(destination, hoistableState);\n    } else {\n      writeChunk(destination, completeBoundaryData3a);\n      writeStyleResourceDependenciesInAttr(destination, hoistableState);\n    }\n  } else {\n    if (scriptFormat) {\n      writeChunk(destination, completeBoundaryScript3b);\n    }\n  }\n\n  var writeMore;\n\n  if (scriptFormat) {\n    writeMore = writeChunkAndReturn(destination, completeBoundaryScriptEnd);\n  } else {\n    writeMore = writeChunkAndReturn(destination, completeBoundaryDataEnd);\n  }\n\n  return writeBootstrap(destination, renderState) && writeMore;\n}\nvar clientRenderScript1Full = stringToPrecomputedChunk(clientRenderBoundary + ';$RX(\"');\nvar clientRenderScript1Partial = stringToPrecomputedChunk('$RX(\"');\nvar clientRenderScript1A = stringToPrecomputedChunk('\"');\nvar clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(',');\nvar clientRenderScriptEnd = stringToPrecomputedChunk(')</script>');\nvar clientRenderData1 = stringToPrecomputedChunk('<template data-rxi=\"\" data-bid=\"');\nvar clientRenderData2 = stringToPrecomputedChunk('\" data-dgst=\"');\nvar clientRenderData3 = stringToPrecomputedChunk('\" data-msg=\"');\nvar clientRenderData4 = stringToPrecomputedChunk('\" data-stck=\"');\nvar clientRenderDataEnd = dataElementQuotedEnd;\nfunction writeClientRenderBoundaryInstruction(destination, resumableState, renderState, id, errorDigest, errorMessage, errorComponentStack) {\n  var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;\n\n  if (scriptFormat) {\n    writeChunk(destination, renderState.startInlineScript);\n\n    if ((resumableState.instructions & SentClientRenderFunction) === NothingSent) {\n      // The first time we write this, we'll need to include the full implementation.\n      resumableState.instructions |= SentClientRenderFunction;\n      writeChunk(destination, clientRenderScript1Full);\n    } else {\n      // Future calls can just reuse the same function.\n      writeChunk(destination, clientRenderScript1Partial);\n    }\n  } else {\n    // <template data-rxi=\"\" data-bid=\"\n    writeChunk(destination, clientRenderData1);\n  }\n\n  writeChunk(destination, renderState.boundaryPrefix);\n  writeChunk(destination, stringToChunk(id.toString(16)));\n\n  if (scriptFormat) {\n    // \" needs to be inserted for scripts, since ArgInterstitual does not contain\n    // leading or trailing quotes\n    writeChunk(destination, clientRenderScript1A);\n  }\n\n  if (errorDigest || errorMessage || errorComponentStack) {\n    if (scriptFormat) {\n      // ,\"JSONString\"\n      writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n      writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || '')));\n    } else {\n      // \" data-dgst=\"HTMLString\n      writeChunk(destination, clientRenderData2);\n      writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest || '')));\n    }\n  }\n\n  if (errorMessage || errorComponentStack) {\n    if (scriptFormat) {\n      // ,\"JSONString\"\n      writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n      writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || '')));\n    } else {\n      // \" data-msg=\"HTMLString\n      writeChunk(destination, clientRenderData3);\n      writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMessage || '')));\n    }\n  }\n\n  if (errorComponentStack) {\n    // ,\"JSONString\"\n    if (scriptFormat) {\n      writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n      writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));\n    } else {\n      // \" data-stck=\"HTMLString\n      writeChunk(destination, clientRenderData4);\n      writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));\n    }\n  }\n\n  if (scriptFormat) {\n    // ></script>\n    return writeChunkAndReturn(destination, clientRenderScriptEnd);\n  } else {\n    // \"></template>\n    return writeChunkAndReturn(destination, clientRenderDataEnd);\n  }\n}\nvar regexForJSStringsInInstructionScripts = /[<\\u2028\\u2029]/g;\n\nfunction escapeJSStringsForInstructionScripts(input) {\n  var escaped = JSON.stringify(input);\n  return escaped.replace(regexForJSStringsInInstructionScripts, function (match) {\n    switch (match) {\n      // santizing breaking out of strings and script tags\n      case '<':\n        return \"\\\\u003c\";\n\n      case \"\\u2028\":\n        return \"\\\\u2028\";\n\n      case \"\\u2029\":\n        return \"\\\\u2029\";\n\n      default:\n        {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React');\n        }\n    }\n  });\n}\n\nvar regexForJSStringsInScripts = /[&><\\u2028\\u2029]/g;\n\nfunction escapeJSObjectForInstructionScripts(input) {\n  var escaped = JSON.stringify(input);\n  return escaped.replace(regexForJSStringsInScripts, function (match) {\n    switch (match) {\n      // santizing breaking out of strings and script tags\n      case '&':\n        return \"\\\\u0026\";\n\n      case '>':\n        return \"\\\\u003e\";\n\n      case '<':\n        return \"\\\\u003c\";\n\n      case \"\\u2028\":\n        return \"\\\\u2028\";\n\n      case \"\\u2029\":\n        return \"\\\\u2029\";\n\n      default:\n        {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React');\n        }\n    }\n  });\n}\n\nvar lateStyleTagResourceOpen1 = stringToPrecomputedChunk('<style media=\"not all\" data-precedence=\"');\nvar lateStyleTagResourceOpen2 = stringToPrecomputedChunk('\" data-href=\"');\nvar lateStyleTagResourceOpen3 = stringToPrecomputedChunk('\">');\nvar lateStyleTagTemplateClose = stringToPrecomputedChunk('</style>'); // Tracks whether the boundary currently flushing is flushign style tags or has any\n// stylesheet dependencies not flushed in the Preamble.\n\nvar currentlyRenderingBoundaryHasStylesToHoist = false; // Acts as a return value for the forEach execution of style tag flushing.\n\nvar destinationHasCapacity = true;\n\nfunction flushStyleTagsLateForBoundary(styleQueue) {\n  var rules = styleQueue.rules;\n  var hrefs = styleQueue.hrefs;\n\n  {\n    if (rules.length > 0 && hrefs.length === 0) {\n      error('React expected to have at least one href for an a hoistable style but found none. This is a bug in React.');\n    }\n  }\n\n  var i = 0;\n\n  if (hrefs.length) {\n    writeChunk(this, lateStyleTagResourceOpen1);\n    writeChunk(this, styleQueue.precedence);\n    writeChunk(this, lateStyleTagResourceOpen2);\n\n    for (; i < hrefs.length - 1; i++) {\n      writeChunk(this, hrefs[i]);\n      writeChunk(this, spaceSeparator);\n    }\n\n    writeChunk(this, hrefs[i]);\n    writeChunk(this, lateStyleTagResourceOpen3);\n\n    for (i = 0; i < rules.length; i++) {\n      writeChunk(this, rules[i]);\n    }\n\n    destinationHasCapacity = writeChunkAndReturn(this, lateStyleTagTemplateClose); // We wrote style tags for this boundary and we may need to emit a script\n    // to hoist them.\n\n    currentlyRenderingBoundaryHasStylesToHoist = true; // style resources can flush continuously since more rules may be written into\n    // them with new hrefs. Instead of marking it flushed, we simply reset the chunks\n    // and hrefs\n\n    rules.length = 0;\n    hrefs.length = 0;\n  }\n}\n\nfunction hasStylesToHoist(stylesheet) {\n  // We need to reveal boundaries with styles whenever a stylesheet it depends on is either\n  // not flushed or flushed after the preamble (shell).\n  if (stylesheet.state !== PREAMBLE) {\n    currentlyRenderingBoundaryHasStylesToHoist = true;\n    return true;\n  }\n\n  return false;\n}\n\nfunction writeHoistablesForBoundary(destination, hoistableState, renderState) {\n  // Reset these on each invocation, they are only safe to read in this function\n  currentlyRenderingBoundaryHasStylesToHoist = false;\n  destinationHasCapacity = true; // Flush style tags for each precedence this boundary depends on\n\n  hoistableState.styles.forEach(flushStyleTagsLateForBoundary, destination); // Determine if this boundary has stylesheets that need to be awaited upon completion\n\n  hoistableState.stylesheets.forEach(hasStylesToHoist); // We don't actually want to flush any hoistables until the boundary is complete so we omit\n  // any further writing here. This is becuase unlike Resources, Hoistable Elements act more like\n  // regular elements, each rendered element has a unique representation in the DOM. We don't want\n  // these elements to appear in the DOM early, before the boundary has actually completed\n\n  if (currentlyRenderingBoundaryHasStylesToHoist) {\n    renderState.stylesToHoist = true;\n  }\n\n  return destinationHasCapacity;\n}\n\nfunction flushResource(resource) {\n  for (var i = 0; i < resource.length; i++) {\n    writeChunk(this, resource[i]);\n  }\n\n  resource.length = 0;\n}\n\nvar stylesheetFlushingQueue = [];\n\nfunction flushStyleInPreamble(stylesheet, key, map) {\n  // We still need to encode stylesheet chunks\n  // because unlike most Hoistables and Resources we do not eagerly encode\n  // them during render. This is because if we flush late we have to send a\n  // different encoding and we don't want to encode multiple times\n  pushLinkImpl(stylesheetFlushingQueue, stylesheet.props);\n\n  for (var i = 0; i < stylesheetFlushingQueue.length; i++) {\n    writeChunk(this, stylesheetFlushingQueue[i]);\n  }\n\n  stylesheetFlushingQueue.length = 0;\n  stylesheet.state = PREAMBLE;\n}\n\nvar styleTagResourceOpen1 = stringToPrecomputedChunk('<style data-precedence=\"');\nvar styleTagResourceOpen2 = stringToPrecomputedChunk('\" data-href=\"');\nvar spaceSeparator = stringToPrecomputedChunk(' ');\nvar styleTagResourceOpen3 = stringToPrecomputedChunk('\">');\nvar styleTagResourceClose = stringToPrecomputedChunk('</style>');\n\nfunction flushStylesInPreamble(styleQueue, precedence) {\n  var hasStylesheets = styleQueue.sheets.size > 0;\n  styleQueue.sheets.forEach(flushStyleInPreamble, this);\n  styleQueue.sheets.clear();\n  var rules = styleQueue.rules;\n  var hrefs = styleQueue.hrefs; // If we don't emit any stylesheets at this precedence we still need to maintain the precedence\n  // order so even if there are no rules for style tags at this precedence we emit an empty style\n  // tag with the data-precedence attribute\n\n  if (!hasStylesheets || hrefs.length) {\n    writeChunk(this, styleTagResourceOpen1);\n    writeChunk(this, styleQueue.precedence);\n    var i = 0;\n\n    if (hrefs.length) {\n      writeChunk(this, styleTagResourceOpen2);\n\n      for (; i < hrefs.length - 1; i++) {\n        writeChunk(this, hrefs[i]);\n        writeChunk(this, spaceSeparator);\n      }\n\n      writeChunk(this, hrefs[i]);\n    }\n\n    writeChunk(this, styleTagResourceOpen3);\n\n    for (i = 0; i < rules.length; i++) {\n      writeChunk(this, rules[i]);\n    }\n\n    writeChunk(this, styleTagResourceClose); // style resources can flush continuously since more rules may be written into\n    // them with new hrefs. Instead of marking it flushed, we simply reset the chunks\n    // and hrefs\n\n    rules.length = 0;\n    hrefs.length = 0;\n  }\n}\n\nfunction preloadLateStyle(stylesheet) {\n  if (stylesheet.state === PENDING$1) {\n    stylesheet.state = PRELOADED;\n    var preloadProps = preloadAsStylePropsFromProps(stylesheet.props.href, stylesheet.props);\n    pushLinkImpl(stylesheetFlushingQueue, preloadProps);\n\n    for (var i = 0; i < stylesheetFlushingQueue.length; i++) {\n      writeChunk(this, stylesheetFlushingQueue[i]);\n    }\n\n    stylesheetFlushingQueue.length = 0;\n  }\n}\n\nfunction preloadLateStyles(styleQueue) {\n  styleQueue.sheets.forEach(preloadLateStyle, this);\n  styleQueue.sheets.clear();\n} // We don't bother reporting backpressure at the moment because we expect to\n// flush the entire preamble in a single pass. This probably should be modified\n// in the future to be backpressure sensitive but that requires a larger refactor\n// of the flushing code in Fizz.\n\n\nfunction writePreamble(destination, resumableState, renderState, willFlushAllSegments) {\n  // This function must be called exactly once on every request\n  if (!willFlushAllSegments && renderState.externalRuntimeScript) {\n    // If the root segment is incomplete due to suspended tasks\n    // (e.g. willFlushAllSegments = false) and we are using data\n    // streaming format, ensure the external runtime is sent.\n    // (User code could choose to send this even earlier by calling\n    //  preinit(...), if they know they will suspend).\n    var _renderState$external = renderState.externalRuntimeScript,\n        src = _renderState$external.src,\n        chunks = _renderState$external.chunks;\n    internalPreinitScript(resumableState, renderState, src, chunks);\n  }\n\n  var htmlChunks = renderState.htmlChunks;\n  var headChunks = renderState.headChunks;\n  var i = 0; // Emit open tags before Hoistables and Resources\n\n  if (htmlChunks) {\n    // We have an <html> to emit as part of the preamble\n    for (i = 0; i < htmlChunks.length; i++) {\n      writeChunk(destination, htmlChunks[i]);\n    }\n\n    if (headChunks) {\n      for (i = 0; i < headChunks.length; i++) {\n        writeChunk(destination, headChunks[i]);\n      }\n    } else {\n      // We did not render a head but we emitted an <html> so we emit one now\n      writeChunk(destination, startChunkForTag('head'));\n      writeChunk(destination, endOfStartTag);\n    }\n  } else if (headChunks) {\n    // We do not have an <html> but we do have a <head>\n    for (i = 0; i < headChunks.length; i++) {\n      writeChunk(destination, headChunks[i]);\n    }\n  } // Emit high priority Hoistables\n\n\n  var charsetChunks = renderState.charsetChunks;\n\n  for (i = 0; i < charsetChunks.length; i++) {\n    writeChunk(destination, charsetChunks[i]);\n  }\n\n  charsetChunks.length = 0; // emit preconnect resources\n\n  renderState.preconnects.forEach(flushResource, destination);\n  renderState.preconnects.clear();\n  var viewportChunks = renderState.viewportChunks;\n\n  for (i = 0; i < viewportChunks.length; i++) {\n    writeChunk(destination, viewportChunks[i]);\n  }\n\n  viewportChunks.length = 0;\n  renderState.fontPreloads.forEach(flushResource, destination);\n  renderState.fontPreloads.clear();\n  renderState.highImagePreloads.forEach(flushResource, destination);\n  renderState.highImagePreloads.clear(); // Flush unblocked stylesheets by precedence\n\n  renderState.styles.forEach(flushStylesInPreamble, destination);\n  var importMapChunks = renderState.importMapChunks;\n\n  for (i = 0; i < importMapChunks.length; i++) {\n    writeChunk(destination, importMapChunks[i]);\n  }\n\n  importMapChunks.length = 0;\n  renderState.bootstrapScripts.forEach(flushResource, destination);\n  renderState.scripts.forEach(flushResource, destination);\n  renderState.scripts.clear();\n  renderState.bulkPreloads.forEach(flushResource, destination);\n  renderState.bulkPreloads.clear(); // Write embedding hoistableChunks\n\n  var hoistableChunks = renderState.hoistableChunks;\n\n  for (i = 0; i < hoistableChunks.length; i++) {\n    writeChunk(destination, hoistableChunks[i]);\n  }\n\n  hoistableChunks.length = 0;\n\n  if (htmlChunks && headChunks === null) {\n    // we have an <html> but we inserted an implicit <head> tag. We need\n    // to close it since the main content won't have it\n    writeChunk(destination, endChunkForTag('head'));\n  }\n} // We don't bother reporting backpressure at the moment because we expect to\n// flush the entire preamble in a single pass. This probably should be modified\n// in the future to be backpressure sensitive but that requires a larger refactor\n// of the flushing code in Fizz.\n\nfunction writeHoistables(destination, resumableState, renderState) {\n  var i = 0; // Emit high priority Hoistables\n  // We omit charsetChunks because we have already sent the shell and if it wasn't\n  // already sent it is too late now.\n\n  var viewportChunks = renderState.viewportChunks;\n\n  for (i = 0; i < viewportChunks.length; i++) {\n    writeChunk(destination, viewportChunks[i]);\n  }\n\n  viewportChunks.length = 0;\n  renderState.preconnects.forEach(flushResource, destination);\n  renderState.preconnects.clear();\n  renderState.fontPreloads.forEach(flushResource, destination);\n  renderState.fontPreloads.clear();\n  renderState.highImagePreloads.forEach(flushResource, destination);\n  renderState.highImagePreloads.clear(); // Preload any stylesheets. these will emit in a render instruction that follows this\n  // but we want to kick off preloading as soon as possible\n\n  renderState.styles.forEach(preloadLateStyles, destination); // We only hoist importmaps that are configured through createResponse and that will\n  // always flush in the preamble. Generally we don't expect people to render them as\n  // tags when using React but if you do they are going to be treated like regular inline\n  // scripts and flush after other hoistables which is problematic\n  // bootstrap scripts should flush above script priority but these can only flush in the preamble\n  // so we elide the code here for performance\n\n  renderState.scripts.forEach(flushResource, destination);\n  renderState.scripts.clear();\n  renderState.bulkPreloads.forEach(flushResource, destination);\n  renderState.bulkPreloads.clear(); // Write embedding hoistableChunks\n\n  var hoistableChunks = renderState.hoistableChunks;\n\n  for (i = 0; i < hoistableChunks.length; i++) {\n    writeChunk(destination, hoistableChunks[i]);\n  }\n\n  hoistableChunks.length = 0;\n}\nfunction writePostamble(destination, resumableState) {\n  if (resumableState.hasBody) {\n    writeChunk(destination, endChunkForTag('body'));\n  }\n\n  if (resumableState.hasHtml) {\n    writeChunk(destination, endChunkForTag('html'));\n  }\n}\nvar arrayFirstOpenBracket = stringToPrecomputedChunk('[');\nvar arraySubsequentOpenBracket = stringToPrecomputedChunk(',[');\nvar arrayInterstitial = stringToPrecomputedChunk(',');\nvar arrayCloseBracket = stringToPrecomputedChunk(']'); // This function writes a 2D array of strings to be embedded in javascript.\n// E.g.\n//  [[\"JS_escaped_string1\", \"JS_escaped_string2\"]]\n\nfunction writeStyleResourceDependenciesInJS(destination, hoistableState) {\n  writeChunk(destination, arrayFirstOpenBracket);\n  var nextArrayOpenBrackChunk = arrayFirstOpenBracket;\n  hoistableState.stylesheets.forEach(function (resource) {\n    if (resource.state === PREAMBLE) ; else if (resource.state === LATE) {\n      // We only need to emit the href because this resource flushed in an earlier\n      // boundary already which encoded the attributes necessary to construct\n      // the resource instance on the client.\n      writeChunk(destination, nextArrayOpenBrackChunk);\n      writeStyleResourceDependencyHrefOnlyInJS(destination, resource.props.href);\n      writeChunk(destination, arrayCloseBracket);\n      nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n    } else {\n      // We need to emit the whole resource for insertion on the client\n      writeChunk(destination, nextArrayOpenBrackChunk);\n      writeStyleResourceDependencyInJS(destination, resource.props.href, resource.props['data-precedence'], resource.props);\n      writeChunk(destination, arrayCloseBracket);\n      nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n      resource.state = LATE;\n    }\n  });\n  writeChunk(destination, arrayCloseBracket);\n}\n/* Helper functions */\n\n\nfunction writeStyleResourceDependencyHrefOnlyInJS(destination, href) {\n  // We should actually enforce this earlier when the resource is created but for\n  // now we make sure we are actually dealing with a string here.\n  {\n    checkAttributeStringCoercion(href, 'href');\n  }\n\n  var coercedHref = '' + href;\n  writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));\n}\n\nfunction writeStyleResourceDependencyInJS(destination, href, precedence, props) {\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  var coercedHref = sanitizeURL('' + href);\n  writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));\n\n  {\n    checkAttributeStringCoercion(precedence, 'precedence');\n  }\n\n  var coercedPrecedence = '' + precedence;\n  writeChunk(destination, arrayInterstitial);\n  writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedPrecedence)));\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'href':\n        case 'rel':\n        case 'precedence':\n        case 'data-precedence':\n          {\n            break;\n          }\n\n        case 'children':\n        case 'dangerouslySetInnerHTML':\n          throw new Error('link' + \" is a self-closing tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n\n        default:\n          writeStyleResourceAttributeInJS(destination, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction writeStyleResourceAttributeInJS(destination, name, value) // not null or undefined\n{\n  var attributeName = name.toLowerCase();\n  var attributeValue;\n\n  switch (typeof value) {\n    case 'function':\n    case 'symbol':\n      return;\n  }\n\n  switch (name) {\n    // Reserved names\n    case 'innerHTML':\n    case 'dangerouslySetInnerHTML':\n    case 'suppressContentEditableWarning':\n    case 'suppressHydrationWarning':\n    case 'style':\n    case 'ref':\n      // Ignored\n      return;\n    // Attribute renames\n\n    case 'className':\n      {\n        attributeName = 'class';\n\n        {\n          checkAttributeStringCoercion(value, attributeName);\n        }\n\n        attributeValue = '' + value;\n        break;\n      }\n    // Booleans\n\n    case 'hidden':\n      {\n        if (value === false) {\n          return;\n        }\n\n        attributeValue = '';\n        break;\n      }\n    // Santized URLs\n\n    case 'src':\n    case 'href':\n      {\n        value = sanitizeURL(value);\n\n        {\n          checkAttributeStringCoercion(value, attributeName);\n        }\n\n        attributeValue = '' + value;\n        break;\n      }\n\n    default:\n      {\n        if ( // unrecognized event handlers are not SSR'd and we (apparently)\n        // use on* as hueristic for these handler props\n        name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {\n          return;\n        }\n\n        if (!isAttributeNameSafe(name)) {\n          return;\n        }\n\n        {\n          checkAttributeStringCoercion(value, attributeName);\n        }\n\n        attributeValue = '' + value;\n      }\n  }\n\n  writeChunk(destination, arrayInterstitial);\n  writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeName)));\n  writeChunk(destination, arrayInterstitial);\n  writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeValue)));\n} // This function writes a 2D array of strings to be embedded in an attribute\n// value and read with JSON.parse in ReactDOMServerExternalRuntime.js\n// E.g.\n//  [[&quot;JSON_escaped_string1&quot;, &quot;JSON_escaped_string2&quot;]]\n\n\nfunction writeStyleResourceDependenciesInAttr(destination, hoistableState) {\n  writeChunk(destination, arrayFirstOpenBracket);\n  var nextArrayOpenBrackChunk = arrayFirstOpenBracket;\n  hoistableState.stylesheets.forEach(function (resource) {\n    if (resource.state === PREAMBLE) ; else if (resource.state === LATE) {\n      // We only need to emit the href because this resource flushed in an earlier\n      // boundary already which encoded the attributes necessary to construct\n      // the resource instance on the client.\n      writeChunk(destination, nextArrayOpenBrackChunk);\n      writeStyleResourceDependencyHrefOnlyInAttr(destination, resource.props.href);\n      writeChunk(destination, arrayCloseBracket);\n      nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n    } else {\n      // We need to emit the whole resource for insertion on the client\n      writeChunk(destination, nextArrayOpenBrackChunk);\n      writeStyleResourceDependencyInAttr(destination, resource.props.href, resource.props['data-precedence'], resource.props);\n      writeChunk(destination, arrayCloseBracket);\n      nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n      resource.state = LATE;\n    }\n  });\n  writeChunk(destination, arrayCloseBracket);\n}\n/* Helper functions */\n\n\nfunction writeStyleResourceDependencyHrefOnlyInAttr(destination, href) {\n  // We should actually enforce this earlier when the resource is created but for\n  // now we make sure we are actually dealing with a string here.\n  {\n    checkAttributeStringCoercion(href, 'href');\n  }\n\n  var coercedHref = '' + href;\n  writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));\n}\n\nfunction writeStyleResourceDependencyInAttr(destination, href, precedence, props) {\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  var coercedHref = sanitizeURL('' + href);\n  writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));\n\n  {\n    checkAttributeStringCoercion(precedence, 'precedence');\n  }\n\n  var coercedPrecedence = '' + precedence;\n  writeChunk(destination, arrayInterstitial);\n  writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedPrecedence))));\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'href':\n        case 'rel':\n        case 'precedence':\n        case 'data-precedence':\n          {\n            break;\n          }\n\n        case 'children':\n        case 'dangerouslySetInnerHTML':\n          throw new Error('link' + \" is a self-closing tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n\n        default:\n          writeStyleResourceAttributeInAttr(destination, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction writeStyleResourceAttributeInAttr(destination, name, value) // not null or undefined\n{\n  var attributeName = name.toLowerCase();\n  var attributeValue;\n\n  switch (typeof value) {\n    case 'function':\n    case 'symbol':\n      return;\n  }\n\n  switch (name) {\n    // Reserved names\n    case 'innerHTML':\n    case 'dangerouslySetInnerHTML':\n    case 'suppressContentEditableWarning':\n    case 'suppressHydrationWarning':\n    case 'style':\n    case 'ref':\n      // Ignored\n      return;\n    // Attribute renames\n\n    case 'className':\n      {\n        attributeName = 'class';\n\n        {\n          checkAttributeStringCoercion(value, attributeName);\n        }\n\n        attributeValue = '' + value;\n        break;\n      }\n    // Booleans\n\n    case 'hidden':\n      {\n        if (value === false) {\n          return;\n        }\n\n        attributeValue = '';\n        break;\n      }\n    // Santized URLs\n\n    case 'src':\n    case 'href':\n      {\n        value = sanitizeURL(value);\n\n        {\n          checkAttributeStringCoercion(value, attributeName);\n        }\n\n        attributeValue = '' + value;\n        break;\n      }\n\n    default:\n      {\n        if ( // unrecognized event handlers are not SSR'd and we (apparently)\n        // use on* as hueristic for these handler props\n        name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {\n          return;\n        }\n\n        if (!isAttributeNameSafe(name)) {\n          return;\n        }\n\n        {\n          checkAttributeStringCoercion(value, attributeName);\n        }\n\n        attributeValue = '' + value;\n      }\n  }\n\n  writeChunk(destination, arrayInterstitial);\n  writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeName))));\n  writeChunk(destination, arrayInterstitial);\n  writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeValue))));\n}\n/**\n * Resources\n */\n\n\nvar PENDING$1 = 0;\nvar PRELOADED = 1;\nvar PREAMBLE = 2;\nvar LATE = 3;\nfunction createHoistableState() {\n  return {\n    styles: new Set(),\n    stylesheets: new Set()\n  };\n}\n\nfunction getResourceKey(href) {\n  return href;\n}\n\nfunction getImageResourceKey(href, imageSrcSet, imageSizes) {\n  if (imageSrcSet) {\n    return imageSrcSet + '\\n' + (imageSizes || '');\n  }\n\n  return href;\n}\n\nfunction prefetchDNS(href) {\n\n  var request = resolveRequest();\n\n  if (!request) {\n    // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n    // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n    // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n    // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n    // fetching) and we don't want to warn in those cases.\n    return;\n  }\n\n  var resumableState = getResumableState(request);\n  var renderState = getRenderState(request);\n\n  if (typeof href === 'string' && href) {\n    var key = getResourceKey(href);\n\n    if (!resumableState.dnsResources.hasOwnProperty(key)) {\n      resumableState.dnsResources[key] = EXISTS;\n      var headers = renderState.headers;\n      var header;\n\n      if (headers && headers.remainingCapacity > 0 && ( // Compute the header since we might be able to fit it in the max length\n      header = getPrefetchDNSAsHeader(href), // We always consume the header length since once we find one header that doesn't fit\n      // we assume all the rest won't as well. This is to avoid getting into a situation\n      // where we have a very small remaining capacity but no headers will ever fit and we end\n      // up constantly trying to see if the next resource might make it. In the future we can\n      // make this behavior different between render and prerender since in the latter case\n      // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n      // headers.\n      (headers.remainingCapacity -= header.length) >= 2)) {\n        // Store this as resettable in case we are prerendering and postpone in the Shell\n        renderState.resets.dns[key] = EXISTS;\n\n        if (headers.preconnects) {\n          headers.preconnects += ', ';\n        } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n\n\n        headers.preconnects += header;\n      } else {\n        // Encode as element\n        var resource = [];\n        pushLinkImpl(resource, {\n          href: href,\n          rel: 'dns-prefetch'\n        });\n        renderState.preconnects.add(resource);\n      }\n    }\n\n    flushResources(request);\n  }\n}\n\nfunction preconnect(href, crossOrigin) {\n\n  var request = resolveRequest();\n\n  if (!request) {\n    // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n    // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n    // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n    // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n    // fetching) and we don't want to warn in those cases.\n    return;\n  }\n\n  var resumableState = getResumableState(request);\n  var renderState = getRenderState(request);\n\n  if (typeof href === 'string' && href) {\n    var bucket = crossOrigin === 'use-credentials' ? 'credentials' : typeof crossOrigin === 'string' ? 'anonymous' : 'default';\n    var key = getResourceKey(href);\n\n    if (!resumableState.connectResources[bucket].hasOwnProperty(key)) {\n      resumableState.connectResources[bucket][key] = EXISTS;\n      var headers = renderState.headers;\n      var header;\n\n      if (headers && headers.remainingCapacity > 0 && ( // Compute the header since we might be able to fit it in the max length\n      header = getPreconnectAsHeader(href, crossOrigin), // We always consume the header length since once we find one header that doesn't fit\n      // we assume all the rest won't as well. This is to avoid getting into a situation\n      // where we have a very small remaining capacity but no headers will ever fit and we end\n      // up constantly trying to see if the next resource might make it. In the future we can\n      // make this behavior different between render and prerender since in the latter case\n      // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n      // headers.\n      (headers.remainingCapacity -= header.length) >= 2)) {\n        // Store this in resettableState in case we are prerending and postpone in the Shell\n        renderState.resets.connect[bucket][key] = EXISTS;\n\n        if (headers.preconnects) {\n          headers.preconnects += ', ';\n        } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n\n\n        headers.preconnects += header;\n      } else {\n        var resource = [];\n        pushLinkImpl(resource, {\n          rel: 'preconnect',\n          href: href,\n          crossOrigin: crossOrigin\n        });\n        renderState.preconnects.add(resource);\n      }\n    }\n\n    flushResources(request);\n  }\n}\n\nfunction preload(href, as, options) {\n\n  var request = resolveRequest();\n\n  if (!request) {\n    // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n    // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n    // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n    // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n    // fetching) and we don't want to warn in those cases.\n    return;\n  }\n\n  var resumableState = getResumableState(request);\n  var renderState = getRenderState(request);\n\n  if (as && href) {\n    switch (as) {\n      case 'image':\n        {\n          var imageSrcSet, imageSizes, fetchPriority;\n\n          if (options) {\n            imageSrcSet = options.imageSrcSet;\n            imageSizes = options.imageSizes;\n            fetchPriority = options.fetchPriority;\n          }\n\n          var key = getImageResourceKey(href, imageSrcSet, imageSizes);\n\n          if (resumableState.imageResources.hasOwnProperty(key)) {\n            // we can return if we already have this resource\n            return;\n          }\n\n          resumableState.imageResources[key] = PRELOAD_NO_CREDS;\n          var headers = renderState.headers;\n          var header;\n\n          if (headers && headers.remainingCapacity > 0 && fetchPriority === 'high' && ( // Compute the header since we might be able to fit it in the max length\n          header = getPreloadAsHeader(href, as, options), // We always consume the header length since once we find one header that doesn't fit\n          // we assume all the rest won't as well. This is to avoid getting into a situation\n          // where we have a very small remaining capacity but no headers will ever fit and we end\n          // up constantly trying to see if the next resource might make it. In the future we can\n          // make this behavior different between render and prerender since in the latter case\n          // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n          // headers.\n          (headers.remainingCapacity -= header.length) >= 2)) {\n            // If we postpone in the shell we will still emit a preload as a header so we\n            // track this to make sure we don't reset it.\n            renderState.resets.image[key] = PRELOAD_NO_CREDS;\n\n            if (headers.highImagePreloads) {\n              headers.highImagePreloads += ', ';\n            } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n\n\n            headers.highImagePreloads += header;\n          } else {\n            // If we don't have headers to write to we have to encode as elements to flush in the head\n            // When we have imageSrcSet the browser probably cannot load the right version from headers\n            // (this should be verified by testing). For now we assume these need to go in the head\n            // as elements even if headers are available.\n            var resource = [];\n            pushLinkImpl(resource, assign({\n              rel: 'preload',\n              // There is a bug in Safari where imageSrcSet is not respected on preload links\n              // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n              // This harms older browers that do not support imageSrcSet by making their preloads not work\n              // but this population is shrinking fast and is already small so we accept this tradeoff.\n              href: imageSrcSet ? undefined : href,\n              as: as\n            }, options));\n\n            if (fetchPriority === 'high') {\n              renderState.highImagePreloads.add(resource);\n            } else {\n              renderState.bulkPreloads.add(resource); // Stash the resource in case we need to promote it to higher priority\n              // when an img tag is rendered\n\n              renderState.preloads.images.set(key, resource);\n            }\n          }\n\n          break;\n        }\n\n      case 'style':\n        {\n          var _key = getResourceKey(href);\n\n          if (resumableState.styleResources.hasOwnProperty(_key)) {\n            // we can return if we already have this resource\n            return;\n          }\n\n          var _resource2 = [];\n          pushLinkImpl(_resource2, assign({\n            rel: 'preload',\n            href: href,\n            as: as\n          }, options));\n          resumableState.styleResources[_key] = options && (typeof options.crossOrigin === 'string' || typeof options.integrity === 'string') ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;\n          renderState.preloads.stylesheets.set(_key, _resource2);\n          renderState.bulkPreloads.add(_resource2);\n          break;\n        }\n\n      case 'script':\n        {\n          var _key2 = getResourceKey(href);\n\n          if (resumableState.scriptResources.hasOwnProperty(_key2)) {\n            // we can return if we already have this resource\n            return;\n          }\n\n          var _resource3 = [];\n          renderState.preloads.scripts.set(_key2, _resource3);\n          renderState.bulkPreloads.add(_resource3);\n          pushLinkImpl(_resource3, assign({\n            rel: 'preload',\n            href: href,\n            as: as\n          }, options));\n          resumableState.scriptResources[_key2] = options && (typeof options.crossOrigin === 'string' || typeof options.integrity === 'string') ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;\n          break;\n        }\n\n      default:\n        {\n          var _key3 = getResourceKey(href);\n\n          var hasAsType = resumableState.unknownResources.hasOwnProperty(as);\n          var resources;\n\n          if (hasAsType) {\n            resources = resumableState.unknownResources[as];\n\n            if (resources.hasOwnProperty(_key3)) {\n              // we can return if we already have this resource\n              return;\n            }\n          } else {\n            resources = {};\n            resumableState.unknownResources[as] = resources;\n          }\n\n          resources[_key3] = PRELOAD_NO_CREDS;\n          var _headers = renderState.headers;\n\n          var _header;\n\n          if (_headers && _headers.remainingCapacity > 0 && as === 'font' && ( // We compute the header here because we might be able to fit it in the max length\n          _header = getPreloadAsHeader(href, as, options), // We always consume the header length since once we find one header that doesn't fit\n          // we assume all the rest won't as well. This is to avoid getting into a situation\n          // where we have a very small remaining capacity but no headers will ever fit and we end\n          // up constantly trying to see if the next resource might make it. In the future we can\n          // make this behavior different between render and prerender since in the latter case\n          // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n          // headers.\n          (_headers.remainingCapacity -= _header.length) >= 2)) {\n            // If we postpone in the shell we will still emit this preload so we\n            // track it here to prevent it from being reset.\n            renderState.resets.font[_key3] = PRELOAD_NO_CREDS;\n\n            if (_headers.fontPreloads) {\n              _headers.fontPreloads += ', ';\n            } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n\n\n            _headers.fontPreloads += _header;\n          } else {\n            // We either don't have headers or we are preloading something that does\n            // not warrant elevated priority so we encode as an element.\n            var _resource4 = [];\n\n            var props = assign({\n              rel: 'preload',\n              href: href,\n              as: as\n            }, options);\n\n            pushLinkImpl(_resource4, props);\n\n            switch (as) {\n              case 'font':\n                renderState.fontPreloads.add(_resource4);\n                break;\n              // intentional fall through\n\n              default:\n                renderState.bulkPreloads.add(_resource4);\n            }\n          }\n        }\n    } // If we got this far we created a new resource\n\n\n    flushResources(request);\n  }\n}\n\nfunction preloadModule(href, options) {\n\n  var request = resolveRequest();\n\n  if (!request) {\n    // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n    // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n    // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n    // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n    // fetching) and we don't want to warn in those cases.\n    return;\n  }\n\n  var resumableState = getResumableState(request);\n  var renderState = getRenderState(request);\n\n  if (href) {\n    var key = getResourceKey(href);\n    var as = options && typeof options.as === 'string' ? options.as : 'script';\n    var resource;\n\n    switch (as) {\n      case 'script':\n        {\n          if (resumableState.moduleScriptResources.hasOwnProperty(key)) {\n            // we can return if we already have this resource\n            return;\n          }\n\n          resource = [];\n          resumableState.moduleScriptResources[key] = options && (typeof options.crossOrigin === 'string' || typeof options.integrity === 'string') ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;\n          renderState.preloads.moduleScripts.set(key, resource);\n          break;\n        }\n\n      default:\n        {\n          var hasAsType = resumableState.moduleUnknownResources.hasOwnProperty(as);\n          var resources;\n\n          if (hasAsType) {\n            resources = resumableState.unknownResources[as];\n\n            if (resources.hasOwnProperty(key)) {\n              // we can return if we already have this resource\n              return;\n            }\n          } else {\n            resources = {};\n            resumableState.moduleUnknownResources[as] = resources;\n          }\n\n          resource = [];\n          resources[key] = PRELOAD_NO_CREDS;\n        }\n    }\n\n    pushLinkImpl(resource, assign({\n      rel: 'modulepreload',\n      href: href\n    }, options));\n    renderState.bulkPreloads.add(resource); // If we got this far we created a new resource\n\n    flushResources(request);\n  }\n}\n\nfunction preinitStyle(href, precedence, options) {\n\n  var request = resolveRequest();\n\n  if (!request) {\n    // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n    // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n    // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n    // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n    // fetching) and we don't want to warn in those cases.\n    return;\n  }\n\n  var resumableState = getResumableState(request);\n  var renderState = getRenderState(request);\n\n  if (href) {\n    precedence = precedence || 'default';\n    var key = getResourceKey(href);\n    var styleQueue = renderState.styles.get(precedence);\n    var hasKey = resumableState.styleResources.hasOwnProperty(key);\n    var resourceState = hasKey ? resumableState.styleResources[key] : undefined;\n\n    if (resourceState !== EXISTS) {\n      // We are going to create this resource now so it is marked as Exists\n      resumableState.styleResources[key] = EXISTS; // If this is the first time we've encountered this precedence we need\n      // to create a StyleQueue\n\n      if (!styleQueue) {\n        styleQueue = {\n          precedence: stringToChunk(escapeTextForBrowser(precedence)),\n          rules: [],\n          hrefs: [],\n          sheets: new Map()\n        };\n        renderState.styles.set(precedence, styleQueue);\n      }\n\n      var resource = {\n        state: PENDING$1,\n        props: assign({\n          rel: 'stylesheet',\n          href: href,\n          'data-precedence': precedence\n        }, options)\n      };\n\n      if (resourceState) {\n        // When resourceState is truty it is a Preload state. We cast it for clarity\n        var preloadState = resourceState;\n\n        if (preloadState.length === 2) {\n          adoptPreloadCredentials(resource.props, preloadState);\n        }\n\n        var preloadResource = renderState.preloads.stylesheets.get(key);\n\n        if (preloadResource && preloadResource.length > 0) {\n          // The Preload for this resource was created in this render pass and has not flushed yet so\n          // we need to clear it to avoid it flushing.\n          preloadResource.length = 0;\n        } else {\n          // Either the preload resource from this render already flushed in this render pass\n          // or the preload flushed in a prior pass (prerender). In either case we need to mark\n          // this resource as already having been preloaded.\n          resource.state = PRELOADED;\n        }\n      } // We add the newly created resource to our StyleQueue and if necessary\n      // track the resource with the currently rendering boundary\n\n\n      styleQueue.sheets.set(key, resource); // Notify the request that there are resources to flush even if no work is currently happening\n\n      flushResources(request);\n    }\n  }\n}\n\nfunction preinitScript(src, options) {\n\n  var request = resolveRequest();\n\n  if (!request) {\n    // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n    // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n    // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n    // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n    // fetching) and we don't want to warn in those cases.\n    return;\n  }\n\n  var resumableState = getResumableState(request);\n  var renderState = getRenderState(request);\n\n  if (src) {\n    var key = getResourceKey(src);\n    var hasKey = resumableState.scriptResources.hasOwnProperty(key);\n    var resourceState = hasKey ? resumableState.scriptResources[key] : undefined;\n\n    if (resourceState !== EXISTS) {\n      // We are going to create this resource now so it is marked as Exists\n      resumableState.scriptResources[key] = EXISTS;\n\n      var props = assign({\n        src: src,\n        async: true\n      }, options);\n\n      if (resourceState) {\n        // When resourceState is truty it is a Preload state. We cast it for clarity\n        var preloadState = resourceState;\n\n        if (preloadState.length === 2) {\n          adoptPreloadCredentials(props, preloadState);\n        }\n\n        var preloadResource = renderState.preloads.scripts.get(key);\n\n        if (preloadResource) {\n          // the preload resource exists was created in this render. Now that we have\n          // a script resource which will emit earlier than a preload would if it\n          // hasn't already flushed we prevent it from flushing by zeroing the length\n          preloadResource.length = 0;\n        }\n      }\n\n      var resource = []; // Add to the script flushing queue\n\n      renderState.scripts.add(resource); // encode the tag as Chunks\n\n      pushScriptImpl(resource, props); // Notify the request that there are resources to flush even if no work is currently happening\n\n      flushResources(request);\n    }\n\n    return;\n  }\n}\n\nfunction preinitModuleScript(src, options) {\n\n  var request = resolveRequest();\n\n  if (!request) {\n    // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n    // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n    // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n    // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n    // fetching) and we don't want to warn in those cases.\n    return;\n  }\n\n  var resumableState = getResumableState(request);\n  var renderState = getRenderState(request);\n\n  if (src) {\n    var key = getResourceKey(src);\n    var hasKey = resumableState.moduleScriptResources.hasOwnProperty(key);\n    var resourceState = hasKey ? resumableState.moduleScriptResources[key] : undefined;\n\n    if (resourceState !== EXISTS) {\n      // We are going to create this resource now so it is marked as Exists\n      resumableState.moduleScriptResources[key] = EXISTS;\n\n      var props = assign({\n        src: src,\n        type: 'module',\n        async: true\n      }, options);\n\n      if (resourceState) {\n        // When resourceState is truty it is a Preload state. We cast it for clarity\n        var preloadState = resourceState;\n\n        if (preloadState.length === 2) {\n          adoptPreloadCredentials(props, preloadState);\n        }\n\n        var preloadResource = renderState.preloads.moduleScripts.get(key);\n\n        if (preloadResource) {\n          // the preload resource exists was created in this render. Now that we have\n          // a script resource which will emit earlier than a preload would if it\n          // hasn't already flushed we prevent it from flushing by zeroing the length\n          preloadResource.length = 0;\n        }\n      }\n\n      var resource = []; // Add to the script flushing queue\n\n      renderState.scripts.add(resource); // encode the tag as Chunks\n\n      pushScriptImpl(resource, props); // Notify the request that there are resources to flush even if no work is currently happening\n\n      flushResources(request);\n    }\n\n    return;\n  }\n} // This function is only safe to call at Request start time since it assumes\n// that each module has not already been preloaded. If we find a need to preload\n// scripts at any other point in time we will need to check whether the preload\n// already exists and not assume it\n\n\nfunction preloadBootstrapScriptOrModule(resumableState, renderState, href, props) {\n\n  var key = getResourceKey(href);\n\n  {\n    if (resumableState.scriptResources.hasOwnProperty(key) || resumableState.moduleScriptResources.hasOwnProperty(key)) {\n      // This is coded as a React error because it should be impossible for a userspace preload to preempt this call\n      // If a userspace preload can preempt it then this assumption is broken and we need to reconsider this strategy\n      // rather than instruct the user to not preload their bootstrap scripts themselves\n      error('Internal React Error: React expected bootstrap script or module with src \"%s\" to not have been preloaded already. please file an issue', href);\n    }\n  } // The href used for bootstrap scripts and bootstrap modules should never be\n  // used to preinit the resource. If a script can be preinited then it shouldn't\n  // be a bootstrap script/module and if it is a bootstrap script/module then it\n  // must not be safe to emit early. To avoid possibly allowing for preinits of\n  // bootstrap scripts/modules we occlude these keys.\n\n\n  resumableState.scriptResources[key] = EXISTS;\n  resumableState.moduleScriptResources[key] = EXISTS;\n  var resource = [];\n  pushLinkImpl(resource, props);\n  renderState.bootstrapScripts.add(resource);\n}\n\nfunction internalPreinitScript(resumableState, renderState, src, chunks) {\n  var key = getResourceKey(src);\n\n  if (!resumableState.scriptResources.hasOwnProperty(key)) {\n    var resource = chunks;\n    resumableState.scriptResources[key] = EXISTS;\n    renderState.scripts.add(resource);\n  }\n\n  return;\n}\n\nfunction preloadAsStylePropsFromProps(href, props) {\n  return {\n    rel: 'preload',\n    as: 'style',\n    href: href,\n    crossOrigin: props.crossOrigin,\n    fetchPriority: props.fetchPriority,\n    integrity: props.integrity,\n    media: props.media,\n    hrefLang: props.hrefLang,\n    referrerPolicy: props.referrerPolicy\n  };\n}\n\nfunction stylesheetPropsFromRawProps(rawProps) {\n  return assign({}, rawProps, {\n    'data-precedence': rawProps.precedence,\n    precedence: null\n  });\n}\n\nfunction adoptPreloadCredentials(target, preloadState) {\n  if (target.crossOrigin == null) target.crossOrigin = preloadState[0];\n  if (target.integrity == null) target.integrity = preloadState[1];\n}\n\nfunction getPrefetchDNSAsHeader(href) {\n  var escapedHref = escapeHrefForLinkHeaderURLContext(href);\n  return \"<\" + escapedHref + \">; rel=dns-prefetch\";\n}\n\nfunction getPreconnectAsHeader(href, crossOrigin) {\n  var escapedHref = escapeHrefForLinkHeaderURLContext(href);\n  var value = \"<\" + escapedHref + \">; rel=preconnect\";\n\n  if (typeof crossOrigin === 'string') {\n    var escapedCrossOrigin = escapeStringForLinkHeaderQuotedParamValueContext(crossOrigin, 'crossOrigin');\n    value += \"; crossorigin=\\\"\" + escapedCrossOrigin + \"\\\"\";\n  }\n\n  return value;\n}\n\nfunction getPreloadAsHeader(href, as, params) {\n  var escapedHref = escapeHrefForLinkHeaderURLContext(href);\n  var escapedAs = escapeStringForLinkHeaderQuotedParamValueContext(as, 'as');\n  var value = \"<\" + escapedHref + \">; rel=preload; as=\\\"\" + escapedAs + \"\\\"\";\n\n  for (var paramName in params) {\n    if (hasOwnProperty.call(params, paramName)) {\n      var paramValue = params[paramName];\n\n      if (typeof paramValue === 'string') {\n        value += \"; \" + paramName.toLowerCase() + \"=\\\"\" + escapeStringForLinkHeaderQuotedParamValueContext(paramValue, paramName) + \"\\\"\";\n      }\n    }\n  }\n\n  return value;\n}\n\nfunction getStylesheetPreloadAsHeader(stylesheet) {\n  var props = stylesheet.props;\n  var preloadOptions = {\n    crossOrigin: props.crossOrigin,\n    integrity: props.integrity,\n    nonce: props.nonce,\n    type: props.type,\n    fetchPriority: props.fetchPriority,\n    referrerPolicy: props.referrerPolicy,\n    media: props.media\n  };\n  return getPreloadAsHeader(props.href, 'style', preloadOptions);\n} // This escaping function is only safe to use for href values being written into\n// a \"Link\" header in between `<` and `>` characters. The primary concern with the href is\n// to escape the bounding characters as well as new lines. This is unsafe to use in any other\n// context\n\n\nvar regexForHrefInLinkHeaderURLContext = /[<>\\r\\n]/g;\n\nfunction escapeHrefForLinkHeaderURLContext(hrefInput) {\n  {\n    checkAttributeStringCoercion(hrefInput, 'href');\n  }\n\n  var coercedHref = '' + hrefInput;\n  return coercedHref.replace(regexForHrefInLinkHeaderURLContext, escapeHrefForLinkHeaderURLContextReplacer);\n}\n\nfunction escapeHrefForLinkHeaderURLContextReplacer(match) {\n  switch (match) {\n    case '<':\n      return '%3C';\n\n    case '>':\n      return '%3E';\n\n    case '\\n':\n      return '%0A';\n\n    case '\\r':\n      return '%0D';\n\n    default:\n      {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('escapeLinkHrefForHeaderContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React');\n      }\n  }\n} // This escaping function is only safe to use for quoted param values in an HTTP header.\n// It is unsafe to use for any value not inside quote marks in parater value position.\n\n\nvar regexForLinkHeaderQuotedParamValueContext = /[\"';,\\r\\n]/g;\n\nfunction escapeStringForLinkHeaderQuotedParamValueContext(value, name) {\n  {\n    checkOptionStringCoercion(value, name);\n  }\n\n  var coerced = '' + value;\n  return coerced.replace(regexForLinkHeaderQuotedParamValueContext, escapeStringForLinkHeaderQuotedParamValueContextReplacer);\n}\n\nfunction escapeStringForLinkHeaderQuotedParamValueContextReplacer(match) {\n  switch (match) {\n    case '\"':\n      return '%22';\n\n    case \"'\":\n      return '%27';\n\n    case ';':\n      return '%3B';\n\n    case ',':\n      return '%2C';\n\n    case '\\n':\n      return '%0A';\n\n    case '\\r':\n      return '%0D';\n\n    default:\n      {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('escapeStringForLinkHeaderQuotedParamValueContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React');\n      }\n  }\n}\n\nfunction hoistStyleQueueDependency(styleQueue) {\n  this.styles.add(styleQueue);\n}\n\nfunction hoistStylesheetDependency(stylesheet) {\n  this.stylesheets.add(stylesheet);\n}\n\nfunction hoistHoistables(parentState, childState) {\n  childState.styles.forEach(hoistStyleQueueDependency, parentState);\n  childState.stylesheets.forEach(hoistStylesheetDependency, parentState);\n} // This function is called at various times depending on whether we are rendering\n// or prerendering. In this implementation we only actually emit headers once and\n// subsequent calls are ignored. We track whether the request has a completed shell\n// to determine whether we will follow headers with a flush including stylesheets.\n// In the context of prerrender we don't have a completed shell when the request finishes\n// with a postpone in the shell. In the context of a render we don't have a completed shell\n// if this is called before the shell finishes rendering which usually will happen anytime\n// anything suspends in the shell.\n\nfunction emitEarlyPreloads(renderState, resumableState, shellComplete) {\n  var onHeaders = renderState.onHeaders;\n\n  if (onHeaders) {\n    var headers = renderState.headers;\n\n    if (headers) {\n      // Even if onHeaders throws we don't want to call this again so\n      // we drop the headers state from this point onwards.\n      renderState.headers = null;\n      var linkHeader = headers.preconnects;\n\n      if (headers.fontPreloads) {\n        if (linkHeader) {\n          linkHeader += ', ';\n        }\n\n        linkHeader += headers.fontPreloads;\n      }\n\n      if (headers.highImagePreloads) {\n        if (linkHeader) {\n          linkHeader += ', ';\n        }\n\n        linkHeader += headers.highImagePreloads;\n      }\n\n      if (!shellComplete) {\n        // We use raw iterators because we want to be able to halt iteration\n        // We could refactor renderState to store these dually in arrays to\n        // make this more efficient at the cost of additional memory and\n        // write overhead. However this code only runs once per request so\n        // for now I consider this sufficient.\n        var queueIter = renderState.styles.values();\n\n        outer: for (var queueStep = queueIter.next(); headers.remainingCapacity > 0 && !queueStep.done; queueStep = queueIter.next()) {\n          var sheets = queueStep.value.sheets;\n          var sheetIter = sheets.values();\n\n          for (var sheetStep = sheetIter.next(); headers.remainingCapacity > 0 && !sheetStep.done; sheetStep = sheetIter.next()) {\n            var sheet = sheetStep.value;\n            var props = sheet.props;\n            var key = getResourceKey(props.href);\n            var header = getStylesheetPreloadAsHeader(sheet); // We mutate the capacity b/c we don't want to keep checking if later headers will fit.\n            // This means that a particularly long header might close out the header queue where later\n            // headers could still fit. We could in the future alter the behavior here based on prerender vs render\n            // since during prerender we aren't as concerned with pure runtime performance.\n\n            if ((headers.remainingCapacity -= header.length) >= 2) {\n              renderState.resets.style[key] = PRELOAD_NO_CREDS;\n\n              if (linkHeader) {\n                linkHeader += ', ';\n              }\n\n              linkHeader += header; // We already track that the resource exists in resumableState however\n              // if the resumableState resets because we postponed in the shell\n              // which is what is happening in this branch if we are prerendering\n              // then we will end up resetting the resumableState. When it resets we\n              // want to record the fact that this stylesheet was already preloaded\n\n              renderState.resets.style[key] = typeof props.crossOrigin === 'string' || typeof props.integrity === 'string' ? [props.crossOrigin, props.integrity] : PRELOAD_NO_CREDS;\n            } else {\n              break outer;\n            }\n          }\n        }\n      }\n\n      if (linkHeader) {\n        onHeaders({\n          Link: linkHeader\n        });\n      } else {\n        // We still call this with no headers because a user may be using it as a signal that\n        // it React will not provide any headers\n        onHeaders({});\n      }\n\n      return;\n    }\n  }\n}\n\nfunction createRenderState(resumableState, generateStaticMarkup) {\n  var renderState = createRenderState$1(resumableState, undefined, undefined, undefined, undefined, undefined);\n  return {\n    // Keep this in sync with ReactFizzConfigDOM\n    placeholderPrefix: renderState.placeholderPrefix,\n    segmentPrefix: renderState.segmentPrefix,\n    boundaryPrefix: renderState.boundaryPrefix,\n    startInlineScript: renderState.startInlineScript,\n    htmlChunks: renderState.htmlChunks,\n    headChunks: renderState.headChunks,\n    externalRuntimeScript: renderState.externalRuntimeScript,\n    bootstrapChunks: renderState.bootstrapChunks,\n    importMapChunks: renderState.importMapChunks,\n    onHeaders: renderState.onHeaders,\n    headers: renderState.headers,\n    resets: renderState.resets,\n    charsetChunks: renderState.charsetChunks,\n    viewportChunks: renderState.viewportChunks,\n    hoistableChunks: renderState.hoistableChunks,\n    preconnects: renderState.preconnects,\n    fontPreloads: renderState.fontPreloads,\n    highImagePreloads: renderState.highImagePreloads,\n    // usedImagePreloads: renderState.usedImagePreloads,\n    styles: renderState.styles,\n    bootstrapScripts: renderState.bootstrapScripts,\n    scripts: renderState.scripts,\n    bulkPreloads: renderState.bulkPreloads,\n    preloads: renderState.preloads,\n    stylesToHoist: renderState.stylesToHoist,\n    // This is an extra field for the legacy renderer\n    generateStaticMarkup: generateStaticMarkup\n  };\n}\n\nvar doctypeChunk = stringToPrecomputedChunk('');\nfunction pushTextInstance(target, text, renderState, textEmbedded) {\n  if (renderState.generateStaticMarkup) {\n    target.push(stringToChunk(escapeTextForBrowser(text)));\n    return false;\n  } else {\n    return pushTextInstance$1(target, text, renderState, textEmbedded);\n  }\n}\nfunction pushSegmentFinale(target, renderState, lastPushedText, textEmbedded) {\n  if (renderState.generateStaticMarkup) {\n    return;\n  } else {\n    return pushSegmentFinale$1(target, renderState, lastPushedText, textEmbedded);\n  }\n}\nfunction writeStartCompletedSuspenseBoundary(destination, renderState) {\n  if (renderState.generateStaticMarkup) {\n    // A completed boundary is done and doesn't need a representation in the HTML\n    // if we're not going to be hydrating it.\n    return true;\n  }\n\n  return writeStartCompletedSuspenseBoundary$1(destination);\n}\nfunction writeStartClientRenderedSuspenseBoundary(destination, renderState, // flushing these error arguments are not currently supported in this legacy streaming format.\nerrorDigest, errorMessage, errorComponentStack) {\n  if (renderState.generateStaticMarkup) {\n    // A client rendered boundary is done and doesn't need a representation in the HTML\n    // since we'll never hydrate it. This is arguably an error in static generation.\n    return true;\n  }\n\n  return writeStartClientRenderedSuspenseBoundary$1(destination, renderState, errorDigest, errorMessage, errorComponentStack);\n}\nfunction writeEndCompletedSuspenseBoundary(destination, renderState) {\n  if (renderState.generateStaticMarkup) {\n    return true;\n  }\n\n  return writeEndCompletedSuspenseBoundary$1(destination);\n}\nfunction writeEndClientRenderedSuspenseBoundary(destination, renderState) {\n  if (renderState.generateStaticMarkup) {\n    return true;\n  }\n\n  return writeEndClientRenderedSuspenseBoundary$1(destination);\n}\nvar NotPendingTransition = NotPending;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\nvar warnedAboutMissingGetChildContext;\n\n{\n  warnedAboutMissingGetChildContext = {};\n}\n\nvar emptyContextObject = {};\n\n{\n  Object.freeze(emptyContextObject);\n}\n\nfunction getMaskedContext(type, unmaskedContext) {\n  {\n    var contextTypes = type.contextTypes;\n\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    var context = {};\n\n    for (var key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    return context;\n  }\n}\nfunction processChildContext(instance, type, parentContext, childContextTypes) {\n  {\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      {\n        var componentName = getComponentNameFromType(type) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n\n          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n        }\n      }\n\n      return parentContext;\n    }\n\n    var childContext = instance.getChildContext();\n\n    for (var contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        throw new Error((getComponentNameFromType(type) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\");\n      }\n    }\n\n    return assign({}, parentContext, childContext);\n  }\n}\n\nvar rendererSigil;\n\n{\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n} // Used to store the parent path of all context overrides in a shared linked list.\n// Forming a reverse tree.\n// The structure of a context snapshot is an implementation of this file.\n// Currently, it's implemented as tracking the current active node.\n\n\nvar rootContextSnapshot = null; // We assume that this runtime owns the \"current\" field on all ReactContext instances.\n// This global (actually thread local) state represents what state all those \"current\",\n// fields are currently in.\n\nvar currentActiveSnapshot = null;\n\nfunction popNode(prev) {\n  {\n    prev.context._currentValue2 = prev.parentValue;\n  }\n}\n\nfunction pushNode(next) {\n  {\n    next.context._currentValue2 = next.value;\n  }\n}\n\nfunction popToNearestCommonAncestor(prev, next) {\n  if (prev === next) ; else {\n    popNode(prev);\n    var parentPrev = prev.parent;\n    var parentNext = next.parent;\n\n    if (parentPrev === null) {\n      if (parentNext !== null) {\n        throw new Error('The stacks must reach the root at the same time. This is a bug in React.');\n      }\n    } else {\n      if (parentNext === null) {\n        throw new Error('The stacks must reach the root at the same time. This is a bug in React.');\n      }\n\n      popToNearestCommonAncestor(parentPrev, parentNext);\n    } // On the way back, we push the new ones that weren't common.\n\n\n    pushNode(next);\n  }\n}\n\nfunction popAllPrevious(prev) {\n  popNode(prev);\n  var parentPrev = prev.parent;\n\n  if (parentPrev !== null) {\n    popAllPrevious(parentPrev);\n  }\n}\n\nfunction pushAllNext(next) {\n  var parentNext = next.parent;\n\n  if (parentNext !== null) {\n    pushAllNext(parentNext);\n  }\n\n  pushNode(next);\n}\n\nfunction popPreviousToCommonLevel(prev, next) {\n  popNode(prev);\n  var parentPrev = prev.parent;\n\n  if (parentPrev === null) {\n    throw new Error('The depth must equal at least at zero before reaching the root. This is a bug in React.');\n  }\n\n  if (parentPrev.depth === next.depth) {\n    // We found the same level. Now we just need to find a shared ancestor.\n    popToNearestCommonAncestor(parentPrev, next);\n  } else {\n    // We must still be deeper.\n    popPreviousToCommonLevel(parentPrev, next);\n  }\n}\n\nfunction popNextToCommonLevel(prev, next) {\n  var parentNext = next.parent;\n\n  if (parentNext === null) {\n    throw new Error('The depth must equal at least at zero before reaching the root. This is a bug in React.');\n  }\n\n  if (prev.depth === parentNext.depth) {\n    // We found the same level. Now we just need to find a shared ancestor.\n    popToNearestCommonAncestor(prev, parentNext);\n  } else {\n    // We must still be deeper.\n    popNextToCommonLevel(prev, parentNext);\n  }\n\n  pushNode(next);\n} // Perform context switching to the new snapshot.\n// To make it cheap to read many contexts, while not suspending, we make the switch eagerly by\n// updating all the context's current values. That way reads, always just read the current value.\n// At the cost of updating contexts even if they're never read by this subtree.\n\n\nfunction switchContext(newSnapshot) {\n  // The basic algorithm we need to do is to pop back any contexts that are no longer on the stack.\n  // We also need to update any new contexts that are now on the stack with the deepest value.\n  // The easiest way to update new contexts is to just reapply them in reverse order from the\n  // perspective of the backpointers. To avoid allocating a lot when switching, we use the stack\n  // for that. Therefore this algorithm is recursive.\n  // 1) First we pop which ever snapshot tree was deepest. Popping old contexts as we go.\n  // 2) Then we find the nearest common ancestor from there. Popping old contexts as we go.\n  // 3) Then we reapply new contexts on the way back up the stack.\n  var prev = currentActiveSnapshot;\n  var next = newSnapshot;\n\n  if (prev !== next) {\n    if (prev === null) {\n      // $FlowFixMe[incompatible-call]: This has to be non-null since it's not equal to prev.\n      pushAllNext(next);\n    } else if (next === null) {\n      popAllPrevious(prev);\n    } else if (prev.depth === next.depth) {\n      popToNearestCommonAncestor(prev, next);\n    } else if (prev.depth > next.depth) {\n      popPreviousToCommonLevel(prev, next);\n    } else {\n      popNextToCommonLevel(prev, next);\n    }\n\n    currentActiveSnapshot = next;\n  }\n}\nfunction pushProvider(context, nextValue) {\n  var prevValue;\n\n  {\n    prevValue = context._currentValue2;\n    context._currentValue2 = nextValue;\n\n    {\n      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n\n  var prevNode = currentActiveSnapshot;\n  var newNode = {\n    parent: prevNode,\n    depth: prevNode === null ? 0 : prevNode.depth + 1,\n    context: context,\n    parentValue: prevValue,\n    value: nextValue\n  };\n  currentActiveSnapshot = newNode;\n  return newNode;\n}\nfunction popProvider(context) {\n  var prevSnapshot = currentActiveSnapshot;\n\n  if (prevSnapshot === null) {\n    throw new Error('Tried to pop a Context at the root of the app. This is a bug in React.');\n  }\n\n  {\n    if (prevSnapshot.context !== context) {\n      error('The parent context is not the expected context. This is probably a bug in React.');\n    }\n  }\n\n  {\n    var _value = prevSnapshot.parentValue;\n    prevSnapshot.context._currentValue2 = _value;\n\n    {\n      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n\n  return currentActiveSnapshot = prevSnapshot.parent;\n}\nfunction getActiveContext() {\n  return currentActiveSnapshot;\n}\nfunction readContext$1(context) {\n  var value = context._currentValue2;\n  return value;\n}\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\nfunction get(key) {\n  return key._reactInternals;\n}\nfunction set(key, value) {\n  key._reactInternals = value;\n}\n\nvar didWarnAboutNoopUpdateForComponent = {};\nvar didWarnAboutDeprecatedWillMount = {};\nvar didWarnAboutUninitializedState;\nvar didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nvar didWarnAboutLegacyLifecyclesAndDerivedState;\nvar didWarnAboutUndefinedDerivedState;\nvar didWarnAboutDirectlyAssigningPropsToState;\nvar didWarnAboutContextTypeAndContextTypes;\nvar didWarnAboutInvalidateContextType;\nvar didWarnOnInvalidCallback;\n\n{\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n  didWarnOnInvalidCallback = new Set();\n}\n\nfunction warnOnInvalidCallback(callback) {\n  {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var key = String(callback);\n\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n\n      error('Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n    }\n  }\n}\n\nfunction warnOnUndefinedDerivedState(type, partialState) {\n  {\n    if (partialState === undefined) {\n      var componentName = getComponentNameFromType(type) || 'Component';\n\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n\n        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n      }\n    }\n  }\n}\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && getComponentNameFromType(_constructor) || 'ReactClass';\n    var warningKey = componentName + '.' + callerName;\n\n    if (didWarnAboutNoopUpdateForComponent[warningKey]) {\n      return;\n    }\n\n    error('Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op.\\n\\nPlease check the code for the %s component.', callerName, componentName);\n\n    didWarnAboutNoopUpdateForComponent[warningKey] = true;\n  }\n}\n\nvar classComponentUpdater = {\n  isMounted: function (inst) {\n    return false;\n  },\n  // $FlowFixMe[missing-local-annot]\n  enqueueSetState: function (inst, payload, callback) {\n    var internals = get(inst);\n\n    if (internals.queue === null) {\n      warnNoop(inst, 'setState');\n    } else {\n      internals.queue.push(payload);\n\n      {\n        if (callback !== undefined && callback !== null) {\n          warnOnInvalidCallback(callback);\n        }\n      }\n    }\n  },\n  enqueueReplaceState: function (inst, payload, callback) {\n    var internals = get(inst);\n    internals.replace = true;\n    internals.queue = [payload];\n\n    {\n      if (callback !== undefined && callback !== null) {\n        warnOnInvalidCallback(callback);\n      }\n    }\n  },\n  // $FlowFixMe[missing-local-annot]\n  enqueueForceUpdate: function (inst, callback) {\n    var internals = get(inst);\n\n    if (internals.queue === null) {\n      warnNoop(inst, 'forceUpdate');\n    } else {\n      {\n        if (callback !== undefined && callback !== null) {\n          warnOnInvalidCallback(callback);\n        }\n      }\n    }\n  }\n};\n\nfunction applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {\n  var partialState = getDerivedStateFromProps(nextProps, prevState);\n\n  {\n    warnOnUndefinedDerivedState(ctor, partialState);\n  } // Merge the partial state and the previous state.\n\n\n  var newState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n  return newState;\n}\n\nfunction constructClassInstance(ctor, props, maskedLegacyContext) {\n  var context = emptyContextObject;\n  var contextType = ctor.contextType;\n\n  {\n    if ('contextType' in ctor) {\n      var isValid = // Allow null for conditional declaration\n      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE;\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n        var addendum = '';\n\n        if (contextType === undefined) {\n          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_CONSUMER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n        }\n\n        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext$1(contextType);\n  } else {\n    context = maskedLegacyContext;\n  }\n\n  var instance = new ctor(props, context);\n\n  {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && (instance.state === null || instance.state === undefined)) {\n      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n\n        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n      }\n    } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n\n    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n      var foundWillMountName = null;\n      var foundWillReceivePropsName = null;\n      var foundWillUpdateName = null;\n\n      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n\n      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n\n      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n\n      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n        var _componentName = getComponentNameFromType(ctor) || 'Component';\n\n        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n\n          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n        }\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction checkClassInstance(instance, ctor, newProps) {\n  {\n    var name = getComponentNameFromType(ctor) || 'Component';\n    var renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        error('No `render` method found on the %s ' + 'instance: did you accidentally return an object from the constructor?', name);\n      } else {\n        error('No `render` method found on the %s ' + 'instance: you may have forgotten to define `render`.', name);\n      }\n    }\n\n    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n    }\n\n    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n    }\n\n    if (instance.propTypes) {\n      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n    }\n\n    if (instance.contextType) {\n      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n    }\n\n    {\n      if (instance.contextTypes) {\n        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n      }\n\n      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n\n        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n    }\n\n    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\n    }\n\n    if (typeof instance.componentDidUnmount === 'function') {\n      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n    }\n\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n    }\n\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n    }\n\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n    }\n\n    var hasMutatedProps = instance.props !== newProps;\n\n    if (instance.props !== undefined && hasMutatedProps) {\n      error('When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name);\n    }\n\n    if (instance.defaultProps) {\n      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n\n      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n    }\n\n    var state = instance.state;\n\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      error('%s.state: must be set to an object or null', name);\n    }\n\n    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n    }\n  }\n}\n\nfunction callComponentWillMount(type, instance) {\n  var oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    {\n      if (instance.componentWillMount.__suppressDeprecationWarning !== true) {\n        var componentName = getComponentNameFromType(type) || 'Unknown';\n\n        if (!didWarnAboutDeprecatedWillMount[componentName]) {\n          warn( // keep this warning in sync with ReactStrictModeWarning.js\n          'componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code from componentWillMount to componentDidMount (preferred in most cases) ' + 'or the constructor.\\n' + '\\nPlease update the following components: %s', componentName);\n\n          didWarnAboutDeprecatedWillMount[componentName] = true;\n        }\n      }\n    }\n\n    instance.componentWillMount();\n  }\n\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    {\n      error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentNameFromType(type) || 'Component');\n    }\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {\n  if (internalInstance.queue !== null && internalInstance.queue.length > 0) {\n    var oldQueue = internalInstance.queue;\n    var oldReplace = internalInstance.replace;\n    internalInstance.queue = null;\n    internalInstance.replace = false;\n\n    if (oldReplace && oldQueue.length === 1) {\n      inst.state = oldQueue[0];\n    } else {\n      var nextState = oldReplace ? oldQueue[0] : inst.state;\n      var dontMutate = true;\n\n      for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {\n        var partial = oldQueue[i];\n        var partialState = typeof partial === 'function' ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;\n\n        if (partialState != null) {\n          if (dontMutate) {\n            dontMutate = false;\n            nextState = assign({}, nextState, partialState);\n          } else {\n            assign(nextState, partialState);\n          }\n        }\n      }\n\n      inst.state = nextState;\n    }\n  } else {\n    internalInstance.queue = null;\n  }\n} // Invokes the mount life-cycles on a previously never rendered instance.\n\n\nfunction mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {\n  {\n    checkClassInstance(instance, ctor, newProps);\n  }\n\n  var initialState = instance.state !== undefined ? instance.state : null;\n  instance.updater = classComponentUpdater;\n  instance.props = newProps;\n  instance.state = initialState; // We don't bother initializing the refs object on the server, since we're not going to resolve them anyway.\n  // The internal instance will be used to manage updates that happen during this mount.\n\n  var internalInstance = {\n    queue: [],\n    replace: false\n  };\n  set(instance, internalInstance);\n  var contextType = ctor.contextType;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext$1(contextType);\n  } else {\n    instance.context = maskedLegacyContext;\n  }\n\n  {\n    if (instance.state === newProps) {\n      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n\n        error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n      }\n    }\n  }\n\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);\n  } // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\n  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n    callComponentWillMount(ctor, instance); // If we had additional state updates during this life-cycle, let's\n    // process them now.\n\n    processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);\n  }\n}\n\n// Ids are base 32 strings whose binary representation corresponds to the\n// position of a node in a tree.\n// Every time the tree forks into multiple children, we add additional bits to\n// the left of the sequence that represent the position of the child within the\n// current level of children.\n//\n//      00101       00010001011010101\n//      ╰─┬─╯       ╰───────┬───────╯\n//   Fork 5 of 20       Parent id\n//\n// The leading 0s are important. In the above example, you only need 3 bits to\n// represent slot 5. However, you need 5 bits to represent all the forks at\n// the current level, so we must account for the empty bits at the end.\n//\n// For this same reason, slots are 1-indexed instead of 0-indexed. Otherwise,\n// the zeroth id at a level would be indistinguishable from its parent.\n//\n// If a node has only one child, and does not materialize an id (i.e. does not\n// contain a useId hook), then we don't need to allocate any space in the\n// sequence. It's treated as a transparent indirection. For example, these two\n// trees produce the same ids:\n//\n// <>                          <>\n//   <Indirection>               <A />\n//     <A />                     <B />\n//   </Indirection>            </>\n//   <B />\n// </>\n//\n// However, we cannot skip any node that materializes an id. Otherwise, a parent\n// id that does not fork would be indistinguishable from its child id. For\n// example, this tree does not fork, but the parent and child must have\n// different ids.\n//\n// <Parent>\n//   <Child />\n// </Parent>\n//\n// To handle this scenario, every time we materialize an id, we allocate a\n// new level with a single slot. You can think of this as a fork with only one\n// prong, or an array of children with length 1.\n//\n// It's possible for the size of the sequence to exceed 32 bits, the max\n// size for bitwise operations. When this happens, we make more room by\n// converting the right part of the id to a string and storing it in an overflow\n// variable. We use a base 32 string representation, because 32 is the largest\n// power of 2 that is supported by toString(). We want the base to be large so\n// that the resulting ids are compact, and we want the base to be a power of 2\n// because every log2(base) bits corresponds to a single character, i.e. every\n// log2(32) = 5 bits. That means we can lop bits off the end 5 at a time without\n// affecting the final result.\nvar emptyTreeContext = {\n  id: 1,\n  overflow: ''\n};\nfunction getTreeId(context) {\n  var overflow = context.overflow;\n  var idWithLeadingBit = context.id;\n  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n  return id.toString(32) + overflow;\n}\nfunction pushTreeContext(baseContext, totalChildren, index) {\n  var baseIdWithLeadingBit = baseContext.id;\n  var baseOverflow = baseContext.overflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n  // of the id; we use it to account for leading 0s.\n\n  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n  var slot = index + 1;\n  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n  // consideration the leading 1 we use to mark the end of the sequence.\n\n  if (length > 30) {\n    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n    // This branch assumes the length of the base id is greater than 5; it won't\n    // work for smaller ids, because you need 5 bits per character.\n    //\n    // We encode the id in multiple steps: first the base id, then the\n    // remaining digits.\n    //\n    // Each 5 bit sequence corresponds to a single base 32 character. So for\n    // example, if the current id is 23 bits long, we can convert 20 of those\n    // bits into a string of 4 characters, with 3 bits left over.\n    //\n    // First calculate how many bits in the base id represent a complete\n    // sequence of characters.\n    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n\n    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n\n    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n\n    var restOfBaseId = baseId >> numberOfOverflowBits;\n    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n    // we made more room, this time it won't overflow.\n\n    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n    var restOfNewBits = slot << restOfBaseLength;\n    var id = restOfNewBits | restOfBaseId;\n    var overflow = newOverflow + baseOverflow;\n    return {\n      id: 1 << restOfLength | id,\n      overflow: overflow\n    };\n  } else {\n    // Normal path\n    var newBits = slot << baseLength;\n\n    var _id = newBits | baseId;\n\n    var _overflow = baseOverflow;\n    return {\n      id: 1 << length | _id,\n      overflow: _overflow\n    };\n  }\n}\n\nfunction getBitLength(number) {\n  return 32 - clz32(number);\n}\n\nfunction getLeadingBit(id) {\n  return 1 << getBitLength(id) - 1;\n} // TODO: Math.clz32 is supported in Node 12+. Maybe we can drop the fallback.\n\n\nvar clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\nvar log = Math.log;\nvar LN2 = Math.LN2;\n\nfunction clz32Fallback(x) {\n  var asUint = x >>> 0;\n\n  if (asUint === 0) {\n    return 32;\n  }\n\n  return 31 - (log(asUint) / LN2 | 0) | 0;\n}\n\n// Corresponds to ReactFiberWakeable and ReactFlightWakeable modules. Generally,\n// changes to one module should be reflected in the others.\n// TODO: Rename this module and the corresponding Fiber one to \"Thenable\"\n// instead of \"Wakeable\". Or some other more appropriate name.\n// An error that is thrown (e.g. by `use`) to trigger Suspense. If we\n// detect this is caught by userspace, we'll log a warning in development.\nvar SuspenseException = new Error(\"Suspense Exception: This is not a real error! It's an implementation \" + 'detail of `use` to interrupt the current render. You must either ' + 'rethrow it immediately, or move the `use` call outside of the ' + '`try/catch` block. Capturing without rethrowing will lead to ' + 'unexpected behavior.\\n\\n' + 'To handle async errors, wrap your component in an error boundary, or ' + \"call the promise's `.catch` method and pass the result to `use`\");\nfunction createThenableState() {\n  // The ThenableState is created the first time a component suspends. If it\n  // suspends again, we'll reuse the same state.\n  return [];\n}\n\nfunction noop$2() {}\n\nfunction trackUsedThenable(thenableState, thenable, index) {\n  var previous = thenableState[index];\n\n  if (previous === undefined) {\n    thenableState.push(thenable);\n  } else {\n    if (previous !== thenable) {\n      // Reuse the previous thenable, and drop the new one. We can assume\n      // they represent the same value, because components are idempotent.\n      // Avoid an unhandled rejection errors for the Promises that we'll\n      // intentionally ignore.\n      thenable.then(noop$2, noop$2);\n      thenable = previous;\n    }\n  } // We use an expando to track the status and result of a thenable so that we\n  // can synchronously unwrap the value. Think of this as an extension of the\n  // Promise API, or a custom interface that is a superset of Thenable.\n  //\n  // If the thenable doesn't have a status, set it to \"pending\" and attach\n  // a listener that will update its status and result when it resolves.\n\n\n  switch (thenable.status) {\n    case 'fulfilled':\n      {\n        var fulfilledValue = thenable.value;\n        return fulfilledValue;\n      }\n\n    case 'rejected':\n      {\n        var rejectedError = thenable.reason;\n        throw rejectedError;\n      }\n\n    default:\n      {\n        if (typeof thenable.status === 'string') ; else {\n          var pendingThenable = thenable;\n          pendingThenable.status = 'pending';\n          pendingThenable.then(function (fulfilledValue) {\n            if (thenable.status === 'pending') {\n              var fulfilledThenable = thenable;\n              fulfilledThenable.status = 'fulfilled';\n              fulfilledThenable.value = fulfilledValue;\n            }\n          }, function (error) {\n            if (thenable.status === 'pending') {\n              var rejectedThenable = thenable;\n              rejectedThenable.status = 'rejected';\n              rejectedThenable.reason = error;\n            }\n          }); // Check one more time in case the thenable resolved synchronously\n\n          switch (thenable.status) {\n            case 'fulfilled':\n              {\n                var fulfilledThenable = thenable;\n                return fulfilledThenable.value;\n              }\n\n            case 'rejected':\n              {\n                var rejectedThenable = thenable;\n                throw rejectedThenable.reason;\n              }\n          }\n        } // Suspend.\n        //\n        // Throwing here is an implementation detail that allows us to unwind the\n        // call stack. But we shouldn't allow it to leak into userspace. Throw an\n        // opaque placeholder value instead of the actual thenable. If it doesn't\n        // get captured by the work loop, log a warning, because that means\n        // something in userspace must have caught it.\n\n\n        suspendedThenable = thenable;\n        throw SuspenseException;\n      }\n  }\n} // This is used to track the actual thenable that suspended so it can be\n// passed to the rest of the Suspense implementation — which, for historical\n// reasons, expects to receive a thenable.\n\nvar suspendedThenable = null;\nfunction getSuspendedThenable() {\n  // This is called right after `use` suspends by throwing an exception. `use`\n  // throws an opaque value instead of the thenable itself so that it can't be\n  // caught in userspace. Then the work loop accesses the actual thenable using\n  // this function.\n  if (suspendedThenable === null) {\n    throw new Error('Expected a suspended thenable. This is a bug in React. Please file ' + 'an issue.');\n  }\n\n  var thenable = suspendedThenable;\n  suspendedThenable = null;\n  return thenable;\n}\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = // $FlowFixMe[method-unbinding]\ntypeof Object.is === 'function' ? Object.is : is;\n\nvar currentlyRenderingComponent = null;\nvar currentlyRenderingTask = null;\nvar currentlyRenderingRequest = null;\nvar currentlyRenderingKeyPath = null;\nvar firstWorkInProgressHook = null;\nvar workInProgressHook = null; // Whether the work-in-progress hook is a re-rendered hook\n\nvar isReRender = false; // Whether an update was scheduled during the currently executing render pass.\n\nvar didScheduleRenderPhaseUpdate = false; // Counts the number of useId hooks in this component\n\nvar localIdCounter = 0; // Chunks that should be pushed to the stream once the component\n// finishes rendering.\n// Counts the number of useFormState calls in this component\n\nvar formStateCounter = 0; // The index of the useFormState hook that matches the one passed in at the\n// root during an MPA navigation, if any.\n\nvar formStateMatchingIndex = -1; // Counts the number of use(thenable) calls in this component\n\nvar thenableIndexCounter = 0;\nvar thenableState = null; // Lazily created map of render-phase updates\n\nvar renderPhaseUpdates = null; // Counter to prevent infinite loops.\n\nvar numberOfReRenders = 0;\nvar RE_RENDER_LIMIT = 25;\nvar isInHookUserCodeInDev = false; // In DEV, this is the name of the currently executing primitive hook\n\nvar currentHookNameInDev;\n\nfunction resolveCurrentlyRenderingComponent() {\n  if (currentlyRenderingComponent === null) {\n    throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n  }\n\n  {\n    if (isInHookUserCodeInDev) {\n      error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n    }\n  }\n\n  return currentlyRenderingComponent;\n}\n\nfunction areHookInputsEqual(nextDeps, prevDeps) {\n  if (prevDeps === null) {\n    {\n      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n    }\n\n    return false;\n  }\n\n  {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + nextDeps.join(', ') + \"]\", \"[\" + prevDeps.join(', ') + \"]\");\n    }\n  } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    if (objectIs(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction createHook() {\n  if (numberOfReRenders > 0) {\n    throw new Error('Rendered more hooks than during the previous render');\n  }\n\n  return {\n    memoizedState: null,\n    queue: null,\n    next: null\n  };\n}\n\nfunction createWorkInProgressHook() {\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    if (firstWorkInProgressHook === null) {\n      isReRender = false;\n      firstWorkInProgressHook = workInProgressHook = createHook();\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      isReRender = true;\n      workInProgressHook = firstWorkInProgressHook;\n    }\n  } else {\n    if (workInProgressHook.next === null) {\n      isReRender = false; // Append to the end of the list\n\n      workInProgressHook = workInProgressHook.next = createHook();\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      isReRender = true;\n      workInProgressHook = workInProgressHook.next;\n    }\n  }\n\n  return workInProgressHook;\n}\n\nfunction prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState) {\n  currentlyRenderingComponent = componentIdentity;\n  currentlyRenderingTask = task;\n  currentlyRenderingRequest = request;\n  currentlyRenderingKeyPath = keyPath;\n\n  {\n    isInHookUserCodeInDev = false;\n  } // The following should have already been reset\n  // didScheduleRenderPhaseUpdate = false;\n  // firstWorkInProgressHook = null;\n  // numberOfReRenders = 0;\n  // renderPhaseUpdates = null;\n  // workInProgressHook = null;\n\n\n  localIdCounter = 0;\n  formStateCounter = 0;\n  formStateMatchingIndex = -1;\n  thenableIndexCounter = 0;\n  thenableState = prevThenableState;\n}\nfunction finishHooks(Component, props, children, refOrContext) {\n  // This must be called after every function component to prevent hooks from\n  // being used in classes.\n  while (didScheduleRenderPhaseUpdate) {\n    // Updates were scheduled during the render phase. They are stored in\n    // the `renderPhaseUpdates` map. Call the component again, reusing the\n    // work-in-progress hooks and applying the additional updates on top. Keep\n    // restarting until no more updates are scheduled.\n    didScheduleRenderPhaseUpdate = false;\n    localIdCounter = 0;\n    formStateCounter = 0;\n    formStateMatchingIndex = -1;\n    thenableIndexCounter = 0;\n    numberOfReRenders += 1; // Start over from the beginning of the list\n\n    workInProgressHook = null;\n    children = Component(props, refOrContext);\n  }\n\n  resetHooksState();\n  return children;\n}\nfunction getThenableStateAfterSuspending() {\n  var state = thenableState;\n  thenableState = null;\n  return state;\n}\nfunction checkDidRenderIdHook() {\n  // This should be called immediately after every finishHooks call.\n  // Conceptually, it's part of the return value of finishHooks; it's only a\n  // separate function to avoid using an array tuple.\n  var didRenderIdHook = localIdCounter !== 0;\n  return didRenderIdHook;\n}\nfunction getFormStateCount() {\n  // This should be called immediately after every finishHooks call.\n  // Conceptually, it's part of the return value of finishHooks; it's only a\n  // separate function to avoid using an array tuple.\n  return formStateCounter;\n}\nfunction getFormStateMatchingIndex() {\n  // This should be called immediately after every finishHooks call.\n  // Conceptually, it's part of the return value of finishHooks; it's only a\n  // separate function to avoid using an array tuple.\n  return formStateMatchingIndex;\n} // Reset the internal hooks state if an error occurs while rendering a component\n\nfunction resetHooksState() {\n  {\n    isInHookUserCodeInDev = false;\n  }\n\n  currentlyRenderingComponent = null;\n  currentlyRenderingTask = null;\n  currentlyRenderingRequest = null;\n  currentlyRenderingKeyPath = null;\n  didScheduleRenderPhaseUpdate = false;\n  firstWorkInProgressHook = null;\n  numberOfReRenders = 0;\n  renderPhaseUpdates = null;\n  workInProgressHook = null;\n}\n\nfunction readContext(context) {\n  {\n    if (isInHookUserCodeInDev) {\n      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n    }\n  }\n\n  return readContext$1(context);\n}\n\nfunction useContext(context) {\n  {\n    currentHookNameInDev = 'useContext';\n  }\n\n  resolveCurrentlyRenderingComponent();\n  return readContext$1(context);\n}\n\nfunction basicStateReducer(state, action) {\n  // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction useState(initialState) {\n  {\n    currentHookNameInDev = 'useState';\n  }\n\n  return useReducer(basicStateReducer, // useReducer has a special case to support lazy useState initializers\n  initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  {\n    if (reducer !== basicStateReducer) {\n      currentHookNameInDev = 'useReducer';\n    }\n  }\n\n  currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n  workInProgressHook = createWorkInProgressHook();\n\n  if (isReRender) {\n    // This is a re-render. Apply the new render phase updates to the previous\n    // current hook.\n    var queue = workInProgressHook.queue;\n    var dispatch = queue.dispatch;\n\n    if (renderPhaseUpdates !== null) {\n      // Render phase updates are stored in a map of queue -> linked list\n      var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n\n      if (firstRenderPhaseUpdate !== undefined) {\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        renderPhaseUpdates.delete(queue); // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n        var newState = workInProgressHook.memoizedState;\n        var update = firstRenderPhaseUpdate;\n\n        do {\n          // Process this render phase update. We don't have to check the\n          // priority because it will always be the same as the current\n          // render's.\n          var action = update.action;\n\n          {\n            isInHookUserCodeInDev = true;\n          }\n\n          newState = reducer(newState, action);\n\n          {\n            isInHookUserCodeInDev = false;\n          } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n          update = update.next;\n        } while (update !== null); // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n        workInProgressHook.memoizedState = newState;\n        return [newState, dispatch];\n      }\n    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n    return [workInProgressHook.memoizedState, dispatch];\n  } else {\n    {\n      isInHookUserCodeInDev = true;\n    }\n\n    var initialState;\n\n    if (reducer === basicStateReducer) {\n      // Special case for `useState`.\n      initialState = typeof initialArg === 'function' ? initialArg() : initialArg;\n    } else {\n      initialState = init !== undefined ? init(initialArg) : initialArg;\n    }\n\n    {\n      isInHookUserCodeInDev = false;\n    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n    workInProgressHook.memoizedState = initialState; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n    var _queue = workInProgressHook.queue = {\n      last: null,\n      dispatch: null\n    };\n\n    var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue); // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n    return [workInProgressHook.memoizedState, _dispatch];\n  }\n}\n\nfunction useMemo(nextCreate, deps) {\n  currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n  workInProgressHook = createWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n\n  if (workInProgressHook !== null) {\n    var prevState = workInProgressHook.memoizedState;\n\n    if (prevState !== null) {\n      if (nextDeps !== null) {\n        var prevDeps = prevState[1];\n\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\n          return prevState[0];\n        }\n      }\n    }\n  }\n\n  {\n    isInHookUserCodeInDev = true;\n  }\n\n  var nextValue = nextCreate();\n\n  {\n    isInHookUserCodeInDev = false;\n  } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n  workInProgressHook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction useRef(initialValue) {\n  currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n  workInProgressHook = createWorkInProgressHook();\n  var previousRef = workInProgressHook.memoizedState;\n\n  if (previousRef === null) {\n    var ref = {\n      current: initialValue\n    };\n\n    {\n      Object.seal(ref);\n    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n    workInProgressHook.memoizedState = ref;\n    return ref;\n  } else {\n    return previousRef;\n  }\n}\n\nfunction dispatchAction(componentIdentity, queue, action) {\n  if (numberOfReRenders >= RE_RENDER_LIMIT) {\n    throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\n  }\n\n  if (componentIdentity === currentlyRenderingComponent) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdate = true;\n    var update = {\n      action: action,\n      next: null\n    };\n\n    if (renderPhaseUpdates === null) {\n      renderPhaseUpdates = new Map();\n    }\n\n    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n\n    if (firstRenderPhaseUpdate === undefined) {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      renderPhaseUpdates.set(queue, update);\n    } else {\n      // Append the update to the end of the list.\n      var lastRenderPhaseUpdate = firstRenderPhaseUpdate;\n\n      while (lastRenderPhaseUpdate.next !== null) {\n        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n      }\n\n      lastRenderPhaseUpdate.next = update;\n    }\n  }\n}\n\nfunction useCallback(callback, deps) {\n  return useMemo(function () {\n    return callback;\n  }, deps);\n}\n\nfunction useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  if (getServerSnapshot === undefined) {\n    throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');\n  }\n\n  return getServerSnapshot();\n}\n\nfunction useDeferredValue(value, initialValue) {\n  resolveCurrentlyRenderingComponent();\n\n  {\n    return value;\n  }\n}\n\nfunction unsupportedStartTransition() {\n  throw new Error('startTransition cannot be called during server rendering.');\n}\n\nfunction useTransition() {\n  resolveCurrentlyRenderingComponent();\n  return [false, unsupportedStartTransition];\n}\n\nfunction useHostTransitionStatus() {\n  resolveCurrentlyRenderingComponent();\n  return NotPendingTransition;\n}\n\nfunction unsupportedSetOptimisticState() {\n  throw new Error('Cannot update optimistic state while rendering.');\n}\n\nfunction useOptimistic(passthrough, reducer) {\n  resolveCurrentlyRenderingComponent();\n  return [passthrough, unsupportedSetOptimisticState];\n}\n\nfunction createPostbackFormStateKey(permalink, componentKeyPath, hookIndex) {\n  if (permalink !== undefined) {\n    // Don't bother to hash a permalink-based key since it's already short.\n    return 'p' + permalink;\n  } else {\n    // Append a node to the key path that represents the form state hook.\n    var keyPath = [componentKeyPath, null, hookIndex]; // Key paths are hashed to reduce the size. It does not need to be secure,\n    // and it's more important that it's fast than that it's completely\n    // collision-free.\n\n    var keyPathHash = createFastHashJS(JSON.stringify(keyPath));\n    return 'k' + keyPathHash;\n  }\n}\n\nfunction useFormState(action, initialState, permalink) {\n  resolveCurrentlyRenderingComponent(); // Count the number of useFormState hooks per component. We also use this to\n  // track the position of this useFormState hook relative to the other ones in\n  // this component, so we can generate a unique key for each one.\n\n  var formStateHookIndex = formStateCounter++;\n  var request = currentlyRenderingRequest; // $FlowIgnore[prop-missing]\n\n  var formAction = action.$$FORM_ACTION;\n\n  if (typeof formAction === 'function') {\n    // This is a server action. These have additional features to enable\n    // MPA-style form submissions with progressive enhancement.\n    // TODO: If the same permalink is passed to multiple useFormStates, and\n    // they all have the same action signature, Fizz will pass the postback\n    // state to all of them. We should probably only pass it to the first one,\n    // and/or warn.\n    // The key is lazily generated and deduped so the that the keypath doesn't\n    // get JSON.stringify-ed unnecessarily, and at most once.\n    var nextPostbackStateKey = null; // Determine the current form state. If we received state during an MPA form\n    // submission, then we will reuse that, if the action identity matches.\n    // Otherwise we'll use the initial state argument. We will emit a comment\n    // marker into the stream that indicates whether the state was reused.\n\n    var state = initialState;\n    var componentKeyPath = currentlyRenderingKeyPath;\n    var postbackFormState = getFormState(request); // $FlowIgnore[prop-missing]\n\n    var isSignatureEqual = action.$$IS_SIGNATURE_EQUAL;\n\n    if (postbackFormState !== null && typeof isSignatureEqual === 'function') {\n      var postbackKey = postbackFormState[1];\n      var postbackReferenceId = postbackFormState[2];\n      var postbackBoundArity = postbackFormState[3];\n\n      if (isSignatureEqual.call(action, postbackReferenceId, postbackBoundArity)) {\n        nextPostbackStateKey = createPostbackFormStateKey(permalink, componentKeyPath, formStateHookIndex);\n\n        if (postbackKey === nextPostbackStateKey) {\n          // This was a match\n          formStateMatchingIndex = formStateHookIndex; // Reuse the state that was submitted by the form.\n\n          state = postbackFormState[0];\n        }\n      }\n    } // Bind the state to the first argument of the action.\n\n\n    var boundAction = action.bind(null, state); // Wrap the action so the return value is void.\n\n    var dispatch = function (payload) {\n      boundAction(payload);\n    }; // $FlowIgnore[prop-missing]\n\n\n    if (typeof boundAction.$$FORM_ACTION === 'function') {\n      // $FlowIgnore[prop-missing]\n      dispatch.$$FORM_ACTION = function (prefix) {\n        var metadata = boundAction.$$FORM_ACTION(prefix); // Override the action URL\n\n        if (permalink !== undefined) {\n          {\n            checkAttributeStringCoercion(permalink, 'target');\n          }\n\n          permalink += '';\n          metadata.action = permalink;\n        }\n\n        var formData = metadata.data;\n\n        if (formData) {\n          if (nextPostbackStateKey === null) {\n            nextPostbackStateKey = createPostbackFormStateKey(permalink, componentKeyPath, formStateHookIndex);\n          }\n\n          formData.append('$ACTION_KEY', nextPostbackStateKey);\n        }\n\n        return metadata;\n      };\n    }\n\n    return [state, dispatch];\n  } else {\n    // This is not a server action, so the implementation is much simpler.\n    // Bind the state to the first argument of the action.\n    var _boundAction = action.bind(null, initialState); // Wrap the action so the return value is void.\n\n\n    var _dispatch2 = function (payload) {\n      _boundAction(payload);\n    };\n\n    return [initialState, _dispatch2];\n  }\n}\n\nfunction useId() {\n  var task = currentlyRenderingTask;\n  var treeId = getTreeId(task.treeContext);\n  var resumableState = currentResumableState;\n\n  if (resumableState === null) {\n    throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component.');\n  }\n\n  var localId = localIdCounter++;\n  return makeId(resumableState, treeId, localId);\n}\n\nfunction use(usable) {\n  if (usable !== null && typeof usable === 'object') {\n    // $FlowFixMe[method-unbinding]\n    if (typeof usable.then === 'function') {\n      // This is a thenable.\n      var thenable = usable;\n      return unwrapThenable(thenable);\n    } else if (usable.$$typeof === REACT_CONTEXT_TYPE) {\n      var context = usable;\n      return readContext(context);\n    }\n  } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n  throw new Error('An unsupported type was passed to use(): ' + String(usable));\n}\n\nfunction unwrapThenable(thenable) {\n  var index = thenableIndexCounter;\n  thenableIndexCounter += 1;\n\n  if (thenableState === null) {\n    thenableState = createThenableState();\n  }\n\n  return trackUsedThenable(thenableState, thenable, index);\n}\n\nfunction unsupportedRefresh() {\n  throw new Error('Cache cannot be refreshed during server rendering.');\n}\n\nfunction useCacheRefresh() {\n  return unsupportedRefresh;\n}\n\nfunction noop$1() {}\n\nvar HooksDispatcher = {\n  readContext: readContext,\n  use: use,\n  useContext: useContext,\n  useMemo: useMemo,\n  useReducer: useReducer,\n  useRef: useRef,\n  useState: useState,\n  useInsertionEffect: noop$1,\n  useLayoutEffect: noop$1,\n  useCallback: useCallback,\n  // useImperativeHandle is not run in the server environment\n  useImperativeHandle: noop$1,\n  // Effects are not run in the server environment.\n  useEffect: noop$1,\n  // Debugging effect\n  useDebugValue: noop$1,\n  useDeferredValue: useDeferredValue,\n  useTransition: useTransition,\n  useId: useId,\n  // Subscriptions are not setup in a server environment.\n  useSyncExternalStore: useSyncExternalStore\n};\n\n{\n  HooksDispatcher.useCacheRefresh = useCacheRefresh;\n}\n\n{\n  HooksDispatcher.useHostTransitionStatus = useHostTransitionStatus;\n}\n\n{\n  HooksDispatcher.useOptimistic = useOptimistic;\n  HooksDispatcher.useFormState = useFormState;\n}\n\nvar currentResumableState = null;\nfunction setCurrentResumableState(resumableState) {\n  currentResumableState = resumableState;\n}\n\nfunction getCacheSignal() {\n  throw new Error('Not implemented.');\n}\n\nfunction getCacheForType(resourceType) {\n  throw new Error('Not implemented.');\n}\n\nvar DefaultCacheDispatcher = {\n  getCacheSignal: getCacheSignal,\n  getCacheForType: getCacheForType\n};\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher$1.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher$1.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\n\nfunction describeClassComponentFrame(ctor, ownerFn) {\n  {\n    return describeNativeComponentFrame(ctor, true);\n  }\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction getStackByComponentStackNode(componentStack) {\n  try {\n    var info = '';\n    var node = componentStack;\n\n    do {\n      switch (node.tag) {\n        case 0:\n          info += describeBuiltInComponentFrame(node.type, null);\n          break;\n\n        case 1:\n          info += describeFunctionComponentFrame(node.type, null);\n          break;\n\n        case 2:\n          info += describeClassComponentFrame(node.type, null);\n          break;\n      } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n      node = node.parent;\n    } while (node);\n\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar ReactCurrentCache = ReactSharedInternals.ReactCurrentCache;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame; // Linked list representing the identity of a component given the component/tag name and key.\n// The name might be minified but we assume that it's going to be the same generated name. Typically\n// because it's just the same compiled output in practice.\n// resume with segmentID at the index\n\nvar CLIENT_RENDERED = 4; // if it errors or infinitely suspends\n\nvar PENDING = 0;\nvar COMPLETED = 1;\nvar FLUSHED = 2;\nvar ABORTED = 3;\nvar ERRORED = 4;\nvar POSTPONED = 5;\nvar OPEN = 0;\nvar CLOSING = 1;\nvar CLOSED = 2; // This is a default heuristic for how to split up the HTML content into progressive\n// loading. Our goal is to be able to display additional new content about every 500ms.\n// Faster than that is unnecessary and should be throttled on the client. It also\n// adds unnecessary overhead to do more splits. We don't know if it's a higher or lower\n// end device but higher end suffer less from the overhead than lower end does from\n// not getting small enough pieces. We error on the side of low end.\n// We base this on low end 3G speeds which is about 500kbits per second. We assume\n// that there can be a reasonable drop off from max bandwidth which leaves you with\n// as little as 80%. We can receive half of that each 500ms - at best. In practice,\n// a little bandwidth is lost to processing and contention - e.g. CSS and images that\n// are downloaded along with the main content. So we estimate about half of that to be\n// the lower end throughput. In other words, we expect that you can at least show\n// about 12.5kb of content per 500ms. Not counting starting latency for the first\n// paint.\n// 500 * 1024 / 8 * .8 * 0.5 / 2\n\nvar DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;\n\nfunction defaultErrorHandler(error) {\n  console['error'](error); // Don't transform to our wrapper\n\n  return null;\n}\n\nfunction noop() {}\n\nfunction createRequest(children, resumableState, renderState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError, onPostpone, formState) {\n  prepareHostDispatcher();\n  var pingedTasks = [];\n  var abortSet = new Set();\n  var request = {\n    destination: null,\n    flushScheduled: false,\n    resumableState: resumableState,\n    renderState: renderState,\n    rootFormatContext: rootFormatContext,\n    progressiveChunkSize: progressiveChunkSize === undefined ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,\n    status: OPEN,\n    fatalError: null,\n    nextSegmentId: 0,\n    allPendingTasks: 0,\n    pendingRootTasks: 0,\n    completedRootSegment: null,\n    abortableTasks: abortSet,\n    pingedTasks: pingedTasks,\n    clientRenderedBoundaries: [],\n    completedBoundaries: [],\n    partialBoundaries: [],\n    trackedPostpones: null,\n    onError: onError === undefined ? defaultErrorHandler : onError,\n    onPostpone: onPostpone === undefined ? noop : onPostpone,\n    onAllReady: onAllReady === undefined ? noop : onAllReady,\n    onShellReady: onShellReady === undefined ? noop : onShellReady,\n    onShellError: onShellError === undefined ? noop : onShellError,\n    onFatalError: onFatalError === undefined ? noop : onFatalError,\n    formState: formState === undefined ? null : formState\n  }; // This segment represents the root fallback.\n\n  var rootSegment = createPendingSegment(request, 0, null, rootFormatContext, // Root segments are never embedded in Text on either edge\n  false, false); // There is no parent so conceptually, we're unblocked to flush this segment.\n\n  rootSegment.parentFlushed = true;\n  var rootTask = createRenderTask(request, null, children, -1, null, rootSegment, null, abortSet, null, rootFormatContext, emptyContextObject, rootContextSnapshot, emptyTreeContext, null, false);\n  pingedTasks.push(rootTask);\n  return request;\n}\nvar currentRequest = null;\nfunction resolveRequest() {\n  if (currentRequest) return currentRequest;\n\n  return null;\n}\n\nfunction pingTask(request, task) {\n  var pingedTasks = request.pingedTasks;\n  pingedTasks.push(task);\n\n  if (request.pingedTasks.length === 1) {\n    request.flushScheduled = request.destination !== null;\n    scheduleWork(function () {\n      return performWork(request);\n    });\n  }\n}\n\nfunction createSuspenseBoundary(request, fallbackAbortableTasks) {\n  return {\n    status: PENDING,\n    rootSegmentID: -1,\n    parentFlushed: false,\n    pendingTasks: 0,\n    completedSegments: [],\n    byteSize: 0,\n    fallbackAbortableTasks: fallbackAbortableTasks,\n    errorDigest: null,\n    contentState: createHoistableState(),\n    fallbackState: createHoistableState(),\n    trackedContentKeyPath: null,\n    trackedFallbackNode: null\n  };\n}\n\nfunction createRenderTask(request, thenableState, node, childIndex, blockedBoundary, blockedSegment, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {\n  request.allPendingTasks++;\n\n  if (blockedBoundary === null) {\n    request.pendingRootTasks++;\n  } else {\n    blockedBoundary.pendingTasks++;\n  }\n\n  var task = {\n    replay: null,\n    node: node,\n    childIndex: childIndex,\n    ping: function () {\n      return pingTask(request, task);\n    },\n    blockedBoundary: blockedBoundary,\n    blockedSegment: blockedSegment,\n    hoistableState: hoistableState,\n    abortSet: abortSet,\n    keyPath: keyPath,\n    formatContext: formatContext,\n    legacyContext: legacyContext,\n    context: context,\n    treeContext: treeContext,\n    componentStack: componentStack,\n    thenableState: thenableState,\n    isFallback: isFallback\n  };\n  abortSet.add(task);\n  return task;\n}\n\nfunction createReplayTask(request, thenableState, replay, node, childIndex, blockedBoundary, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {\n  request.allPendingTasks++;\n\n  if (blockedBoundary === null) {\n    request.pendingRootTasks++;\n  } else {\n    blockedBoundary.pendingTasks++;\n  }\n\n  replay.pendingTasks++;\n  var task = {\n    replay: replay,\n    node: node,\n    childIndex: childIndex,\n    ping: function () {\n      return pingTask(request, task);\n    },\n    blockedBoundary: blockedBoundary,\n    blockedSegment: null,\n    hoistableState: hoistableState,\n    abortSet: abortSet,\n    keyPath: keyPath,\n    formatContext: formatContext,\n    legacyContext: legacyContext,\n    context: context,\n    treeContext: treeContext,\n    componentStack: componentStack,\n    thenableState: thenableState,\n    isFallback: isFallback\n  };\n  abortSet.add(task);\n  return task;\n}\n\nfunction createPendingSegment(request, index, boundary, parentFormatContext, lastPushedText, textEmbedded) {\n  return {\n    status: PENDING,\n    id: -1,\n    // lazily assigned later\n    index: index,\n    parentFlushed: false,\n    chunks: [],\n    children: [],\n    parentFormatContext: parentFormatContext,\n    boundary: boundary,\n    lastPushedText: lastPushedText,\n    textEmbedded: textEmbedded\n  };\n} // DEV-only global reference to the currently executing task\n\n\nvar currentTaskInDEV = null;\n\nfunction getCurrentStackInDEV() {\n  {\n    if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {\n      return '';\n    }\n\n    return getStackByComponentStackNode(currentTaskInDEV.componentStack);\n  }\n}\n\nfunction getStackFromNode(stackNode) {\n  return getStackByComponentStackNode(stackNode);\n}\n\nfunction createBuiltInComponentStack(task, type) {\n  return {\n    tag: 0,\n    parent: task.componentStack,\n    type: type\n  };\n}\n\nfunction createFunctionComponentStack(task, type) {\n  return {\n    tag: 1,\n    parent: task.componentStack,\n    type: type\n  };\n}\n\nfunction createClassComponentStack(task, type) {\n  return {\n    tag: 2,\n    parent: task.componentStack,\n    type: type\n  };\n} // While we track component stacks in prod all the time we only produce a reified stack in dev and\n// during prerender in Prod. The reason for this is that the stack is useful for prerender where the timeliness\n// of the request is less critical than the observability of the execution. For renders and resumes however we\n// prioritize speed of the request.\n\n\nfunction getThrownInfo(request, node) {\n  if (node && ( // Always produce a stack in dev\n  true )) {\n    return {\n      componentStack: getStackFromNode(node)\n    };\n  } else {\n    return {};\n  }\n}\n\nfunction encodeErrorForBoundary(boundary, digest, error, thrownInfo) {\n  boundary.errorDigest = digest;\n\n  {\n    var message; // In dev we additionally encode the error message and component stack on the boundary\n\n    if (error instanceof Error) {\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      message = String(error.message);\n    } else if (typeof error === 'object' && error !== null) {\n      message = describeObjectForErrorMessage(error);\n    } else {\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      message = String(error);\n    }\n\n    boundary.errorMessage = message;\n    boundary.errorComponentStack = thrownInfo.componentStack;\n  }\n}\n\nfunction logRecoverableError(request, error$1, errorInfo) {\n  // If this callback errors, we intentionally let that error bubble up to become a fatal error\n  // so that someone fixes the error reporting instead of hiding it.\n  var errorDigest = request.onError(error$1, errorInfo);\n\n  if (errorDigest != null && typeof errorDigest !== 'string') {\n    // We used to throw here but since this gets called from a variety of unprotected places it\n    // seems better to just warn and discard the returned value.\n    {\n      error('onError returned something with a type other than \"string\". onError should return a string and may return null or undefined but must not return anything else. It received something of type \"%s\" instead', typeof errorDigest);\n    }\n\n    return;\n  }\n\n  return errorDigest;\n}\n\nfunction fatalError(request, error) {\n  // This is called outside error handling code such as if the root errors outside\n  // a suspense boundary or if the root suspense boundary's fallback errors.\n  // It's also called if React itself or its host configs errors.\n  var onShellError = request.onShellError;\n  onShellError(error);\n  var onFatalError = request.onFatalError;\n  onFatalError(error);\n\n  if (request.destination !== null) {\n    request.status = CLOSED;\n    closeWithError(request.destination, error);\n  } else {\n    request.status = CLOSING;\n    request.fatalError = error;\n  }\n}\n\nfunction renderSuspenseBoundary(request, someTask, keyPath, props) {\n  if (someTask.replay !== null) {\n    // If we're replaying through this pass, it means we're replaying through\n    // an already completed Suspense boundary. It's too late to do anything about it\n    // so we can just render through it.\n    var _prevKeyPath = someTask.keyPath;\n    someTask.keyPath = keyPath;\n    var _content = props.children;\n\n    try {\n      renderNode(request, someTask, _content, -1);\n    } finally {\n      someTask.keyPath = _prevKeyPath;\n    }\n\n    return;\n  } // $FlowFixMe: Refined.\n\n\n  var task = someTask;\n  var previousComponentStack = task.componentStack; // If we end up creating the fallback task we need it to have the correct stack which is\n  // the stack for the boundary itself. We stash it here so we can use it if needed later\n\n  var suspenseComponentStack = task.componentStack = createBuiltInComponentStack(task, 'Suspense');\n  var prevKeyPath = task.keyPath;\n  var parentBoundary = task.blockedBoundary;\n  var parentHoistableState = task.hoistableState;\n  var parentSegment = task.blockedSegment; // Each time we enter a suspense boundary, we split out into a new segment for\n  // the fallback so that we can later replace that segment with the content.\n  // This also lets us split out the main content even if it doesn't suspend,\n  // in case it ends up generating a large subtree of content.\n\n  var fallback = props.fallback;\n  var content = props.children;\n  var fallbackAbortSet = new Set();\n  var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);\n\n  if (request.trackedPostpones !== null) {\n    newBoundary.trackedContentKeyPath = keyPath;\n  }\n\n  var insertionIndex = parentSegment.chunks.length; // The children of the boundary segment is actually the fallback.\n\n  var boundarySegment = createPendingSegment(request, insertionIndex, newBoundary, task.formatContext, // boundaries never require text embedding at their edges because comment nodes bound them\n  false, false);\n  parentSegment.children.push(boundarySegment); // The parentSegment has a child Segment at this index so we reset the lastPushedText marker on the parent\n\n  parentSegment.lastPushedText = false; // This segment is the actual child content. We can start rendering that immediately.\n\n  var contentRootSegment = createPendingSegment(request, 0, null, task.formatContext, // boundaries never require text embedding at their edges because comment nodes bound them\n  false, false); // We mark the root segment as having its parent flushed. It's not really flushed but there is\n  // no parent segment so there's nothing to wait on.\n\n  contentRootSegment.parentFlushed = true; // Currently this is running synchronously. We could instead schedule this to pingedTasks.\n  // I suspect that there might be some efficiency benefits from not creating the suspended task\n  // and instead just using the stack if possible.\n  // TODO: Call this directly instead of messing with saving and restoring contexts.\n  // We can reuse the current context and task to render the content immediately without\n  // context switching. We just need to temporarily switch which boundary and which segment\n  // we're writing to. If something suspends, it'll spawn new suspended task with that context.\n\n  task.blockedBoundary = newBoundary;\n  task.hoistableState = newBoundary.contentState;\n  task.blockedSegment = contentRootSegment;\n  task.keyPath = keyPath;\n\n  try {\n    // We use the safe form because we don't handle suspending here. Only error handling.\n    renderNode(request, task, content, -1);\n    pushSegmentFinale(contentRootSegment.chunks, request.renderState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);\n    contentRootSegment.status = COMPLETED;\n    queueCompletedSegment(newBoundary, contentRootSegment);\n\n    if (newBoundary.pendingTasks === 0 && newBoundary.status === PENDING) {\n      // This must have been the last segment we were waiting on. This boundary is now complete.\n      // Therefore we won't need the fallback. We early return so that we don't have to create\n      // the fallback.\n      newBoundary.status = COMPLETED; // We are returning early so we need to restore the\n\n      task.componentStack = previousComponentStack;\n      return;\n    }\n  } catch (error) {\n    contentRootSegment.status = ERRORED;\n    newBoundary.status = CLIENT_RENDERED;\n    var thrownInfo = getThrownInfo(request, task.componentStack);\n    var errorDigest;\n\n    {\n      errorDigest = logRecoverableError(request, error, thrownInfo);\n    }\n\n    encodeErrorForBoundary(newBoundary, errorDigest, error, thrownInfo);\n    untrackBoundary(request, newBoundary); // We don't need to decrement any task numbers because we didn't spawn any new task.\n    // We don't need to schedule any task because we know the parent has written yet.\n    // We do need to fallthrough to create the fallback though.\n  } finally {\n    task.blockedBoundary = parentBoundary;\n    task.hoistableState = parentHoistableState;\n    task.blockedSegment = parentSegment;\n    task.keyPath = prevKeyPath;\n    task.componentStack = previousComponentStack;\n  }\n\n  var fallbackKeyPath = [keyPath[0], 'Suspense Fallback', keyPath[2]];\n  var trackedPostpones = request.trackedPostpones;\n\n  if (trackedPostpones !== null) {\n    // We create a detached replay node to track any postpones inside the fallback.\n    var fallbackReplayNode = [fallbackKeyPath[1], fallbackKeyPath[2], [], null];\n    trackedPostpones.workingMap.set(fallbackKeyPath, fallbackReplayNode);\n\n    if (newBoundary.status === POSTPONED) {\n      // This must exist now.\n      var boundaryReplayNode = trackedPostpones.workingMap.get(keyPath);\n      boundaryReplayNode[4] = fallbackReplayNode;\n    } else {\n      // We might not inject it into the postponed tree, unless the content actually\n      // postpones too. We need to keep track of it until that happpens.\n      newBoundary.trackedFallbackNode = fallbackReplayNode;\n    }\n  } // We create suspended task for the fallback because we don't want to actually work\n  // on it yet in case we finish the main content, so we queue for later.\n\n\n  var suspendedFallbackTask = createRenderTask(request, null, fallback, -1, parentBoundary, boundarySegment, newBoundary.fallbackState, fallbackAbortSet, fallbackKeyPath, task.formatContext, task.legacyContext, task.context, task.treeContext, // This stack should be the Suspense boundary stack because while the fallback is actually a child segment\n  // of the parent boundary from a component standpoint the fallback is a child of the Suspense boundary itself\n  suspenseComponentStack, true); // TODO: This should be queued at a separate lower priority queue so that we only work\n  // on preparing fallbacks if we don't have any more main content to task on.\n\n  request.pingedTasks.push(suspendedFallbackTask);\n}\n\nfunction replaySuspenseBoundary(request, task, keyPath, props, id, childNodes, childSlots, fallbackNodes, fallbackSlots) {\n  var previousComponentStack = task.componentStack; // If we end up creating the fallback task we need it to have the correct stack which is\n  // the stack for the boundary itself. We stash it here so we can use it if needed later\n\n  var suspenseComponentStack = task.componentStack = createBuiltInComponentStack(task, 'Suspense');\n  var prevKeyPath = task.keyPath;\n  var previousReplaySet = task.replay;\n  var parentBoundary = task.blockedBoundary;\n  var parentHoistableState = task.hoistableState;\n  var content = props.children;\n  var fallback = props.fallback;\n  var fallbackAbortSet = new Set();\n  var resumedBoundary = createSuspenseBoundary(request, fallbackAbortSet);\n  resumedBoundary.parentFlushed = true; // We restore the same id of this boundary as was used during prerender.\n\n  resumedBoundary.rootSegmentID = id; // We can reuse the current context and task to render the content immediately without\n  // context switching. We just need to temporarily switch which boundary and replay node\n  // we're writing to. If something suspends, it'll spawn new suspended task with that context.\n\n  task.blockedBoundary = resumedBoundary;\n  task.hoistableState = resumedBoundary.contentState;\n  task.replay = {\n    nodes: childNodes,\n    slots: childSlots,\n    pendingTasks: 1\n  };\n\n  try {\n    // We use the safe form because we don't handle suspending here. Only error handling.\n    renderNode(request, task, content, -1);\n\n    if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {\n      throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n    }\n\n    task.replay.pendingTasks--;\n\n    if (resumedBoundary.pendingTasks === 0 && resumedBoundary.status === PENDING) {\n      // This must have been the last segment we were waiting on. This boundary is now complete.\n      // Therefore we won't need the fallback. We early return so that we don't have to create\n      // the fallback.\n      resumedBoundary.status = COMPLETED;\n      request.completedBoundaries.push(resumedBoundary); // We restore the parent componentStack. Semantically this is the same as\n      // popComponentStack(task) but we do this instead because it should be slightly\n      // faster\n\n      return;\n    }\n  } catch (error) {\n    resumedBoundary.status = CLIENT_RENDERED;\n    var thrownInfo = getThrownInfo(request, task.componentStack);\n    var errorDigest;\n\n    {\n      errorDigest = logRecoverableError(request, error, thrownInfo);\n    }\n\n    encodeErrorForBoundary(resumedBoundary, errorDigest, error, thrownInfo);\n    task.replay.pendingTasks--; // The parent already flushed in the prerender so we need to schedule this to be emitted.\n\n    request.clientRenderedBoundaries.push(resumedBoundary); // We don't need to decrement any task numbers because we didn't spawn any new task.\n    // We don't need to schedule any task because we know the parent has written yet.\n    // We do need to fallthrough to create the fallback though.\n  } finally {\n    task.blockedBoundary = parentBoundary;\n    task.hoistableState = parentHoistableState;\n    task.replay = previousReplaySet;\n    task.keyPath = prevKeyPath;\n    task.componentStack = previousComponentStack;\n  }\n\n  var fallbackKeyPath = [keyPath[0], 'Suspense Fallback', keyPath[2]]; // We create suspended task for the fallback because we don't want to actually work\n  // on it yet in case we finish the main content, so we queue for later.\n\n  var fallbackReplay = {\n    nodes: fallbackNodes,\n    slots: fallbackSlots,\n    pendingTasks: 0\n  };\n  var suspendedFallbackTask = createReplayTask(request, null, fallbackReplay, fallback, -1, parentBoundary, resumedBoundary.fallbackState, fallbackAbortSet, fallbackKeyPath, task.formatContext, task.legacyContext, task.context, task.treeContext, // This stack should be the Suspense boundary stack because while the fallback is actually a child segment\n  // of the parent boundary from a component standpoint the fallback is a child of the Suspense boundary itself\n  suspenseComponentStack, true); // TODO: This should be queued at a separate lower priority queue so that we only work\n  // on preparing fallbacks if we don't have any more main content to task on.\n\n  request.pingedTasks.push(suspendedFallbackTask);\n}\n\nfunction renderHostElement(request, task, keyPath, type, props) {\n  var previousComponentStack = task.componentStack;\n  task.componentStack = createBuiltInComponentStack(task, type);\n  var segment = task.blockedSegment;\n\n  if (segment === null) {\n    // Replay\n    var children = props.children; // TODO: Make this a Config for replaying.\n\n    var prevContext = task.formatContext;\n    var prevKeyPath = task.keyPath;\n    task.formatContext = getChildFormatContext(prevContext, type, props);\n    task.keyPath = keyPath; // We use the non-destructive form because if something suspends, we still\n    // need to pop back up and finish this subtree of HTML.\n\n    renderNode(request, task, children, -1); // We expect that errors will fatal the whole task and that we don't need\n    // the correct context. Therefore this is not in a finally.\n\n    task.formatContext = prevContext;\n    task.keyPath = prevKeyPath;\n  } else {\n    // Render\n    var _children = pushStartInstance(segment.chunks, type, props, request.resumableState, request.renderState, task.hoistableState, task.formatContext, segment.lastPushedText, task.isFallback);\n\n    segment.lastPushedText = false;\n    var _prevContext = task.formatContext;\n    var _prevKeyPath2 = task.keyPath;\n    task.formatContext = getChildFormatContext(_prevContext, type, props);\n    task.keyPath = keyPath; // We use the non-destructive form because if something suspends, we still\n    // need to pop back up and finish this subtree of HTML.\n\n    renderNode(request, task, _children, -1); // We expect that errors will fatal the whole task and that we don't need\n    // the correct context. Therefore this is not in a finally.\n\n    task.formatContext = _prevContext;\n    task.keyPath = _prevKeyPath2;\n    pushEndInstance(segment.chunks, type, props, request.resumableState, _prevContext);\n    segment.lastPushedText = false;\n  }\n\n  task.componentStack = previousComponentStack;\n}\n\nfunction shouldConstruct(Component) {\n  return Component.prototype && Component.prototype.isReactComponent;\n}\n\nfunction renderWithHooks(request, task, keyPath, Component, props, secondArg) {\n  // Reset the task's thenable state before continuing, so that if a later\n  // component suspends we can reuse the same task object. If the same\n  // component suspends again, the thenable state will be restored.\n  var prevThenableState = task.thenableState;\n  task.thenableState = null;\n  var componentIdentity = {};\n  prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState);\n  var result = Component(props, secondArg);\n  return finishHooks(Component, props, result, secondArg);\n}\n\nfunction finishClassComponent(request, task, keyPath, instance, Component, props) {\n  var nextChildren = instance.render();\n\n  {\n    if (instance.props !== props) {\n      if (!didWarnAboutReassigningProps) {\n        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromType(Component) || 'a component');\n      }\n\n      didWarnAboutReassigningProps = true;\n    }\n  }\n\n  {\n    var childContextTypes = Component.childContextTypes;\n\n    if (childContextTypes !== null && childContextTypes !== undefined) {\n      var previousContext = task.legacyContext;\n      var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);\n      task.legacyContext = mergedContext;\n      renderNodeDestructive(request, task, nextChildren, -1);\n      task.legacyContext = previousContext;\n      return;\n    }\n  }\n\n  var prevKeyPath = task.keyPath;\n  task.keyPath = keyPath;\n  renderNodeDestructive(request, task, nextChildren, -1);\n  task.keyPath = prevKeyPath;\n}\n\nfunction renderClassComponent(request, task, keyPath, Component, props) {\n  var previousComponentStack = task.componentStack;\n  task.componentStack = createClassComponentStack(task, Component);\n  var maskedContext = getMaskedContext(Component, task.legacyContext) ;\n  var instance = constructClassInstance(Component, props, maskedContext);\n  mountClassInstance(instance, Component, props, maskedContext);\n  finishClassComponent(request, task, keyPath, instance, Component, props);\n  task.componentStack = previousComponentStack;\n}\n\nvar didWarnAboutBadClass = {};\nvar didWarnAboutModulePatternComponent = {};\nvar didWarnAboutContextTypeOnFunctionComponent = {};\nvar didWarnAboutGetDerivedStateOnFunctionComponent = {};\nvar didWarnAboutReassigningProps = false;\nvar didWarnAboutDefaultPropsOnFunctionComponent = {};\nvar didWarnAboutGenerators = false;\nvar didWarnAboutMaps = false; // This would typically be a function component but we still support module pattern\n// components for some reason.\n\nfunction renderIndeterminateComponent(request, task, keyPath, Component, props) {\n  var legacyContext;\n\n  {\n    legacyContext = getMaskedContext(Component, task.legacyContext);\n  }\n\n  var previousComponentStack = task.componentStack;\n  task.componentStack = createFunctionComponentStack(task, Component);\n\n  {\n    if (Component.prototype && typeof Component.prototype.render === 'function') {\n      var componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n  }\n\n  var value = renderWithHooks(request, task, keyPath, Component, props, legacyContext);\n  var hasId = checkDidRenderIdHook();\n  var formStateCount = getFormStateCount();\n  var formStateMatchingIndex = getFormStateMatchingIndex();\n\n  {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n      var _componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\n\n        didWarnAboutModulePatternComponent[_componentName] = true;\n      }\n    }\n  }\n\n  if ( // Run these checks in production only if the flag is off.\n  // Eventually we'll delete this branch altogether.\n  typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n    {\n      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName2]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\n\n        didWarnAboutModulePatternComponent[_componentName2] = true;\n      }\n    }\n\n    mountClassInstance(value, Component, props, legacyContext);\n    finishClassComponent(request, task, keyPath, value, Component, props);\n  } else {\n\n    {\n      validateFunctionComponentInDev(Component);\n    }\n\n    finishFunctionComponent(request, task, keyPath, value, hasId, formStateCount, formStateMatchingIndex);\n  }\n\n  task.componentStack = previousComponentStack;\n}\n\nfunction finishFunctionComponent(request, task, keyPath, children, hasId, formStateCount, formStateMatchingIndex) {\n  var didEmitFormStateMarkers = false;\n\n  if (formStateCount !== 0 && request.formState !== null) {\n    // For each useFormState hook, emit a marker that indicates whether we\n    // rendered using the form state passed at the root. We only emit these\n    // markers if form state is passed at the root.\n    var segment = task.blockedSegment;\n\n    if (segment === null) ; else {\n      didEmitFormStateMarkers = true;\n      var target = segment.chunks;\n\n      for (var i = 0; i < formStateCount; i++) {\n        if (i === formStateMatchingIndex) {\n          pushFormStateMarkerIsMatching(target);\n        } else {\n          pushFormStateMarkerIsNotMatching(target);\n        }\n      }\n    }\n  }\n\n  var prevKeyPath = task.keyPath;\n  task.keyPath = keyPath;\n\n  if (hasId) {\n    // This component materialized an id. We treat this as its own level, with\n    // a single \"child\" slot.\n    var prevTreeContext = task.treeContext;\n    var totalChildren = 1;\n    var index = 0; // Modify the id context. Because we'll need to reset this if something\n    // suspends or errors, we'll use the non-destructive render path.\n\n    task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);\n    renderNode(request, task, children, -1); // Like the other contexts, this does not need to be in a finally block\n    // because renderNode takes care of unwinding the stack.\n\n    task.treeContext = prevTreeContext;\n  } else if (didEmitFormStateMarkers) {\n    // If there were formState hooks, we must use the non-destructive path\n    // because this component is not a pure indirection; we emitted markers\n    // to the stream.\n    renderNode(request, task, children, -1);\n  } else {\n    // We're now successfully past this task, and we haven't modified the\n    // context stack. We don't have to pop back to the previous task every\n    // again, so we can use the destructive recursive form.\n    renderNodeDestructive(request, task, children, -1);\n  }\n\n  task.keyPath = prevKeyPath;\n}\n\nfunction validateFunctionComponentInDev(Component) {\n  {\n    if (Component) {\n      if (Component.childContextTypes) {\n        error('childContextTypes cannot be defined on a function component.\\n' + '  %s.childContextTypes = ...', Component.displayName || Component.name || 'Component');\n      }\n    }\n\n    if (Component.defaultProps !== undefined) {\n      var componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        error('%s: Support for defaultProps will be removed from function components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);\n\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\n\n        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n      }\n    }\n\n    if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n        error('%s: Function components do not support contextType.', _componentName4);\n\n        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n      }\n    }\n  }\n}\n\nfunction resolveDefaultProps(Component, baseProps) {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    var props = assign({}, baseProps);\n    var defaultProps = Component.defaultProps;\n\n    for (var propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n\n    return props;\n  }\n\n  return baseProps;\n}\n\nfunction renderForwardRef(request, task, keyPath, type, props, ref) {\n  var previousComponentStack = task.componentStack;\n  task.componentStack = createFunctionComponentStack(task, type.render);\n  var propsWithoutRef;\n\n  {\n    propsWithoutRef = props;\n  }\n\n  var children = renderWithHooks(request, task, keyPath, type.render, propsWithoutRef, ref);\n  var hasId = checkDidRenderIdHook();\n  var formStateCount = getFormStateCount();\n  var formStateMatchingIndex = getFormStateMatchingIndex();\n  finishFunctionComponent(request, task, keyPath, children, hasId, formStateCount, formStateMatchingIndex);\n  task.componentStack = previousComponentStack;\n}\n\nfunction renderMemo(request, task, keyPath, type, props, ref) {\n  var innerType = type.type;\n  var resolvedProps = resolveDefaultProps(innerType, props);\n  renderElement(request, task, keyPath, innerType, resolvedProps, ref);\n}\n\nfunction renderContextConsumer(request, task, keyPath, context, props) {\n  var render = props.children;\n\n  {\n    if (typeof render !== 'function') {\n      error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n    }\n  }\n\n  var newValue = readContext$1(context);\n  var newChildren = render(newValue);\n  var prevKeyPath = task.keyPath;\n  task.keyPath = keyPath;\n  renderNodeDestructive(request, task, newChildren, -1);\n  task.keyPath = prevKeyPath;\n}\n\nfunction renderContextProvider(request, task, keyPath, context, props) {\n  var value = props.value;\n  var children = props.children;\n  var prevSnapshot;\n\n  {\n    prevSnapshot = task.context;\n  }\n\n  var prevKeyPath = task.keyPath;\n  task.context = pushProvider(context, value);\n  task.keyPath = keyPath;\n  renderNodeDestructive(request, task, children, -1);\n  task.context = popProvider(context);\n  task.keyPath = prevKeyPath;\n\n  {\n    if (prevSnapshot !== task.context) {\n      error('Popping the context provider did not return back to the original snapshot. This is a bug in React.');\n    }\n  }\n}\n\nfunction renderLazyComponent(request, task, keyPath, lazyComponent, props, ref) {\n  var previousComponentStack = task.componentStack;\n  task.componentStack = createBuiltInComponentStack(task, 'Lazy');\n  var payload = lazyComponent._payload;\n  var init = lazyComponent._init;\n  var Component = init(payload);\n  var resolvedProps = resolveDefaultProps(Component, props);\n  renderElement(request, task, keyPath, Component, resolvedProps, ref);\n  task.componentStack = previousComponentStack;\n}\n\nfunction renderOffscreen(request, task, keyPath, props) {\n  var mode = props.mode;\n\n  if (mode === 'hidden') ; else {\n    // A visible Offscreen boundary is treated exactly like a fragment: a\n    // pure indirection.\n    var prevKeyPath = task.keyPath;\n    task.keyPath = keyPath;\n    renderNodeDestructive(request, task, props.children, -1);\n    task.keyPath = prevKeyPath;\n  }\n}\n\nfunction renderElement(request, task, keyPath, type, props, ref) {\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      renderClassComponent(request, task, keyPath, type, props);\n      return;\n    } else {\n      renderIndeterminateComponent(request, task, keyPath, type, props);\n      return;\n    }\n  }\n\n  if (typeof type === 'string') {\n    renderHostElement(request, task, keyPath, type, props);\n    return;\n  }\n\n  switch (type) {\n    // LegacyHidden acts the same as a fragment. This only works because we\n    // currently assume that every instance of LegacyHidden is accompanied by a\n    // host component wrapper. In the hidden mode, the host component is given a\n    // `hidden` attribute, which ensures that the initial HTML is not visible.\n    // To support the use of LegacyHidden as a true fragment, without an extra\n    // DOM node, we would have to hide the initial HTML in some other way.\n    // TODO: Delete in LegacyHidden. It's an unstable API only used in the\n    // www build. As a migration step, we could add a special prop to Offscreen\n    // that simulates the old behavior (no hiding, no change to effects).\n    case REACT_LEGACY_HIDDEN_TYPE:\n    case REACT_DEBUG_TRACING_MODE_TYPE:\n    case REACT_STRICT_MODE_TYPE:\n    case REACT_PROFILER_TYPE:\n    case REACT_FRAGMENT_TYPE:\n      {\n        var prevKeyPath = task.keyPath;\n        task.keyPath = keyPath;\n        renderNodeDestructive(request, task, props.children, -1);\n        task.keyPath = prevKeyPath;\n        return;\n      }\n\n    case REACT_OFFSCREEN_TYPE:\n      {\n        renderOffscreen(request, task, keyPath, props);\n        return;\n      }\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      {\n        var preiousComponentStack = task.componentStack;\n        task.componentStack = createBuiltInComponentStack(task, 'SuspenseList'); // TODO: SuspenseList should control the boundaries.\n\n        var _prevKeyPath3 = task.keyPath;\n        task.keyPath = keyPath;\n        renderNodeDestructive(request, task, props.children, -1);\n        task.keyPath = _prevKeyPath3;\n        task.componentStack = preiousComponentStack;\n        return;\n      }\n\n    case REACT_SCOPE_TYPE:\n      {\n\n        throw new Error('ReactDOMServer does not yet support scope components.');\n      }\n\n    case REACT_SUSPENSE_TYPE:\n      {\n        {\n          renderSuspenseBoundary(request, task, keyPath, props);\n        }\n\n        return;\n      }\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        {\n          renderForwardRef(request, task, keyPath, type, props, ref);\n          return;\n        }\n\n      case REACT_MEMO_TYPE:\n        {\n          renderMemo(request, task, keyPath, type, props, ref);\n          return;\n        }\n\n      case REACT_PROVIDER_TYPE:\n        {\n          {\n            var context = type._context;\n            renderContextProvider(request, task, keyPath, context, props);\n            return;\n          } // Fall through\n\n        }\n\n      case REACT_CONTEXT_TYPE:\n        {\n          {\n            var _context2 = type;\n\n            {\n              if (_context2._context !== undefined) {\n                _context2 = _context2._context;\n              }\n            }\n\n            renderContextConsumer(request, task, keyPath, _context2, props);\n            return;\n          }\n        }\n\n      case REACT_CONSUMER_TYPE:\n\n      case REACT_LAZY_TYPE:\n        {\n          renderLazyComponent(request, task, keyPath, type, props);\n          return;\n        }\n    }\n  }\n\n  var info = '';\n\n  {\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n    }\n  }\n\n  throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n}\n\nfunction resumeNode(request, task, segmentId, node, childIndex) {\n  var prevReplay = task.replay;\n  var blockedBoundary = task.blockedBoundary;\n  var resumedSegment = createPendingSegment(request, 0, null, task.formatContext, false, false);\n  resumedSegment.id = segmentId;\n  resumedSegment.parentFlushed = true;\n\n  try {\n    // Convert the current ReplayTask to a RenderTask.\n    var renderTask = task;\n    renderTask.replay = null;\n    renderTask.blockedSegment = resumedSegment;\n    renderNode(request, task, node, childIndex);\n    resumedSegment.status = COMPLETED;\n\n    if (blockedBoundary === null) {\n      request.completedRootSegment = resumedSegment;\n    } else {\n      queueCompletedSegment(blockedBoundary, resumedSegment);\n\n      if (blockedBoundary.parentFlushed) {\n        request.partialBoundaries.push(blockedBoundary);\n      }\n    }\n  } finally {\n    // Restore to a ReplayTask.\n    task.replay = prevReplay;\n    task.blockedSegment = null;\n  }\n}\n\nfunction replayElement(request, task, keyPath, name, keyOrIndex, childIndex, type, props, ref, replay) {\n  // We're replaying. Find the path to follow.\n  var replayNodes = replay.nodes;\n\n  for (var i = 0; i < replayNodes.length; i++) {\n    // Flow doesn't support refinement on tuples so we do it manually here.\n    var node = replayNodes[i];\n\n    if (keyOrIndex !== node[1]) {\n      continue;\n    }\n\n    if (node.length === 4) {\n      // Matched a replayable path.\n      // Let's double check that the component name matches as a precaution.\n      if (name !== null && name !== node[0]) {\n        throw new Error('Expected the resume to render <' + node[0] + '> in this slot but instead it rendered <' + name + '>. ' + \"The tree doesn't match so React will fallback to client rendering.\");\n      }\n\n      var childNodes = node[2];\n      var childSlots = node[3];\n      var currentNode = task.node;\n      task.replay = {\n        nodes: childNodes,\n        slots: childSlots,\n        pendingTasks: 1\n      };\n\n      try {\n        renderElement(request, task, keyPath, type, props, ref);\n\n        if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0 // TODO check remaining slots\n        ) {\n            throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n          }\n\n        task.replay.pendingTasks--;\n      } catch (x) {\n        if (typeof x === 'object' && x !== null && (x === SuspenseException || typeof x.then === 'function')) {\n          // Suspend\n          if (task.node === currentNode) {\n            // This same element suspended so we need to pop the replay we just added.\n            task.replay = replay;\n          }\n\n          throw x;\n        }\n\n        task.replay.pendingTasks--; // Unlike regular render, we don't terminate the siblings if we error\n        // during a replay. That's because this component didn't actually error\n        // in the original prerender. What's unable to complete is the child\n        // replay nodes which might be Suspense boundaries which are able to\n        // absorb the error and we can still continue with siblings.\n\n        var thrownInfo = getThrownInfo(request, task.componentStack);\n        erroredReplay(request, task.blockedBoundary, x, thrownInfo, childNodes, childSlots);\n      }\n\n      task.replay = replay;\n    } else {\n      // Let's double check that the component type matches.\n      if (type !== REACT_SUSPENSE_TYPE) {\n        var expectedType = 'Suspense';\n        throw new Error('Expected the resume to render <' + expectedType + '> in this slot but instead it rendered <' + (getComponentNameFromType(type) || 'Unknown') + '>. ' + \"The tree doesn't match so React will fallback to client rendering.\");\n      } // Matched a replayable path.\n\n\n      replaySuspenseBoundary(request, task, keyPath, props, node[5], node[2], node[3], node[4] === null ? [] : node[4][2], node[4] === null ? null : node[4][3]);\n    } // We finished rendering this node, so now we can consume this\n    // slot. This must happen after in case we rerender this task.\n\n\n    replayNodes.splice(i, 1);\n    return;\n  } // We didn't find any matching nodes. We assume that this element was already\n  // rendered in the prelude and skip it.\n\n} // $FlowFixMe[missing-local-annot]\n\n\nfunction validateIterable(iterable, iteratorFn) {\n  {\n    // We don't support rendering Generators because it's a mutation.\n    // See https://github.com/facebook/react/issues/12995\n    if (typeof Symbol === 'function' && iterable[Symbol.toStringTag] === 'Generator') {\n      if (!didWarnAboutGenerators) {\n        error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\n      }\n\n      didWarnAboutGenerators = true;\n    } // Warn about using Maps as children\n\n\n    if (iterable.entries === iteratorFn) {\n      if (!didWarnAboutMaps) {\n        error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n      }\n\n      didWarnAboutMaps = true;\n    }\n  }\n}\n\nfunction warnOnFunctionType(invalidChild) {\n  {\n    var name = invalidChild.displayName || invalidChild.name || 'Component';\n\n    error('Functions are not valid as a React child. This may happen if ' + 'you return %s instead of <%s /> from render. ' + 'Or maybe you meant to call this function rather than return it.', name, name);\n  }\n}\n\nfunction warnOnSymbolType(invalidChild) {\n  {\n    // eslint-disable-next-line react-internal/safe-string-coercion\n    var name = String(invalidChild);\n\n    error('Symbols are not valid as a React child.\\n' + '  %s', name);\n  }\n} // This function by it self renders a node and consumes the task by mutating it\n// to update the current execution state.\n\n\nfunction renderNodeDestructive(request, task, node, childIndex) {\n  if (task.replay !== null && typeof task.replay.slots === 'number') {\n    // TODO: Figure out a cheaper place than this hot path to do this check.\n    var resumeSegmentID = task.replay.slots;\n    resumeNode(request, task, resumeSegmentID, node, childIndex);\n    return;\n  } // Stash the node we're working on. We'll pick up from this task in case\n  // something suspends.\n\n\n  task.node = node;\n  task.childIndex = childIndex;\n\n  if (node === null) {\n    return;\n  } // Handle object types\n\n\n  if (typeof node === 'object') {\n    switch (node.$$typeof) {\n      case REACT_ELEMENT_TYPE:\n        {\n          var element = node;\n          var type = element.type;\n          var key = element.key;\n          var props = element.props;\n          var ref;\n\n          {\n            ref = element.ref;\n          }\n\n          var name = getComponentNameFromType(type);\n          var keyOrIndex = key == null ? childIndex === -1 ? 0 : childIndex : key;\n          var keyPath = [task.keyPath, name, keyOrIndex];\n\n          if (task.replay !== null) {\n            replayElement(request, task, keyPath, name, keyOrIndex, childIndex, type, props, ref, task.replay); // No matches found for this node. We assume it's already emitted in the\n            // prelude and skip it during the replay.\n          } else {\n            // We're doing a plain render.\n            renderElement(request, task, keyPath, type, props, ref);\n          }\n\n          return;\n        }\n\n      case REACT_PORTAL_TYPE:\n        throw new Error('Portals are not currently supported by the server renderer. ' + 'Render them conditionally so that they only appear on the client render.');\n\n      case REACT_LAZY_TYPE:\n        {\n          var previousComponentStack = task.componentStack;\n          task.componentStack = createBuiltInComponentStack(task, 'Lazy');\n          var lazyNode = node;\n          var payload = lazyNode._payload;\n          var init = lazyNode._init;\n          var resolvedNode = init(payload); // We restore the stack before rendering the resolved node because once the Lazy\n          // has resolved any future errors\n\n          task.componentStack = previousComponentStack; // Now we render the resolved node\n\n          renderNodeDestructive(request, task, resolvedNode, childIndex);\n          return;\n        }\n    }\n\n    if (isArray(node)) {\n      renderChildrenArray(request, task, node, childIndex);\n      return;\n    }\n\n    var iteratorFn = getIteratorFn(node);\n\n    if (iteratorFn) {\n      {\n        validateIterable(node, iteratorFn);\n      }\n\n      var iterator = iteratorFn.call(node);\n\n      if (iterator) {\n        // We need to know how many total children are in this set, so that we\n        // can allocate enough id slots to acommodate them. So we must exhaust\n        // the iterator before we start recursively rendering the children.\n        // TODO: This is not great but I think it's inherent to the id\n        // generation algorithm.\n        var step = iterator.next(); // If there are not entries, we need to push an empty so we start by checking that.\n\n        if (!step.done) {\n          var children = [];\n\n          do {\n            children.push(step.value);\n            step = iterator.next();\n          } while (!step.done);\n\n          renderChildrenArray(request, task, children, childIndex);\n          return;\n        }\n\n        return;\n      }\n    } // Usables are a valid React node type. When React encounters a Usable in\n    // a child position, it unwraps it using the same algorithm as `use`. For\n    // example, for promises, React will throw an exception to unwind the\n    // stack, then replay the component once the promise resolves.\n    //\n    // A difference from `use` is that React will keep unwrapping the value\n    // until it reaches a non-Usable type.\n    //\n    // e.g. Usable<Usable<Usable<T>>> should resolve to T\n\n\n    var maybeUsable = node;\n\n    if (typeof maybeUsable.then === 'function') {\n      // Clear any previous thenable state that was created by the unwrapping.\n      task.thenableState = null;\n      var thenable = maybeUsable;\n      return renderNodeDestructive(request, task, unwrapThenable(thenable), childIndex);\n    }\n\n    if (maybeUsable.$$typeof === REACT_CONTEXT_TYPE) {\n      var context = maybeUsable;\n      return renderNodeDestructive(request, task, readContext$1(context), childIndex);\n    } // $FlowFixMe[method-unbinding]\n\n\n    var childString = Object.prototype.toString.call(node);\n    throw new Error(\"Objects are not valid as a React child (found: \" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(node).join(', ') + '}' : childString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n  }\n\n  if (typeof node === 'string') {\n    var segment = task.blockedSegment;\n\n    if (segment === null) ; else {\n      segment.lastPushedText = pushTextInstance(segment.chunks, node, request.renderState, segment.lastPushedText);\n    }\n\n    return;\n  }\n\n  if (typeof node === 'number') {\n    var _segment = task.blockedSegment;\n\n    if (_segment === null) ; else {\n      _segment.lastPushedText = pushTextInstance(_segment.chunks, '' + node, request.renderState, _segment.lastPushedText);\n    }\n\n    return;\n  }\n\n  {\n    if (typeof node === 'function') {\n      warnOnFunctionType(node);\n    }\n\n    if (typeof node === 'symbol') {\n      warnOnSymbolType(node);\n    }\n  }\n}\n\nfunction replayFragment(request, task, children, childIndex) {\n  // If we're supposed follow this array, we'd expect to see a ReplayNode matching\n  // this fragment.\n  var replay = task.replay;\n  var replayNodes = replay.nodes;\n\n  for (var j = 0; j < replayNodes.length; j++) {\n    var node = replayNodes[j];\n\n    if (node[1] !== childIndex) {\n      continue;\n    } // Matched a replayable path.\n\n\n    var childNodes = node[2];\n    var childSlots = node[3];\n    task.replay = {\n      nodes: childNodes,\n      slots: childSlots,\n      pendingTasks: 1\n    };\n\n    try {\n      renderChildrenArray(request, task, children, -1);\n\n      if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {\n        throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n      }\n\n      task.replay.pendingTasks--;\n    } catch (x) {\n      if (typeof x === 'object' && x !== null && (x === SuspenseException || typeof x.then === 'function')) {\n        // Suspend\n        throw x;\n      }\n\n      task.replay.pendingTasks--; // Unlike regular render, we don't terminate the siblings if we error\n      // during a replay. That's because this component didn't actually error\n      // in the original prerender. What's unable to complete is the child\n      // replay nodes which might be Suspense boundaries which are able to\n      // absorb the error and we can still continue with siblings.\n      // This is an error, stash the component stack if it is null.\n\n      var thrownInfo = getThrownInfo(request, task.componentStack);\n      erroredReplay(request, task.blockedBoundary, x, thrownInfo, childNodes, childSlots);\n    }\n\n    task.replay = replay; // We finished rendering this node, so now we can consume this\n    // slot. This must happen after in case we rerender this task.\n\n    replayNodes.splice(j, 1);\n    break;\n  }\n}\n\nfunction renderChildrenArray(request, task, children, childIndex) {\n  var prevKeyPath = task.keyPath;\n\n  if (childIndex !== -1) {\n    task.keyPath = [task.keyPath, 'Fragment', childIndex];\n\n    if (task.replay !== null) {\n      replayFragment(request, // $FlowFixMe: Refined.\n      task, children, childIndex);\n      task.keyPath = prevKeyPath;\n      return;\n    }\n  }\n\n  var prevTreeContext = task.treeContext;\n  var totalChildren = children.length;\n\n  if (task.replay !== null) {\n    // Replay\n    // First we need to check if we have any resume slots at this level.\n    var resumeSlots = task.replay.slots;\n\n    if (resumeSlots !== null && typeof resumeSlots === 'object') {\n      for (var i = 0; i < totalChildren; i++) {\n        var node = children[i];\n        task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i); // We need to use the non-destructive form so that we can safely pop back\n        // up and render the sibling if something suspends.\n\n        var resumeSegmentID = resumeSlots[i]; // TODO: If this errors we should still continue with the next sibling.\n\n        if (typeof resumeSegmentID === 'number') {\n          resumeNode(request, task, resumeSegmentID, node, i); // We finished rendering this node, so now we can consume this\n          // slot. This must happen after in case we rerender this task.\n\n          delete resumeSlots[i];\n        } else {\n          renderNode(request, task, node, i);\n        }\n      }\n\n      task.treeContext = prevTreeContext;\n      task.keyPath = prevKeyPath;\n      return;\n    }\n  }\n\n  for (var _i = 0; _i < totalChildren; _i++) {\n    var _node = children[_i];\n    task.treeContext = pushTreeContext(prevTreeContext, totalChildren, _i); // We need to use the non-destructive form so that we can safely pop back\n    // up and render the sibling if something suspends.\n\n    renderNode(request, task, _node, _i);\n  } // Because this context is always set right before rendering every child, we\n  // only need to reset it to the previous value at the very end.\n\n\n  task.treeContext = prevTreeContext;\n  task.keyPath = prevKeyPath;\n}\n// resume it.\n\n\nfunction untrackBoundary(request, boundary) {\n  var trackedPostpones = request.trackedPostpones;\n\n  if (trackedPostpones === null) {\n    return;\n  }\n\n  var boundaryKeyPath = boundary.trackedContentKeyPath;\n\n  if (boundaryKeyPath === null) {\n    return;\n  }\n\n  var boundaryNode = trackedPostpones.workingMap.get(boundaryKeyPath);\n\n  if (boundaryNode === undefined) {\n    return;\n  } // Downgrade to plain ReplayNode since we won't replay through it.\n  // $FlowFixMe[cannot-write]: We intentionally downgrade this to the other tuple.\n\n\n  boundaryNode.length = 4; // Remove any resumable slots.\n\n  boundaryNode[2] = [];\n  boundaryNode[3] = null; // TODO: We should really just remove the boundary from all parent paths too so\n  // we don't replay the path to it.\n}\n\nfunction spawnNewSuspendedReplayTask(request, task, thenableState, x) {\n  var newTask = createReplayTask(request, thenableState, task.replay, task.node, task.childIndex, task.blockedBoundary, task.hoistableState, task.abortSet, task.keyPath, task.formatContext, task.legacyContext, task.context, task.treeContext, // We pop one task off the stack because the node that suspended will be tried again,\n  // which will add it back onto the stack.\n  task.componentStack !== null ? task.componentStack.parent : null, task.isFallback);\n  var ping = newTask.ping;\n  x.then(ping, ping);\n}\n\nfunction spawnNewSuspendedRenderTask(request, task, thenableState, x) {\n  // Something suspended, we'll need to create a new segment and resolve it later.\n  var segment = task.blockedSegment;\n  var insertionIndex = segment.chunks.length;\n  var newSegment = createPendingSegment(request, insertionIndex, null, task.formatContext, // Adopt the parent segment's leading text embed\n  segment.lastPushedText, // Assume we are text embedded at the trailing edge\n  true);\n  segment.children.push(newSegment); // Reset lastPushedText for current Segment since the new Segment \"consumed\" it\n\n  segment.lastPushedText = false;\n  var newTask = createRenderTask(request, thenableState, task.node, task.childIndex, task.blockedBoundary, newSegment, task.hoistableState, task.abortSet, task.keyPath, task.formatContext, task.legacyContext, task.context, task.treeContext, // We pop one task off the stack because the node that suspended will be tried again,\n  // which will add it back onto the stack.\n  task.componentStack !== null ? task.componentStack.parent : null, task.isFallback);\n  var ping = newTask.ping;\n  x.then(ping, ping);\n} // This is a non-destructive form of rendering a node. If it suspends it spawns\n// a new task and restores the context of this task to what it was before.\n\n\nfunction renderNode(request, task, node, childIndex) {\n  // Snapshot the current context in case something throws to interrupt the\n  // process.\n  var previousFormatContext = task.formatContext;\n  var previousLegacyContext = task.legacyContext;\n  var previousContext = task.context;\n  var previousKeyPath = task.keyPath;\n  var previousTreeContext = task.treeContext;\n  var previousComponentStack = task.componentStack;\n  var x; // Store how much we've pushed at this point so we can reset it in case something\n  // suspended partially through writing something.\n\n  var segment = task.blockedSegment;\n\n  if (segment === null) {\n    // Replay\n    try {\n      return renderNodeDestructive(request, task, node, childIndex);\n    } catch (thrownValue) {\n      resetHooksState();\n      x = thrownValue === SuspenseException ? // This is a special type of exception used for Suspense. For historical\n      // reasons, the rest of the Suspense implementation expects the thrown\n      // value to be a thenable, because before `use` existed that was the\n      // (unstable) API for suspending. This implementation detail can change\n      // later, once we deprecate the old API in favor of `use`.\n      getSuspendedThenable() : thrownValue;\n\n      if (typeof x === 'object' && x !== null) {\n        // $FlowFixMe[method-unbinding]\n        if (typeof x.then === 'function') {\n          var wakeable = x;\n          var thenableState = getThenableStateAfterSuspending();\n          spawnNewSuspendedReplayTask(request, // $FlowFixMe: Refined.\n          task, thenableState, wakeable); // Restore the context. We assume that this will be restored by the inner\n          // functions in case nothing throws so we don't use \"finally\" here.\n\n          task.formatContext = previousFormatContext;\n          task.legacyContext = previousLegacyContext;\n          task.context = previousContext;\n          task.keyPath = previousKeyPath;\n          task.treeContext = previousTreeContext;\n          task.componentStack = previousComponentStack; // Restore all active ReactContexts to what they were before.\n\n          switchContext(previousContext);\n          return;\n        }\n      } // TODO: Abort any undiscovered Suspense boundaries in the ReplayNode.\n\n    }\n  } else {\n    // Render\n    var childrenLength = segment.children.length;\n    var chunkLength = segment.chunks.length;\n\n    try {\n      return renderNodeDestructive(request, task, node, childIndex);\n    } catch (thrownValue) {\n      resetHooksState(); // Reset the write pointers to where we started.\n\n      segment.children.length = childrenLength;\n      segment.chunks.length = chunkLength;\n      x = thrownValue === SuspenseException ? // This is a special type of exception used for Suspense. For historical\n      // reasons, the rest of the Suspense implementation expects the thrown\n      // value to be a thenable, because before `use` existed that was the\n      // (unstable) API for suspending. This implementation detail can change\n      // later, once we deprecate the old API in favor of `use`.\n      getSuspendedThenable() : thrownValue;\n\n      if (typeof x === 'object' && x !== null) {\n        // $FlowFixMe[method-unbinding]\n        if (typeof x.then === 'function') {\n          var _wakeable = x;\n\n          var _thenableState = getThenableStateAfterSuspending();\n\n          spawnNewSuspendedRenderTask(request, // $FlowFixMe: Refined.\n          task, _thenableState, _wakeable); // Restore the context. We assume that this will be restored by the inner\n          // functions in case nothing throws so we don't use \"finally\" here.\n\n          task.formatContext = previousFormatContext;\n          task.legacyContext = previousLegacyContext;\n          task.context = previousContext;\n          task.keyPath = previousKeyPath;\n          task.treeContext = previousTreeContext;\n          task.componentStack = previousComponentStack; // Restore all active ReactContexts to what they were before.\n\n          switchContext(previousContext);\n          return;\n        }\n      }\n    }\n  } // Restore the context. We assume that this will be restored by the inner\n  // functions in case nothing throws so we don't use \"finally\" here.\n\n\n  task.formatContext = previousFormatContext;\n  task.legacyContext = previousLegacyContext;\n  task.context = previousContext;\n  task.keyPath = previousKeyPath;\n  task.treeContext = previousTreeContext; // We intentionally do not restore the component stack on the error pathway\n  // Whatever handles the error needs to use this stack which is the location of the\n  // error. We must restore the stack wherever we handle this\n  // Restore all active ReactContexts to what they were before.\n\n  switchContext(previousContext);\n  throw x;\n}\n\nfunction erroredReplay(request, boundary, error, errorInfo, replayNodes, resumeSlots) {\n  // Erroring during a replay doesn't actually cause an error by itself because\n  // that component has already rendered. What causes the error is the resumable\n  // points that we did not yet finish which will be below the point of the reset.\n  // For example, if we're replaying a path to a Suspense boundary that is not done\n  // that doesn't error the parent Suspense boundary.\n  // This might be a bit strange that the error in a parent gets thrown at a child.\n  // We log it only once and reuse the digest.\n  var errorDigest;\n\n  {\n    errorDigest = logRecoverableError(request, error, errorInfo);\n  }\n\n  abortRemainingReplayNodes(request, boundary, replayNodes, resumeSlots, error, errorDigest, errorInfo);\n}\n\nfunction erroredTask(request, boundary, error, errorInfo) {\n  // Report the error to a global handler.\n  var errorDigest;\n\n  {\n    errorDigest = logRecoverableError(request, error, errorInfo);\n  }\n\n  if (boundary === null) {\n    fatalError(request, error);\n  } else {\n    boundary.pendingTasks--;\n\n    if (boundary.status !== CLIENT_RENDERED) {\n      boundary.status = CLIENT_RENDERED;\n      encodeErrorForBoundary(boundary, errorDigest, error, errorInfo);\n      untrackBoundary(request, boundary); // Regardless of what happens next, this boundary won't be displayed,\n      // so we can flush it, if the parent already flushed.\n\n      if (boundary.parentFlushed) {\n        // We don't have a preference where in the queue this goes since it's likely\n        // to error on the client anyway. However, intentionally client-rendered\n        // boundaries should be flushed earlier so that they can start on the client.\n        // We reuse the same queue for errors.\n        request.clientRenderedBoundaries.push(boundary);\n      }\n    }\n  }\n\n  request.allPendingTasks--;\n\n  if (request.allPendingTasks === 0) {\n    completeAll(request);\n  }\n}\n\nfunction abortTaskSoft(task) {\n  // This aborts task without aborting the parent boundary that it blocks.\n  // It's used for when we didn't need this task to complete the tree.\n  // If task was needed, then it should use abortTask instead.\n  var request = this;\n  var boundary = task.blockedBoundary;\n  var segment = task.blockedSegment;\n\n  if (segment !== null) {\n    segment.status = ABORTED;\n    finishedTask(request, boundary, segment);\n  }\n}\n\nfunction abortRemainingSuspenseBoundary(request, rootSegmentID, error, errorDigest, errorInfo) {\n  var resumedBoundary = createSuspenseBoundary(request, new Set());\n  resumedBoundary.parentFlushed = true; // We restore the same id of this boundary as was used during prerender.\n\n  resumedBoundary.rootSegmentID = rootSegmentID;\n  resumedBoundary.status = CLIENT_RENDERED;\n  var errorMessage = error;\n\n  {\n    var errorPrefix = 'The server did not finish this Suspense boundary: ';\n\n    if (error && typeof error.message === 'string') {\n      errorMessage = errorPrefix + error.message;\n    } else {\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      errorMessage = errorPrefix + String(error);\n    }\n  }\n\n  encodeErrorForBoundary(resumedBoundary, errorDigest, errorMessage, errorInfo);\n\n  if (resumedBoundary.parentFlushed) {\n    request.clientRenderedBoundaries.push(resumedBoundary);\n  }\n}\n\nfunction abortRemainingReplayNodes(request, boundary, nodes, slots, error, errorDigest, errorInfo) {\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n\n    if (node.length === 4) {\n      abortRemainingReplayNodes(request, boundary, node[2], node[3], error, errorDigest, errorInfo);\n    } else {\n      var boundaryNode = node;\n      var rootSegmentID = boundaryNode[5];\n      abortRemainingSuspenseBoundary(request, rootSegmentID, error, errorDigest, errorInfo);\n    }\n  } // Empty the set, since we've cleared it now.\n\n\n  nodes.length = 0;\n\n  if (slots !== null) {\n    // We had something still to resume in the parent boundary. We must trigger\n    // the error on the parent boundary since it's not able to complete.\n    if (boundary === null) {\n      throw new Error('We should not have any resumable nodes in the shell. ' + 'This is a bug in React.');\n    } else if (boundary.status !== CLIENT_RENDERED) {\n      boundary.status = CLIENT_RENDERED;\n      encodeErrorForBoundary(boundary, errorDigest, error, errorInfo);\n\n      if (boundary.parentFlushed) {\n        request.clientRenderedBoundaries.push(boundary);\n      }\n    } // Empty the set\n\n\n    if (typeof slots === 'object') {\n      for (var index in slots) {\n        delete slots[index];\n      }\n    }\n  }\n}\n\nfunction abortTask(task, request, error) {\n  // This aborts the task and aborts the parent that it blocks, putting it into\n  // client rendered mode.\n  var boundary = task.blockedBoundary;\n  var segment = task.blockedSegment;\n\n  if (segment !== null) {\n    segment.status = ABORTED;\n  }\n\n  if (boundary === null) {\n    var errorInfo = {};\n\n    if (request.status !== CLOSING && request.status !== CLOSED) {\n      var replay = task.replay;\n\n      if (replay === null) {\n        // We didn't complete the root so we have nothing to show. We can close\n        // the request;\n        {\n          logRecoverableError(request, error, errorInfo);\n          fatalError(request, error);\n        }\n\n        return;\n      } else {\n        // If the shell aborts during a replay, that's not a fatal error. Instead\n        // we should be able to recover by client rendering all the root boundaries in\n        // the ReplaySet.\n        replay.pendingTasks--;\n\n        if (replay.pendingTasks === 0 && replay.nodes.length > 0) {\n          var errorDigest;\n\n          {\n            errorDigest = logRecoverableError(request, error, errorInfo);\n          }\n\n          abortRemainingReplayNodes(request, null, replay.nodes, replay.slots, error, errorDigest, errorInfo);\n        }\n\n        request.pendingRootTasks--;\n\n        if (request.pendingRootTasks === 0) {\n          completeShell(request);\n        }\n      }\n    }\n  } else {\n    boundary.pendingTasks--;\n\n    if (boundary.status !== CLIENT_RENDERED) {\n      boundary.status = CLIENT_RENDERED; // We construct an errorInfo from the boundary's componentStack so the error in dev will indicate which\n      // boundary the message is referring to\n\n      var _errorInfo = getThrownInfo(request, task.componentStack);\n\n      var _errorDigest;\n\n      {\n        _errorDigest = logRecoverableError(request, error, _errorInfo);\n      }\n\n      var errorMessage = error;\n\n      {\n        var errorPrefix = 'The server did not finish this Suspense boundary: ';\n\n        if (error && typeof error.message === 'string') {\n          errorMessage = errorPrefix + error.message;\n        } else {\n          // eslint-disable-next-line react-internal/safe-string-coercion\n          errorMessage = errorPrefix + String(error);\n        }\n      }\n\n      encodeErrorForBoundary(boundary, _errorDigest, errorMessage, _errorInfo);\n      untrackBoundary(request, boundary);\n\n      if (boundary.parentFlushed) {\n        request.clientRenderedBoundaries.push(boundary);\n      }\n    } // If this boundary was still pending then we haven't already cancelled its fallbacks.\n    // We'll need to abort the fallbacks, which will also error that parent boundary.\n\n\n    boundary.fallbackAbortableTasks.forEach(function (fallbackTask) {\n      return abortTask(fallbackTask, request, error);\n    });\n    boundary.fallbackAbortableTasks.clear();\n  }\n\n  request.allPendingTasks--;\n\n  if (request.allPendingTasks === 0) {\n    completeAll(request);\n  }\n}\n\nfunction safelyEmitEarlyPreloads(request, shellComplete) {\n  try {\n    emitEarlyPreloads(request.renderState, request.resumableState, shellComplete);\n  } catch (error) {\n    // We assume preloads are optimistic and thus non-fatal if errored.\n    var errorInfo = {};\n    logRecoverableError(request, error, errorInfo);\n  }\n} // I extracted this function out because we want to ensure we consistently emit preloads before\n// transitioning to the next request stage and this transition can happen in multiple places in this\n// implementation.\n\n\nfunction completeShell(request) {\n  if (request.trackedPostpones === null) {\n    // We only emit early preloads on shell completion for renders. For prerenders\n    // we wait for the entire Request to finish because we are not responding to a\n    // live request and can wait for as much data as possible.\n    // we should only be calling completeShell when the shell is complete so we\n    // just use a literal here\n    var shellComplete = true;\n    safelyEmitEarlyPreloads(request, shellComplete);\n  } // We have completed the shell so the shell can't error anymore.\n\n\n  request.onShellError = noop;\n  var onShellReady = request.onShellReady;\n  onShellReady();\n} // I extracted this function out because we want to ensure we consistently emit preloads before\n// transitioning to the next request stage and this transition can happen in multiple places in this\n// implementation.\n\n\nfunction completeAll(request) {\n  // During a render the shell must be complete if the entire request is finished\n  // however during a Prerender it is possible that the shell is incomplete because\n  // it postponed. We cannot use rootPendingTasks in the prerender case because\n  // those hit zero even when the shell postpones. Instead we look at the completedRootSegment\n  var shellComplete = request.trackedPostpones === null ? // Render, we assume it is completed\n  true : // Prerender Request, we use the state of the root segment\n  request.completedRootSegment === null || request.completedRootSegment.status !== POSTPONED;\n  safelyEmitEarlyPreloads(request, shellComplete);\n  var onAllReady = request.onAllReady;\n  onAllReady();\n}\n\nfunction queueCompletedSegment(boundary, segment) {\n  if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null && segment.children[0].id === -1) {\n    // This is an empty segment. There's nothing to write, so we can instead transfer the ID\n    // to the child. That way any existing references point to the child.\n    var childSegment = segment.children[0];\n    childSegment.id = segment.id;\n    childSegment.parentFlushed = true;\n\n    if (childSegment.status === COMPLETED) {\n      queueCompletedSegment(boundary, childSegment);\n    }\n  } else {\n    var completedSegments = boundary.completedSegments;\n    completedSegments.push(segment);\n  }\n}\n\nfunction finishedTask(request, boundary, segment) {\n  if (boundary === null) {\n    if (segment !== null && segment.parentFlushed) {\n      if (request.completedRootSegment !== null) {\n        throw new Error('There can only be one root segment. This is a bug in React.');\n      }\n\n      request.completedRootSegment = segment;\n    }\n\n    request.pendingRootTasks--;\n\n    if (request.pendingRootTasks === 0) {\n      completeShell(request);\n    }\n  } else {\n    boundary.pendingTasks--;\n\n    if (boundary.status === CLIENT_RENDERED) ; else if (boundary.pendingTasks === 0) {\n      if (boundary.status === PENDING) {\n        boundary.status = COMPLETED;\n      } // This must have been the last segment we were waiting on. This boundary is now complete.\n\n\n      if (segment !== null && segment.parentFlushed) {\n        // Our parent segment already flushed, so we need to schedule this segment to be emitted.\n        // If it is a segment that was aborted, we'll write other content instead so we don't need\n        // to emit it.\n        if (segment.status === COMPLETED) {\n          queueCompletedSegment(boundary, segment);\n        }\n      }\n\n      if (boundary.parentFlushed) {\n        // The segment might be part of a segment that didn't flush yet, but if the boundary's\n        // parent flushed, we need to schedule the boundary to be emitted.\n        request.completedBoundaries.push(boundary);\n      } // We can now cancel any pending task on the fallback since we won't need to show it anymore.\n      // This needs to happen after we read the parentFlushed flags because aborting can finish\n      // work which can trigger user code, which can start flushing, which can change those flags.\n      // If the boundary was POSTPONED, we still need to finish the fallback first.\n\n\n      if (boundary.status === COMPLETED) {\n        boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);\n        boundary.fallbackAbortableTasks.clear();\n      }\n    } else {\n      if (segment !== null && segment.parentFlushed) {\n        // Our parent already flushed, so we need to schedule this segment to be emitted.\n        // If it is a segment that was aborted, we'll write other content instead so we don't need\n        // to emit it.\n        if (segment.status === COMPLETED) {\n          queueCompletedSegment(boundary, segment);\n          var completedSegments = boundary.completedSegments;\n\n          if (completedSegments.length === 1) {\n            // This is the first time since we last flushed that we completed anything.\n            // We can schedule this boundary to emit its partially completed segments early\n            // in case the parent has already been flushed.\n            if (boundary.parentFlushed) {\n              request.partialBoundaries.push(boundary);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  request.allPendingTasks--;\n\n  if (request.allPendingTasks === 0) {\n    completeAll(request);\n  }\n}\n\nfunction retryTask(request, task) {\n  var segment = task.blockedSegment;\n\n  if (segment === null) {\n    retryReplayTask(request, // $FlowFixMe: Refined.\n    task);\n  } else {\n    retryRenderTask(request, // $FlowFixMe: Refined.\n    task, segment);\n  }\n}\n\nfunction retryRenderTask(request, task, segment) {\n  if (segment.status !== PENDING) {\n    // We completed this by other means before we had a chance to retry it.\n    return;\n  } // We restore the context to what it was when we suspended.\n  // We don't restore it after we leave because it's likely that we'll end up\n  // needing a very similar context soon again.\n\n\n  switchContext(task.context);\n  var prevTaskInDEV = null;\n\n  {\n    prevTaskInDEV = currentTaskInDEV;\n    currentTaskInDEV = task;\n  }\n\n  var childrenLength = segment.children.length;\n  var chunkLength = segment.chunks.length;\n\n  try {\n    // We call the destructive form that mutates this task. That way if something\n    // suspends again, we can reuse the same task instead of spawning a new one.\n    renderNodeDestructive(request, task, task.node, task.childIndex);\n    pushSegmentFinale(segment.chunks, request.renderState, segment.lastPushedText, segment.textEmbedded);\n    task.abortSet.delete(task);\n    segment.status = COMPLETED;\n    finishedTask(request, task.blockedBoundary, segment);\n  } catch (thrownValue) {\n    resetHooksState(); // Reset the write pointers to where we started.\n\n    segment.children.length = childrenLength;\n    segment.chunks.length = chunkLength;\n    var x = thrownValue === SuspenseException ? // This is a special type of exception used for Suspense. For historical\n    // reasons, the rest of the Suspense implementation expects the thrown\n    // value to be a thenable, because before `use` existed that was the\n    // (unstable) API for suspending. This implementation detail can change\n    // later, once we deprecate the old API in favor of `use`.\n    getSuspendedThenable() : thrownValue;\n\n    if (typeof x === 'object' && x !== null) {\n      // $FlowFixMe[method-unbinding]\n      if (typeof x.then === 'function') {\n        // Something suspended again, let's pick it back up later.\n        var ping = task.ping;\n        x.then(ping, ping);\n        task.thenableState = getThenableStateAfterSuspending();\n        return;\n      }\n    }\n\n    var errorInfo = getThrownInfo(request, task.componentStack);\n    task.abortSet.delete(task);\n    segment.status = ERRORED;\n    erroredTask(request, task.blockedBoundary, x, errorInfo);\n    return;\n  } finally {\n    {\n      currentTaskInDEV = prevTaskInDEV;\n    }\n  }\n}\n\nfunction retryReplayTask(request, task) {\n  if (task.replay.pendingTasks === 0) {\n    // There are no pending tasks working on this set, so we must have aborted.\n    return;\n  } // We restore the context to what it was when we suspended.\n  // We don't restore it after we leave because it's likely that we'll end up\n  // needing a very similar context soon again.\n\n\n  switchContext(task.context);\n  var prevTaskInDEV = null;\n\n  {\n    prevTaskInDEV = currentTaskInDEV;\n    currentTaskInDEV = task;\n  }\n\n  try {\n    // We call the destructive form that mutates this task. That way if something\n    // suspends again, we can reuse the same task instead of spawning a new one.\n    renderNodeDestructive(request, task, task.node, task.childIndex);\n\n    if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {\n      throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n    }\n\n    task.replay.pendingTasks--;\n    task.abortSet.delete(task);\n    finishedTask(request, task.blockedBoundary, null);\n  } catch (thrownValue) {\n    resetHooksState();\n    var x = thrownValue === SuspenseException ? // This is a special type of exception used for Suspense. For historical\n    // reasons, the rest of the Suspense implementation expects the thrown\n    // value to be a thenable, because before `use` existed that was the\n    // (unstable) API for suspending. This implementation detail can change\n    // later, once we deprecate the old API in favor of `use`.\n    getSuspendedThenable() : thrownValue;\n\n    if (typeof x === 'object' && x !== null) {\n      // $FlowFixMe[method-unbinding]\n      if (typeof x.then === 'function') {\n        // Something suspended again, let's pick it back up later.\n        var ping = task.ping;\n        x.then(ping, ping);\n        task.thenableState = getThenableStateAfterSuspending();\n        return;\n      }\n    }\n\n    task.replay.pendingTasks--;\n    task.abortSet.delete(task);\n    var errorInfo = getThrownInfo(request, task.componentStack);\n    erroredReplay(request, task.blockedBoundary, x, errorInfo, task.replay.nodes, task.replay.slots);\n    request.pendingRootTasks--;\n\n    if (request.pendingRootTasks === 0) {\n      completeShell(request);\n    }\n\n    request.allPendingTasks--;\n\n    if (request.allPendingTasks === 0) {\n      completeAll(request);\n    }\n\n    return;\n  } finally {\n    {\n      currentTaskInDEV = prevTaskInDEV;\n    }\n  }\n}\n\nfunction performWork(request) {\n  if (request.status === CLOSED) {\n    return;\n  }\n\n  var prevContext = getActiveContext();\n  var prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = HooksDispatcher;\n  var prevCacheDispatcher;\n\n  {\n    prevCacheDispatcher = ReactCurrentCache.current;\n    ReactCurrentCache.current = DefaultCacheDispatcher;\n  }\n\n  var prevRequest = currentRequest;\n  currentRequest = request;\n  var prevGetCurrentStackImpl;\n\n  {\n    prevGetCurrentStackImpl = ReactDebugCurrentFrame.getCurrentStack;\n    ReactDebugCurrentFrame.getCurrentStack = getCurrentStackInDEV;\n  }\n\n  var prevResumableState = currentResumableState;\n  setCurrentResumableState(request.resumableState);\n\n  try {\n    var pingedTasks = request.pingedTasks;\n    var i;\n\n    for (i = 0; i < pingedTasks.length; i++) {\n      var task = pingedTasks[i];\n      retryTask(request, task);\n    }\n\n    pingedTasks.splice(0, i);\n\n    if (request.destination !== null) {\n      flushCompletedQueues(request, request.destination);\n    }\n  } catch (error) {\n    var errorInfo = {};\n    logRecoverableError(request, error, errorInfo);\n    fatalError(request, error);\n  } finally {\n    setCurrentResumableState(prevResumableState);\n    ReactCurrentDispatcher.current = prevDispatcher;\n\n    {\n      ReactCurrentCache.current = prevCacheDispatcher;\n    }\n\n    {\n      ReactDebugCurrentFrame.getCurrentStack = prevGetCurrentStackImpl;\n    }\n\n    if (prevDispatcher === HooksDispatcher) {\n      // This means that we were in a reentrant work loop. This could happen\n      // in a renderer that supports synchronous work like renderToString,\n      // when it's called from within another renderer.\n      // Normally we don't bother switching the contexts to their root/default\n      // values when leaving because we'll likely need the same or similar\n      // context again. However, when we're inside a synchronous loop like this\n      // we'll to restore the context to what it was before returning.\n      switchContext(prevContext);\n    }\n\n    currentRequest = prevRequest;\n  }\n}\n\nfunction flushPreamble(request, destination, rootSegment) {\n  var willFlushAllSegments = request.allPendingTasks === 0 && request.trackedPostpones === null;\n  writePreamble(destination, request.resumableState, request.renderState, willFlushAllSegments);\n}\n\nfunction flushSubtree(request, destination, segment, hoistableState) {\n  segment.parentFlushed = true;\n\n  switch (segment.status) {\n    case PENDING:\n      {\n        // We're emitting a placeholder for this segment to be filled in later.\n        // Therefore we'll need to assign it an ID - to refer to it by.\n        segment.id = request.nextSegmentId++; // Fallthrough\n      }\n\n    case POSTPONED:\n      {\n        var segmentID = segment.id; // When this segment finally completes it won't be embedded in text since it will flush separately\n\n        segment.lastPushedText = false;\n        segment.textEmbedded = false;\n        return writePlaceholder(destination, request.renderState, segmentID);\n      }\n\n    case COMPLETED:\n      {\n        segment.status = FLUSHED;\n        var r = true;\n        var chunks = segment.chunks;\n        var chunkIdx = 0;\n        var children = segment.children;\n\n        for (var childIdx = 0; childIdx < children.length; childIdx++) {\n          var nextChild = children[childIdx]; // Write all the chunks up until the next child.\n\n          for (; chunkIdx < nextChild.index; chunkIdx++) {\n            writeChunk(destination, chunks[chunkIdx]);\n          }\n\n          r = flushSegment(request, destination, nextChild, hoistableState);\n        } // Finally just write all the remaining chunks\n\n\n        for (; chunkIdx < chunks.length - 1; chunkIdx++) {\n          writeChunk(destination, chunks[chunkIdx]);\n        }\n\n        if (chunkIdx < chunks.length) {\n          r = writeChunkAndReturn(destination, chunks[chunkIdx]);\n        }\n\n        return r;\n      }\n\n    default:\n      {\n        throw new Error('Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.');\n      }\n  }\n}\n\nfunction flushSegment(request, destination, segment, hoistableState) {\n  var boundary = segment.boundary;\n\n  if (boundary === null) {\n    // Not a suspense boundary.\n    return flushSubtree(request, destination, segment, hoistableState);\n  }\n\n  boundary.parentFlushed = true; // This segment is a Suspense boundary. We need to decide whether to\n  // emit the content or the fallback now.\n\n  if (boundary.status === CLIENT_RENDERED) {\n    // Emit a client rendered suspense boundary wrapper.\n    // We never queue the inner boundary so we'll never emit its content or partial segments.\n    writeStartClientRenderedSuspenseBoundary(destination, request.renderState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack); // Flush the fallback.\n\n    flushSubtree(request, destination, segment, hoistableState);\n    return writeEndClientRenderedSuspenseBoundary(destination, request.renderState);\n  } else if (boundary.status !== COMPLETED) {\n    if (boundary.status === PENDING) {\n      // For pending boundaries we lazily assign an ID to the boundary\n      // and root segment.\n      boundary.rootSegmentID = request.nextSegmentId++;\n    }\n\n    if (boundary.completedSegments.length > 0) {\n      // If this is at least partially complete, we can queue it to be partially emitted early.\n      request.partialBoundaries.push(boundary);\n    } // This boundary is still loading. Emit a pending suspense boundary wrapper.\n\n\n    var id = boundary.rootSegmentID;\n    writeStartPendingSuspenseBoundary(destination, request.renderState, id); // We are going to flush the fallback so we need to hoist the fallback\n    // state to the parent boundary\n\n    {\n      if (hoistableState) {\n        hoistHoistables(hoistableState, boundary.fallbackState);\n      }\n    } // Flush the fallback.\n\n\n    flushSubtree(request, destination, segment, hoistableState);\n    return writeEndPendingSuspenseBoundary(destination);\n  } else if (boundary.byteSize > request.progressiveChunkSize) {\n    // This boundary is large and will be emitted separately so that we can progressively show\n    // other content. We add it to the queue during the flush because we have to ensure that\n    // the parent flushes first so that there's something to inject it into.\n    // We also have to make sure that it's emitted into the queue in a deterministic slot.\n    // I.e. we can't insert it here when it completes.\n    // Assign an ID to refer to the future content by.\n    boundary.rootSegmentID = request.nextSegmentId++;\n    request.completedBoundaries.push(boundary); // Emit a pending rendered suspense boundary wrapper.\n\n    writeStartPendingSuspenseBoundary(destination, request.renderState, boundary.rootSegmentID); // While we are going to flush the fallback we are going to follow it up with\n    // the completed boundary immediately so we make the choice to omit fallback\n    // boundary state from the parent since it will be replaced when the boundary\n    // flushes later in this pass or in a future flush\n    // Flush the fallback.\n\n    flushSubtree(request, destination, segment, hoistableState);\n    return writeEndPendingSuspenseBoundary(destination);\n  } else {\n    {\n      if (hoistableState) {\n        hoistHoistables(hoistableState, boundary.contentState);\n      }\n    } // We can inline this boundary's content as a complete boundary.\n\n\n    writeStartCompletedSuspenseBoundary(destination, request.renderState);\n    var completedSegments = boundary.completedSegments;\n\n    if (completedSegments.length !== 1) {\n      throw new Error('A previously unvisited boundary must have exactly one root segment. This is a bug in React.');\n    }\n\n    var contentSegment = completedSegments[0];\n    flushSegment(request, destination, contentSegment, hoistableState);\n    return writeEndCompletedSuspenseBoundary(destination, request.renderState);\n  }\n}\n\nfunction flushClientRenderedBoundary(request, destination, boundary) {\n  return writeClientRenderBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);\n}\n\nfunction flushSegmentContainer(request, destination, segment, hoistableState) {\n  writeStartSegment(destination, request.renderState, segment.parentFormatContext, segment.id);\n  flushSegment(request, destination, segment, hoistableState);\n  return writeEndSegment(destination, segment.parentFormatContext);\n}\n\nfunction flushCompletedBoundary(request, destination, boundary) {\n  var completedSegments = boundary.completedSegments;\n  var i = 0;\n\n  for (; i < completedSegments.length; i++) {\n    var segment = completedSegments[i];\n    flushPartiallyCompletedSegment(request, destination, boundary, segment);\n  }\n\n  completedSegments.length = 0;\n\n  {\n    writeHoistablesForBoundary(destination, boundary.contentState, request.renderState);\n  }\n\n  return writeCompletedBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.contentState);\n}\n\nfunction flushPartialBoundary(request, destination, boundary) {\n  var completedSegments = boundary.completedSegments;\n  var i = 0;\n\n  for (; i < completedSegments.length; i++) {\n    var segment = completedSegments[i];\n\n    if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {\n      i++;\n      completedSegments.splice(0, i); // Only write as much as the buffer wants. Something higher priority\n      // might want to write later.\n\n      return false;\n    }\n  }\n\n  completedSegments.splice(0, i);\n\n  {\n    return writeHoistablesForBoundary(destination, boundary.contentState, request.renderState);\n  }\n}\n\nfunction flushPartiallyCompletedSegment(request, destination, boundary, segment) {\n  if (segment.status === FLUSHED) {\n    // We've already flushed this inline.\n    return true;\n  }\n\n  var hoistableState = boundary.contentState;\n  var segmentID = segment.id;\n\n  if (segmentID === -1) {\n    // This segment wasn't previously referred to. This happens at the root of\n    // a boundary. We make kind of a leap here and assume this is the root.\n    var rootSegmentID = segment.id = boundary.rootSegmentID;\n\n    if (rootSegmentID === -1) {\n      throw new Error('A root segment ID must have been assigned by now. This is a bug in React.');\n    }\n\n    return flushSegmentContainer(request, destination, segment, hoistableState);\n  } else if (segmentID === boundary.rootSegmentID) {\n    // When we emit postponed boundaries, we might have assigned the ID already\n    // but it's still the root segment so we can't inject it into the parent yet.\n    return flushSegmentContainer(request, destination, segment, hoistableState);\n  } else {\n    flushSegmentContainer(request, destination, segment, hoistableState);\n    return writeCompletedSegmentInstruction(destination, request.resumableState, request.renderState, segmentID);\n  }\n}\n\nfunction flushCompletedQueues(request, destination) {\n\n  try {\n    // The structure of this is to go through each queue one by one and write\n    // until the sink tells us to stop. When we should stop, we still finish writing\n    // that item fully and then yield. At that point we remove the already completed\n    // items up until the point we completed them.\n    var i;\n    var completedRootSegment = request.completedRootSegment;\n\n    if (completedRootSegment !== null) {\n      if (completedRootSegment.status === POSTPONED) {\n        // We postponed the root, so we write nothing.\n        return;\n      } else if (request.pendingRootTasks === 0) {\n        if (enableFloat) {\n          flushPreamble(request, destination, completedRootSegment);\n        }\n\n        flushSegment(request, destination, completedRootSegment, null);\n        request.completedRootSegment = null;\n        writeCompletedRoot(destination, request.renderState);\n      } else {\n        // We haven't flushed the root yet so we don't need to check any other branches further down\n        return;\n      }\n    }\n\n    if (enableFloat) {\n      writeHoistables(destination, request.resumableState, request.renderState);\n    } // We emit client rendering instructions for already emitted boundaries first.\n    // This is so that we can signal to the client to start client rendering them as\n    // soon as possible.\n\n\n    var clientRenderedBoundaries = request.clientRenderedBoundaries;\n\n    for (i = 0; i < clientRenderedBoundaries.length; i++) {\n      var boundary = clientRenderedBoundaries[i];\n\n      if (!flushClientRenderedBoundary(request, destination, boundary)) {\n        request.destination = null;\n        i++;\n        clientRenderedBoundaries.splice(0, i);\n        return;\n      }\n    }\n\n    clientRenderedBoundaries.splice(0, i); // Next we emit any complete boundaries. It's better to favor boundaries\n    // that are completely done since we can actually show them, than it is to emit\n    // any individual segments from a partially complete boundary.\n\n    var completedBoundaries = request.completedBoundaries;\n\n    for (i = 0; i < completedBoundaries.length; i++) {\n      var _boundary = completedBoundaries[i];\n\n      if (!flushCompletedBoundary(request, destination, _boundary)) {\n        request.destination = null;\n        i++;\n        completedBoundaries.splice(0, i);\n        return;\n      }\n    }\n\n    completedBoundaries.splice(0, i); // Allow anything written so far to flush to the underlying sink before\n    // we continue with lower priorities.\n\n    completeWriting(destination);\n    beginWriting(destination); // TODO: Here we'll emit data used by hydration.\n    // Next we emit any segments of any boundaries that are partially complete\n    // but not deeply complete.\n\n    var partialBoundaries = request.partialBoundaries;\n\n    for (i = 0; i < partialBoundaries.length; i++) {\n      var _boundary2 = partialBoundaries[i];\n\n      if (!flushPartialBoundary(request, destination, _boundary2)) {\n        request.destination = null;\n        i++;\n        partialBoundaries.splice(0, i);\n        return;\n      }\n    }\n\n    partialBoundaries.splice(0, i); // Next we check the completed boundaries again. This may have had\n    // boundaries added to it in case they were too larged to be inlined.\n    // New ones might be added in this loop.\n\n    var largeBoundaries = request.completedBoundaries;\n\n    for (i = 0; i < largeBoundaries.length; i++) {\n      var _boundary3 = largeBoundaries[i];\n\n      if (!flushCompletedBoundary(request, destination, _boundary3)) {\n        request.destination = null;\n        i++;\n        largeBoundaries.splice(0, i);\n        return;\n      }\n    }\n\n    largeBoundaries.splice(0, i);\n  } finally {\n    if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 // We don't need to check any partially completed segments because\n    // either they have pending task or they're complete.\n    ) {\n        request.flushScheduled = false;\n\n        {\n          // We write the trailing tags but only if don't have any data to resume.\n          // If we need to resume we'll write the postamble in the resume instead.\n          {\n            writePostamble(destination, request.resumableState);\n          }\n        }\n\n        {\n          if (request.abortableTasks.size !== 0) {\n            error('There was still abortable task at the root when we closed. This is a bug in React.');\n          }\n        } // We're done.\n\n\n        close(destination); // We need to stop flowing now because we do not want any async contexts which might call\n        // float methods to initiate any flushes after this point\n\n        stopFlowing(request);\n      }\n  }\n}\n\nfunction startWork(request) {\n  request.flushScheduled = request.destination !== null;\n\n  {\n    scheduleWork(function () {\n      return performWork(request);\n    });\n  }\n\n  if (request.trackedPostpones === null) {\n    // this is either a regular render or a resume. For regular render we want\n    // to call emitEarlyPreloads after the first performWork because we want\n    // are responding to a live request and need to balance sending something early\n    // (i.e. don't want for the shell to finish) but we need something to send.\n    // The only implementation of this is for DOM at the moment and during resumes nothing\n    // actually emits but the code paths here are the same.\n    // During a prerender we don't want to be too aggressive in emitting early preloads\n    // because we aren't responding to a live request and we can wait for the prerender to\n    // postpone before we emit anything.\n    {\n      scheduleWork(function () {\n        return enqueueEarlyPreloadsAfterInitialWork(request);\n      });\n    }\n  }\n}\n\nfunction enqueueEarlyPreloadsAfterInitialWork(request) {\n  var shellComplete = request.pendingRootTasks === 0;\n  safelyEmitEarlyPreloads(request, shellComplete);\n}\n\nfunction enqueueFlush(request) {\n  if (request.flushScheduled === false && // If there are pinged tasks we are going to flush anyway after work completes\n  request.pingedTasks.length === 0 && // If there is no destination there is nothing we can flush to. A flush will\n  // happen when we start flowing again\n  request.destination !== null) {\n    request.flushScheduled = true;\n    scheduleWork(function () {\n      // We need to existence check destination again here because it might go away\n      // in between the enqueueFlush call and the work execution\n      var destination = request.destination;\n\n      if (destination) {\n        flushCompletedQueues(request, destination);\n      } else {\n        request.flushScheduled = false;\n      }\n    });\n  }\n} // This function is intented to only be called during the pipe function for the Node builds.\nfunction startFlowing(request, destination) {\n  if (request.status === CLOSING) {\n    request.status = CLOSED;\n    closeWithError(destination, request.fatalError);\n    return;\n  }\n\n  if (request.status === CLOSED) {\n    return;\n  }\n\n  if (request.destination !== null) {\n    // We're already flowing.\n    return;\n  }\n\n  request.destination = destination;\n\n  try {\n    flushCompletedQueues(request, destination);\n  } catch (error) {\n    var errorInfo = {};\n    logRecoverableError(request, error, errorInfo);\n    fatalError(request, error);\n  }\n}\nfunction stopFlowing(request) {\n  request.destination = null;\n} // This is called to early terminate a request. It puts all pending boundaries in client rendered state.\n\nfunction abort(request, reason) {\n  try {\n    var abortableTasks = request.abortableTasks;\n\n    if (abortableTasks.size > 0) {\n      var error = reason === undefined ? new Error('The render was aborted by the server without a reason.') : reason;\n      abortableTasks.forEach(function (task) {\n        return abortTask(task, request, error);\n      });\n      abortableTasks.clear();\n    }\n\n    if (request.destination !== null) {\n      flushCompletedQueues(request, request.destination);\n    }\n  } catch (error) {\n    var errorInfo = {};\n    logRecoverableError(request, error, errorInfo);\n    fatalError(request, error);\n  }\n}\nfunction flushResources(request) {\n  enqueueFlush(request);\n}\nfunction getFormState(request) {\n  return request.formState;\n}\nfunction getResumableState(request) {\n  return request.resumableState;\n}\nfunction getRenderState(request) {\n  return request.renderState;\n}\n\nfunction onError$1() {// Non-fatal errors are ignored.\n}\n\nfunction renderToStringImpl(children, options, generateStaticMarkup, abortReason) {\n  var didFatal = false;\n  var fatalError = null;\n  var result = '';\n  var destination = {\n    // $FlowFixMe[missing-local-annot]\n    push: function (chunk) {\n      if (chunk !== null) {\n        result += chunk;\n      }\n\n      return true;\n    },\n    // $FlowFixMe[missing-local-annot]\n    destroy: function (error) {\n      didFatal = true;\n      fatalError = error;\n    }\n  };\n  var readyToStream = false;\n\n  function onShellReady() {\n    readyToStream = true;\n  }\n\n  var resumableState = createResumableState(options ? options.identifierPrefix : undefined, undefined);\n  var request = createRequest(children, resumableState, createRenderState(resumableState, generateStaticMarkup), createRootFormatContext(), Infinity, onError$1, undefined, onShellReady, undefined, undefined, undefined);\n  startWork(request); // If anything suspended and is still pending, we'll abort it before writing.\n  // That way we write only client-rendered boundaries from the start.\n\n  abort(request, abortReason);\n  startFlowing(request, destination);\n\n  if (didFatal && fatalError !== abortReason) {\n    throw fatalError;\n  }\n\n  if (!readyToStream) {\n    // Note: This error message is the one we use on the client. It doesn't\n    // really make sense here. But this is the legacy server renderer, anyway.\n    // We're going to delete it soon.\n    throw new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To fix, ' + 'updates that suspend should be wrapped with startTransition.');\n  }\n\n  return result;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar ReactMarkupReadableStream = /*#__PURE__*/function (_Readable) {\n  _inheritsLoose(ReactMarkupReadableStream, _Readable);\n\n  function ReactMarkupReadableStream() {\n    var _this;\n\n    // Calls the stream.Readable(options) constructor. Consider exposing built-in\n    // features like highWaterMark in the future.\n    _this = _Readable.call(this, {}) || this;\n    _this.request = void 0;\n    _this.startedFlowing = void 0;\n    _this.request = null;\n    _this.startedFlowing = false;\n    return _this;\n  } // $FlowFixMe[missing-local-annot]\n\n\n  var _proto = ReactMarkupReadableStream.prototype;\n\n  _proto._destroy = function _destroy(err, callback) {\n    abort(this.request);\n    callback(err);\n  } // $FlowFixMe[missing-local-annot]\n  ;\n\n  _proto._read = function _read(size) {\n    if (this.startedFlowing) {\n      startFlowing(this.request, this);\n    }\n  };\n\n  return ReactMarkupReadableStream;\n}(stream.Readable);\n\nfunction onError() {// Non-fatal errors are ignored.\n}\n\nfunction renderToNodeStreamImpl(children, options, generateStaticMarkup) {\n  function onAllReady() {\n    // We wait until everything has loaded before starting to write.\n    // That way we only end up with fully resolved HTML even if we suspend.\n    destination.startedFlowing = true;\n    startFlowing(request, destination);\n  }\n\n  var destination = new ReactMarkupReadableStream();\n  var resumableState = createResumableState(options ? options.identifierPrefix : undefined, undefined);\n  var request = createRequest(children, resumableState, createRenderState(resumableState, false), createRootFormatContext(), Infinity, onError, onAllReady, undefined, undefined, undefined);\n  destination.request = request;\n  startWork(request);\n  return destination;\n}\n\nfunction renderToNodeStream(children, options) {\n  {\n    error('renderToNodeStream is deprecated. Use renderToPipeableStream instead.');\n  }\n\n  return renderToNodeStreamImpl(children, options);\n}\n\nfunction renderToStaticNodeStream(children, options) {\n  return renderToNodeStreamImpl(children, options);\n}\n\nfunction renderToString(children, options) {\n  return renderToStringImpl(children, options, false, 'The server used \"renderToString\" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to \"renderToPipeableStream\" which supports Suspense on the server');\n}\n\nfunction renderToStaticMarkup(children, options) {\n  return renderToStringImpl(children, options, true, 'The server used \"renderToStaticMarkup\" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to \"renderToPipeableStream\" which supports Suspense on the server');\n}\n\nexports.renderToNodeStream = renderToNodeStream;\nexports.renderToStaticMarkup = renderToStaticMarkup;\nexports.renderToStaticNodeStream = renderToStaticNodeStream;\nexports.renderToString = renderToString;\nexports.version = ReactVersion;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-legacy.node.development.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.node.development.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.node.development.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @license React\n * react-dom-server.node.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(rsc)/./node_modules/next/dist/compiled/react/index.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar async_hooks = __webpack_require__(/*! async_hooks */ \"async_hooks\");\nvar ReactDOM = __webpack_require__(/*! react-dom */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-dom.js\");\n\nvar ReactVersion = '18.3.0-canary-14898b6a9-20240318';\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      printWarning('warn', format, args);\n    }\n  }\n}\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_SCOPE_TYPE = Symbol.for('react.scope');\nvar REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// in case they error.\n\nvar jsxPropsParents = new WeakMap();\nvar jsxChildrenParents = new WeakMap();\nfunction objectName(object) {\n  // $FlowFixMe[method-unbinding]\n  var name = Object.prototype.toString.call(object);\n  return name.replace(/^\\[object (.*)\\]$/, function (m, p0) {\n    return p0;\n  });\n}\n\nfunction describeKeyForErrorMessage(key) {\n  var encodedKey = JSON.stringify(key);\n  return '\"' + key + '\"' === encodedKey ? key : encodedKey;\n}\n\nfunction describeValueForErrorMessage(value) {\n  switch (typeof value) {\n    case 'string':\n      {\n        return JSON.stringify(value.length <= 10 ? value : value.slice(0, 10) + '...');\n      }\n\n    case 'object':\n      {\n        if (isArray(value)) {\n          return '[...]';\n        }\n\n        if (value !== null && value.$$typeof === CLIENT_REFERENCE_TAG) {\n          return describeClientReference();\n        }\n\n        var name = objectName(value);\n\n        if (name === 'Object') {\n          return '{...}';\n        }\n\n        return name;\n      }\n\n    case 'function':\n      {\n        if (value.$$typeof === CLIENT_REFERENCE_TAG) {\n          return describeClientReference();\n        }\n\n        var _name = value.displayName || value.name;\n\n        return _name ? 'function ' + _name : 'function';\n      }\n\n    default:\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      return String(value);\n  }\n}\n\nfunction describeElementType(type) {\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeElementType(type.render);\n\n      case REACT_MEMO_TYPE:\n        return describeElementType(type.type);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeElementType(init(payload));\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar CLIENT_REFERENCE_TAG = Symbol.for('react.client.reference');\n\nfunction describeClientReference(ref) {\n  return 'client';\n}\n\nfunction describeObjectForErrorMessage(objectOrArray, expandedName) {\n  var objKind = objectName(objectOrArray);\n\n  if (objKind !== 'Object' && objKind !== 'Array') {\n    return objKind;\n  }\n\n  var str = '';\n  var start = -1;\n  var length = 0;\n\n  if (isArray(objectOrArray)) {\n    if (jsxChildrenParents.has(objectOrArray)) {\n      // Print JSX Children\n      var type = jsxChildrenParents.get(objectOrArray);\n      str = '<' + describeElementType(type) + '>';\n      var array = objectOrArray;\n\n      for (var i = 0; i < array.length; i++) {\n        var value = array[i];\n        var substr = void 0;\n\n        if (typeof value === 'string') {\n          substr = value;\n        } else if (typeof value === 'object' && value !== null) {\n          substr = '{' + describeObjectForErrorMessage(value) + '}';\n        } else {\n          substr = '{' + describeValueForErrorMessage(value) + '}';\n        }\n\n        if ('' + i === expandedName) {\n          start = str.length;\n          length = substr.length;\n          str += substr;\n        } else if (substr.length < 15 && str.length + substr.length < 40) {\n          str += substr;\n        } else {\n          str += '{...}';\n        }\n      }\n\n      str += '</' + describeElementType(type) + '>';\n    } else {\n      // Print Array\n      str = '[';\n      var _array = objectOrArray;\n\n      for (var _i = 0; _i < _array.length; _i++) {\n        if (_i > 0) {\n          str += ', ';\n        }\n\n        var _value = _array[_i];\n\n        var _substr = void 0;\n\n        if (typeof _value === 'object' && _value !== null) {\n          _substr = describeObjectForErrorMessage(_value);\n        } else {\n          _substr = describeValueForErrorMessage(_value);\n        }\n\n        if ('' + _i === expandedName) {\n          start = str.length;\n          length = _substr.length;\n          str += _substr;\n        } else if (_substr.length < 10 && str.length + _substr.length < 40) {\n          str += _substr;\n        } else {\n          str += '...';\n        }\n      }\n\n      str += ']';\n    }\n  } else {\n    if (objectOrArray.$$typeof === REACT_ELEMENT_TYPE) {\n      str = '<' + describeElementType(objectOrArray.type) + '/>';\n    } else if (objectOrArray.$$typeof === CLIENT_REFERENCE_TAG) {\n      return describeClientReference();\n    } else if (jsxPropsParents.has(objectOrArray)) {\n      // Print JSX\n      var _type = jsxPropsParents.get(objectOrArray);\n\n      str = '<' + (describeElementType(_type) || '...');\n      var object = objectOrArray;\n      var names = Object.keys(object);\n\n      for (var _i2 = 0; _i2 < names.length; _i2++) {\n        str += ' ';\n        var name = names[_i2];\n        str += describeKeyForErrorMessage(name) + '=';\n        var _value2 = object[name];\n\n        var _substr2 = void 0;\n\n        if (name === expandedName && typeof _value2 === 'object' && _value2 !== null) {\n          _substr2 = describeObjectForErrorMessage(_value2);\n        } else {\n          _substr2 = describeValueForErrorMessage(_value2);\n        }\n\n        if (typeof _value2 !== 'string') {\n          _substr2 = '{' + _substr2 + '}';\n        }\n\n        if (name === expandedName) {\n          start = str.length;\n          length = _substr2.length;\n          str += _substr2;\n        } else if (_substr2.length < 10 && str.length + _substr2.length < 40) {\n          str += _substr2;\n        } else {\n          str += '...';\n        }\n      }\n\n      str += '>';\n    } else {\n      // Print Object\n      str = '{';\n      var _object = objectOrArray;\n\n      var _names = Object.keys(_object);\n\n      for (var _i3 = 0; _i3 < _names.length; _i3++) {\n        if (_i3 > 0) {\n          str += ', ';\n        }\n\n        var _name2 = _names[_i3];\n        str += describeKeyForErrorMessage(_name2) + ': ';\n        var _value3 = _object[_name2];\n\n        var _substr3 = void 0;\n\n        if (typeof _value3 === 'object' && _value3 !== null) {\n          _substr3 = describeObjectForErrorMessage(_value3);\n        } else {\n          _substr3 = describeValueForErrorMessage(_value3);\n        }\n\n        if (_name2 === expandedName) {\n          start = str.length;\n          length = _substr3.length;\n          str += _substr3;\n        } else if (_substr3.length < 10 && str.length + _substr3.length < 40) {\n          str += _substr3;\n        } else {\n          str += '...';\n        }\n      }\n\n      str += '}';\n    }\n  }\n\n  if (expandedName === undefined) {\n    return str;\n  }\n\n  if (start > -1 && length > 0) {\n    var highlight = ' '.repeat(start) + '^'.repeat(length);\n    return '\\n  ' + str + '\\n  ' + highlight;\n  }\n\n  return '\\n  ' + str;\n}\n\nfunction scheduleWork(callback) {\n  setImmediate(callback);\n}\nfunction flushBuffered(destination) {\n  // If we don't have any more data to send right now.\n  // Flush whatever is in the buffer to the wire.\n  if (typeof destination.flush === 'function') {\n    // By convention the Zlib streams provide a flush function for this purpose.\n    // For Express, compression middleware adds this method.\n    destination.flush();\n  }\n}\nvar VIEW_SIZE = 2048;\nvar currentView = null;\nvar writtenBytes = 0;\nvar destinationHasCapacity$1 = true;\nfunction beginWriting(destination) {\n  currentView = new Uint8Array(VIEW_SIZE);\n  writtenBytes = 0;\n  destinationHasCapacity$1 = true;\n}\n\nfunction writeStringChunk(destination, stringChunk) {\n  if (stringChunk.length === 0) {\n    return;\n  } // maximum possible view needed to encode entire string\n\n\n  if (stringChunk.length * 3 > VIEW_SIZE) {\n    if (writtenBytes > 0) {\n      writeToDestination(destination, currentView.subarray(0, writtenBytes));\n      currentView = new Uint8Array(VIEW_SIZE);\n      writtenBytes = 0;\n    }\n\n    writeToDestination(destination, textEncoder.encode(stringChunk));\n    return;\n  }\n\n  var target = currentView;\n\n  if (writtenBytes > 0) {\n    target = currentView.subarray(writtenBytes);\n  }\n\n  var _textEncoder$encodeIn = textEncoder.encodeInto(stringChunk, target),\n      read = _textEncoder$encodeIn.read,\n      written = _textEncoder$encodeIn.written;\n\n  writtenBytes += written;\n\n  if (read < stringChunk.length) {\n    writeToDestination(destination, currentView.subarray(0, writtenBytes));\n    currentView = new Uint8Array(VIEW_SIZE);\n    writtenBytes = textEncoder.encodeInto(stringChunk.slice(read), currentView).written;\n  }\n\n  if (writtenBytes === VIEW_SIZE) {\n    writeToDestination(destination, currentView);\n    currentView = new Uint8Array(VIEW_SIZE);\n    writtenBytes = 0;\n  }\n}\n\nfunction writeViewChunk(destination, chunk) {\n  if (chunk.byteLength === 0) {\n    return;\n  }\n\n  if (chunk.byteLength > VIEW_SIZE) {\n    // this chunk may overflow a single view which implies it was not\n    // one that is cached by the streaming renderer. We will enqueu\n    // it directly and expect it is not re-used\n    if (writtenBytes > 0) {\n      writeToDestination(destination, currentView.subarray(0, writtenBytes));\n      currentView = new Uint8Array(VIEW_SIZE);\n      writtenBytes = 0;\n    }\n\n    writeToDestination(destination, chunk);\n    return;\n  }\n\n  var bytesToWrite = chunk;\n  var allowableBytes = currentView.length - writtenBytes;\n\n  if (allowableBytes < bytesToWrite.byteLength) {\n    // this chunk would overflow the current view. We enqueue a full view\n    // and start a new view with the remaining chunk\n    if (allowableBytes === 0) {\n      // the current view is already full, send it\n      writeToDestination(destination, currentView);\n    } else {\n      // fill up the current view and apply the remaining chunk bytes\n      // to a new view.\n      currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes);\n      writtenBytes += allowableBytes;\n      writeToDestination(destination, currentView);\n      bytesToWrite = bytesToWrite.subarray(allowableBytes);\n    }\n\n    currentView = new Uint8Array(VIEW_SIZE);\n    writtenBytes = 0;\n  }\n\n  currentView.set(bytesToWrite, writtenBytes);\n  writtenBytes += bytesToWrite.byteLength;\n\n  if (writtenBytes === VIEW_SIZE) {\n    writeToDestination(destination, currentView);\n    currentView = new Uint8Array(VIEW_SIZE);\n    writtenBytes = 0;\n  }\n}\n\nfunction writeChunk(destination, chunk) {\n  if (typeof chunk === 'string') {\n    writeStringChunk(destination, chunk);\n  } else {\n    writeViewChunk(destination, chunk);\n  }\n}\n\nfunction writeToDestination(destination, view) {\n  var currentHasCapacity = destination.write(view);\n  destinationHasCapacity$1 = destinationHasCapacity$1 && currentHasCapacity;\n}\n\nfunction writeChunkAndReturn(destination, chunk) {\n  writeChunk(destination, chunk);\n  return destinationHasCapacity$1;\n}\nfunction completeWriting(destination) {\n  if (currentView && writtenBytes > 0) {\n    destination.write(currentView.subarray(0, writtenBytes));\n  }\n\n  currentView = null;\n  writtenBytes = 0;\n  destinationHasCapacity$1 = true;\n}\nfunction close(destination) {\n  destination.end();\n}\nvar textEncoder = new util.TextEncoder();\nfunction stringToChunk(content) {\n  return content;\n}\nfunction stringToPrecomputedChunk(content) {\n  var precomputedChunk = textEncoder.encode(content);\n\n  {\n    if (precomputedChunk.byteLength > VIEW_SIZE) {\n      error('precomputed chunks must be smaller than the view size configured for this host. This is a bug in React.');\n    }\n  }\n\n  return precomputedChunk;\n}\nfunction closeWithError(destination, error) {\n  // $FlowFixMe[incompatible-call]: This is an Error object or the destination accepts other types.\n  destination.destroy(error);\n}\nfunction createFastHash(input) {\n  var hash = crypto.createHash('md5');\n  hash.update(input);\n  return hash.digest('hex');\n}\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\n\nfunction checkAttributeStringCoercion(value, attributeName) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided `%s` attribute is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', attributeName, typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nfunction checkOptionStringCoercion(value, propName) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided `%s` option is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', propName, typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nfunction checkCSSPropertyStringCoercion(value, propName) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided `%s` CSS property is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', propName, typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nfunction checkHtmlStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided HTML markup uses a value of unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\n// -----------------------------------------------------------------------------\nvar enableFloat = true; // Enables unstable_useMemoCache hook, intended as a compilation target for\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/* eslint-disable max-len */\n\nvar ATTRIBUTE_NAME_START_CHAR = \":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n/* eslint-enable max-len */\n\nvar ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + \"\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\nvar VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');\nvar illegalAttributeNameCache = {};\nvar validatedAttributeNameCache = {};\nfunction isAttributeNameSafe(attributeName) {\n  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {\n    return true;\n  }\n\n  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {\n    return false;\n  }\n\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n\n  illegalAttributeNameCache[attributeName] = true;\n\n  {\n    error('Invalid attribute name: `%s`', attributeName);\n  }\n\n  return false;\n}\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\nvar unitlessNumbers = new Set(['animationIterationCount', 'aspectRatio', 'borderImageOutset', 'borderImageSlice', 'borderImageWidth', 'boxFlex', 'boxFlexGroup', 'boxOrdinalGroup', 'columnCount', 'columns', 'flex', 'flexGrow', 'flexPositive', 'flexShrink', 'flexNegative', 'flexOrder', 'gridArea', 'gridRow', 'gridRowEnd', 'gridRowSpan', 'gridRowStart', 'gridColumn', 'gridColumnEnd', 'gridColumnSpan', 'gridColumnStart', 'fontWeight', 'lineClamp', 'lineHeight', 'opacity', 'order', 'orphans', 'scale', 'tabSize', 'widows', 'zIndex', 'zoom', 'fillOpacity', // SVG-related properties\n'floodOpacity', 'stopOpacity', 'strokeDasharray', 'strokeDashoffset', 'strokeMiterlimit', 'strokeOpacity', 'strokeWidth', 'MozAnimationIterationCount', // Known Prefixed Properties\n'MozBoxFlex', // TODO: Remove these since they shouldn't be used in modern code\n'MozBoxFlexGroup', 'MozLineClamp', 'msAnimationIterationCount', 'msFlex', 'msZoom', 'msFlexGrow', 'msFlexNegative', 'msFlexOrder', 'msFlexPositive', 'msFlexShrink', 'msGridColumn', 'msGridColumnSpan', 'msGridRow', 'msGridRowSpan', 'WebkitAnimationIterationCount', 'WebkitBoxFlex', 'WebKitBoxFlexGroup', 'WebkitBoxOrdinalGroup', 'WebkitColumnCount', 'WebkitColumns', 'WebkitFlex', 'WebkitFlexGrow', 'WebkitFlexPositive', 'WebkitFlexShrink', 'WebkitLineClamp']);\nfunction isUnitlessNumber (name) {\n  return unitlessNumbers.has(name);\n}\n\nvar aliases = new Map([['acceptCharset', 'accept-charset'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv'], // HTML and SVG attributes, but the SVG attribute is case sensitive.],\n['crossOrigin', 'crossorigin'], // This is a list of all SVG attributes that need special casing.\n// Regular attributes that just accept strings.],\n['accentHeight', 'accent-height'], ['alignmentBaseline', 'alignment-baseline'], ['arabicForm', 'arabic-form'], ['baselineShift', 'baseline-shift'], ['capHeight', 'cap-height'], ['clipPath', 'clip-path'], ['clipRule', 'clip-rule'], ['colorInterpolation', 'color-interpolation'], ['colorInterpolationFilters', 'color-interpolation-filters'], ['colorProfile', 'color-profile'], ['colorRendering', 'color-rendering'], ['dominantBaseline', 'dominant-baseline'], ['enableBackground', 'enable-background'], ['fillOpacity', 'fill-opacity'], ['fillRule', 'fill-rule'], ['floodColor', 'flood-color'], ['floodOpacity', 'flood-opacity'], ['fontFamily', 'font-family'], ['fontSize', 'font-size'], ['fontSizeAdjust', 'font-size-adjust'], ['fontStretch', 'font-stretch'], ['fontStyle', 'font-style'], ['fontVariant', 'font-variant'], ['fontWeight', 'font-weight'], ['glyphName', 'glyph-name'], ['glyphOrientationHorizontal', 'glyph-orientation-horizontal'], ['glyphOrientationVertical', 'glyph-orientation-vertical'], ['horizAdvX', 'horiz-adv-x'], ['horizOriginX', 'horiz-origin-x'], ['imageRendering', 'image-rendering'], ['letterSpacing', 'letter-spacing'], ['lightingColor', 'lighting-color'], ['markerEnd', 'marker-end'], ['markerMid', 'marker-mid'], ['markerStart', 'marker-start'], ['overlinePosition', 'overline-position'], ['overlineThickness', 'overline-thickness'], ['paintOrder', 'paint-order'], ['panose-1', 'panose-1'], ['pointerEvents', 'pointer-events'], ['renderingIntent', 'rendering-intent'], ['shapeRendering', 'shape-rendering'], ['stopColor', 'stop-color'], ['stopOpacity', 'stop-opacity'], ['strikethroughPosition', 'strikethrough-position'], ['strikethroughThickness', 'strikethrough-thickness'], ['strokeDasharray', 'stroke-dasharray'], ['strokeDashoffset', 'stroke-dashoffset'], ['strokeLinecap', 'stroke-linecap'], ['strokeLinejoin', 'stroke-linejoin'], ['strokeMiterlimit', 'stroke-miterlimit'], ['strokeOpacity', 'stroke-opacity'], ['strokeWidth', 'stroke-width'], ['textAnchor', 'text-anchor'], ['textDecoration', 'text-decoration'], ['textRendering', 'text-rendering'], ['transformOrigin', 'transform-origin'], ['underlinePosition', 'underline-position'], ['underlineThickness', 'underline-thickness'], ['unicodeBidi', 'unicode-bidi'], ['unicodeRange', 'unicode-range'], ['unitsPerEm', 'units-per-em'], ['vAlphabetic', 'v-alphabetic'], ['vHanging', 'v-hanging'], ['vIdeographic', 'v-ideographic'], ['vMathematical', 'v-mathematical'], ['vectorEffect', 'vector-effect'], ['vertAdvY', 'vert-adv-y'], ['vertOriginX', 'vert-origin-x'], ['vertOriginY', 'vert-origin-y'], ['wordSpacing', 'word-spacing'], ['writingMode', 'writing-mode'], ['xmlnsXlink', 'xmlns:xlink'], ['xHeight', 'x-height']]);\nfunction getAttributeAlias (name) {\n  return aliases.get(name) || name;\n}\n\nvar hasReadOnlyValue = {\n  button: true,\n  checkbox: true,\n  image: true,\n  hidden: true,\n  radio: true,\n  reset: true,\n  submit: true\n};\nfunction checkControlledValueProps(tagName, props) {\n  {\n    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {\n      if (tagName === 'select') {\n        error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, set `onChange`.');\n      } else {\n        error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.');\n      }\n    }\n\n    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {\n      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n    }\n  }\n}\n\nvar ariaProperties = {\n  'aria-current': 0,\n  // state\n  'aria-description': 0,\n  'aria-details': 0,\n  'aria-disabled': 0,\n  // state\n  'aria-hidden': 0,\n  // state\n  'aria-invalid': 0,\n  // state\n  'aria-keyshortcuts': 0,\n  'aria-label': 0,\n  'aria-roledescription': 0,\n  // Widget Attributes\n  'aria-autocomplete': 0,\n  'aria-checked': 0,\n  'aria-expanded': 0,\n  'aria-haspopup': 0,\n  'aria-level': 0,\n  'aria-modal': 0,\n  'aria-multiline': 0,\n  'aria-multiselectable': 0,\n  'aria-orientation': 0,\n  'aria-placeholder': 0,\n  'aria-pressed': 0,\n  'aria-readonly': 0,\n  'aria-required': 0,\n  'aria-selected': 0,\n  'aria-sort': 0,\n  'aria-valuemax': 0,\n  'aria-valuemin': 0,\n  'aria-valuenow': 0,\n  'aria-valuetext': 0,\n  // Live Region Attributes\n  'aria-atomic': 0,\n  'aria-busy': 0,\n  'aria-live': 0,\n  'aria-relevant': 0,\n  // Drag-and-Drop Attributes\n  'aria-dropeffect': 0,\n  'aria-grabbed': 0,\n  // Relationship Attributes\n  'aria-activedescendant': 0,\n  'aria-colcount': 0,\n  'aria-colindex': 0,\n  'aria-colspan': 0,\n  'aria-controls': 0,\n  'aria-describedby': 0,\n  'aria-errormessage': 0,\n  'aria-flowto': 0,\n  'aria-labelledby': 0,\n  'aria-owns': 0,\n  'aria-posinset': 0,\n  'aria-rowcount': 0,\n  'aria-rowindex': 0,\n  'aria-rowspan': 0,\n  'aria-setsize': 0\n};\n\nvar warnedProperties$1 = {};\nvar rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\nvar rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\n\nfunction validateProperty$1(tagName, name) {\n  {\n    if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {\n      return true;\n    }\n\n    if (rARIACamel$1.test(name)) {\n      var ariaName = 'aria-' + name.slice(4).toLowerCase();\n      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n      // DOM properties, then it is an invalid aria-* attribute.\n\n      if (correctName == null) {\n        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);\n\n        warnedProperties$1[name] = true;\n        return true;\n      } // aria-* attributes should be lowercase; suggest the lowercase version.\n\n\n      if (name !== correctName) {\n        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);\n\n        warnedProperties$1[name] = true;\n        return true;\n      }\n    }\n\n    if (rARIA$1.test(name)) {\n      var lowerCasedName = name.toLowerCase();\n      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n      // DOM properties, then it is an invalid aria-* attribute.\n\n      if (standardName == null) {\n        warnedProperties$1[name] = true;\n        return false;\n      } // aria-* attributes should be lowercase; suggest the lowercase version.\n\n\n      if (name !== standardName) {\n        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);\n\n        warnedProperties$1[name] = true;\n        return true;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction validateProperties$2(type, props) {\n  {\n    var invalidProps = [];\n\n    for (var key in props) {\n      var isValid = validateProperty$1(type, key);\n\n      if (!isValid) {\n        invalidProps.push(key);\n      }\n    }\n\n    var unknownPropString = invalidProps.map(function (prop) {\n      return '`' + prop + '`';\n    }).join(', ');\n\n    if (invalidProps.length === 1) {\n      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);\n    } else if (invalidProps.length > 1) {\n      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);\n    }\n  }\n}\n\nvar didWarnValueNull = false;\nfunction validateProperties$1(type, props) {\n  {\n    if (type !== 'input' && type !== 'textarea' && type !== 'select') {\n      return;\n    }\n\n    if (props != null && props.value === null && !didWarnValueNull) {\n      didWarnValueNull = true;\n\n      if (type === 'select' && props.multiple) {\n        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);\n      } else {\n        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);\n      }\n    }\n  }\n}\n\nfunction isCustomElement(tagName, props) {\n  if (tagName.indexOf('-') === -1) {\n    return false;\n  }\n\n  switch (tagName) {\n    // These are reserved SVG and MathML elements.\n    // We don't mind this list too much because we expect it to never grow.\n    // The alternative is to track the namespace in a few places which is convoluted.\n    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n    case 'annotation-xml':\n    case 'color-profile':\n    case 'font-face':\n    case 'font-face-src':\n    case 'font-face-uri':\n    case 'font-face-format':\n    case 'font-face-name':\n    case 'missing-glyph':\n      return false;\n\n    default:\n      return true;\n  }\n}\n\n// When adding attributes to the HTML or SVG allowed attribute list, be sure to\n// also add them to this module to ensure casing and incorrect name\n// warnings.\nvar possibleStandardNames = {\n  // HTML\n  accept: 'accept',\n  acceptcharset: 'acceptCharset',\n  'accept-charset': 'acceptCharset',\n  accesskey: 'accessKey',\n  action: 'action',\n  allowfullscreen: 'allowFullScreen',\n  alt: 'alt',\n  as: 'as',\n  async: 'async',\n  autocapitalize: 'autoCapitalize',\n  autocomplete: 'autoComplete',\n  autocorrect: 'autoCorrect',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  autosave: 'autoSave',\n  capture: 'capture',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  challenge: 'challenge',\n  charset: 'charSet',\n  checked: 'checked',\n  children: 'children',\n  cite: 'cite',\n  class: 'className',\n  classid: 'classID',\n  classname: 'className',\n  cols: 'cols',\n  colspan: 'colSpan',\n  content: 'content',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  controls: 'controls',\n  controlslist: 'controlsList',\n  coords: 'coords',\n  crossorigin: 'crossOrigin',\n  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',\n  data: 'data',\n  datetime: 'dateTime',\n  default: 'default',\n  defaultchecked: 'defaultChecked',\n  defaultvalue: 'defaultValue',\n  defer: 'defer',\n  dir: 'dir',\n  disabled: 'disabled',\n  disablepictureinpicture: 'disablePictureInPicture',\n  disableremoteplayback: 'disableRemotePlayback',\n  download: 'download',\n  draggable: 'draggable',\n  enctype: 'encType',\n  enterkeyhint: 'enterKeyHint',\n  fetchpriority: 'fetchPriority',\n  for: 'htmlFor',\n  form: 'form',\n  formmethod: 'formMethod',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  headers: 'headers',\n  height: 'height',\n  hidden: 'hidden',\n  high: 'high',\n  href: 'href',\n  hreflang: 'hrefLang',\n  htmlfor: 'htmlFor',\n  httpequiv: 'httpEquiv',\n  'http-equiv': 'httpEquiv',\n  icon: 'icon',\n  id: 'id',\n  imagesizes: 'imageSizes',\n  imagesrcset: 'imageSrcSet',\n  innerhtml: 'innerHTML',\n  inputmode: 'inputMode',\n  integrity: 'integrity',\n  is: 'is',\n  itemid: 'itemID',\n  itemprop: 'itemProp',\n  itemref: 'itemRef',\n  itemscope: 'itemScope',\n  itemtype: 'itemType',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  kind: 'kind',\n  label: 'label',\n  lang: 'lang',\n  list: 'list',\n  loop: 'loop',\n  low: 'low',\n  manifest: 'manifest',\n  marginwidth: 'marginWidth',\n  marginheight: 'marginHeight',\n  max: 'max',\n  maxlength: 'maxLength',\n  media: 'media',\n  mediagroup: 'mediaGroup',\n  method: 'method',\n  min: 'min',\n  minlength: 'minLength',\n  multiple: 'multiple',\n  muted: 'muted',\n  name: 'name',\n  nomodule: 'noModule',\n  nonce: 'nonce',\n  novalidate: 'noValidate',\n  open: 'open',\n  optimum: 'optimum',\n  pattern: 'pattern',\n  placeholder: 'placeholder',\n  playsinline: 'playsInline',\n  poster: 'poster',\n  preload: 'preload',\n  profile: 'profile',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  referrerpolicy: 'referrerPolicy',\n  rel: 'rel',\n  required: 'required',\n  reversed: 'reversed',\n  role: 'role',\n  rows: 'rows',\n  rowspan: 'rowSpan',\n  sandbox: 'sandbox',\n  scope: 'scope',\n  scoped: 'scoped',\n  scrolling: 'scrolling',\n  seamless: 'seamless',\n  selected: 'selected',\n  shape: 'shape',\n  size: 'size',\n  sizes: 'sizes',\n  span: 'span',\n  spellcheck: 'spellCheck',\n  src: 'src',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  start: 'start',\n  step: 'step',\n  style: 'style',\n  summary: 'summary',\n  tabindex: 'tabIndex',\n  target: 'target',\n  title: 'title',\n  type: 'type',\n  usemap: 'useMap',\n  value: 'value',\n  width: 'width',\n  wmode: 'wmode',\n  wrap: 'wrap',\n  // SVG\n  about: 'about',\n  accentheight: 'accentHeight',\n  'accent-height': 'accentHeight',\n  accumulate: 'accumulate',\n  additive: 'additive',\n  alignmentbaseline: 'alignmentBaseline',\n  'alignment-baseline': 'alignmentBaseline',\n  allowreorder: 'allowReorder',\n  alphabetic: 'alphabetic',\n  amplitude: 'amplitude',\n  arabicform: 'arabicForm',\n  'arabic-form': 'arabicForm',\n  ascent: 'ascent',\n  attributename: 'attributeName',\n  attributetype: 'attributeType',\n  autoreverse: 'autoReverse',\n  azimuth: 'azimuth',\n  basefrequency: 'baseFrequency',\n  baselineshift: 'baselineShift',\n  'baseline-shift': 'baselineShift',\n  baseprofile: 'baseProfile',\n  bbox: 'bbox',\n  begin: 'begin',\n  bias: 'bias',\n  by: 'by',\n  calcmode: 'calcMode',\n  capheight: 'capHeight',\n  'cap-height': 'capHeight',\n  clip: 'clip',\n  clippath: 'clipPath',\n  'clip-path': 'clipPath',\n  clippathunits: 'clipPathUnits',\n  cliprule: 'clipRule',\n  'clip-rule': 'clipRule',\n  color: 'color',\n  colorinterpolation: 'colorInterpolation',\n  'color-interpolation': 'colorInterpolation',\n  colorinterpolationfilters: 'colorInterpolationFilters',\n  'color-interpolation-filters': 'colorInterpolationFilters',\n  colorprofile: 'colorProfile',\n  'color-profile': 'colorProfile',\n  colorrendering: 'colorRendering',\n  'color-rendering': 'colorRendering',\n  contentscripttype: 'contentScriptType',\n  contentstyletype: 'contentStyleType',\n  cursor: 'cursor',\n  cx: 'cx',\n  cy: 'cy',\n  d: 'd',\n  datatype: 'datatype',\n  decelerate: 'decelerate',\n  descent: 'descent',\n  diffuseconstant: 'diffuseConstant',\n  direction: 'direction',\n  display: 'display',\n  divisor: 'divisor',\n  dominantbaseline: 'dominantBaseline',\n  'dominant-baseline': 'dominantBaseline',\n  dur: 'dur',\n  dx: 'dx',\n  dy: 'dy',\n  edgemode: 'edgeMode',\n  elevation: 'elevation',\n  enablebackground: 'enableBackground',\n  'enable-background': 'enableBackground',\n  end: 'end',\n  exponent: 'exponent',\n  externalresourcesrequired: 'externalResourcesRequired',\n  fill: 'fill',\n  fillopacity: 'fillOpacity',\n  'fill-opacity': 'fillOpacity',\n  fillrule: 'fillRule',\n  'fill-rule': 'fillRule',\n  filter: 'filter',\n  filterres: 'filterRes',\n  filterunits: 'filterUnits',\n  floodopacity: 'floodOpacity',\n  'flood-opacity': 'floodOpacity',\n  floodcolor: 'floodColor',\n  'flood-color': 'floodColor',\n  focusable: 'focusable',\n  fontfamily: 'fontFamily',\n  'font-family': 'fontFamily',\n  fontsize: 'fontSize',\n  'font-size': 'fontSize',\n  fontsizeadjust: 'fontSizeAdjust',\n  'font-size-adjust': 'fontSizeAdjust',\n  fontstretch: 'fontStretch',\n  'font-stretch': 'fontStretch',\n  fontstyle: 'fontStyle',\n  'font-style': 'fontStyle',\n  fontvariant: 'fontVariant',\n  'font-variant': 'fontVariant',\n  fontweight: 'fontWeight',\n  'font-weight': 'fontWeight',\n  format: 'format',\n  from: 'from',\n  fx: 'fx',\n  fy: 'fy',\n  g1: 'g1',\n  g2: 'g2',\n  glyphname: 'glyphName',\n  'glyph-name': 'glyphName',\n  glyphorientationhorizontal: 'glyphOrientationHorizontal',\n  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',\n  glyphorientationvertical: 'glyphOrientationVertical',\n  'glyph-orientation-vertical': 'glyphOrientationVertical',\n  glyphref: 'glyphRef',\n  gradienttransform: 'gradientTransform',\n  gradientunits: 'gradientUnits',\n  hanging: 'hanging',\n  horizadvx: 'horizAdvX',\n  'horiz-adv-x': 'horizAdvX',\n  horizoriginx: 'horizOriginX',\n  'horiz-origin-x': 'horizOriginX',\n  ideographic: 'ideographic',\n  imagerendering: 'imageRendering',\n  'image-rendering': 'imageRendering',\n  in2: 'in2',\n  in: 'in',\n  inlist: 'inlist',\n  intercept: 'intercept',\n  k1: 'k1',\n  k2: 'k2',\n  k3: 'k3',\n  k4: 'k4',\n  k: 'k',\n  kernelmatrix: 'kernelMatrix',\n  kernelunitlength: 'kernelUnitLength',\n  kerning: 'kerning',\n  keypoints: 'keyPoints',\n  keysplines: 'keySplines',\n  keytimes: 'keyTimes',\n  lengthadjust: 'lengthAdjust',\n  letterspacing: 'letterSpacing',\n  'letter-spacing': 'letterSpacing',\n  lightingcolor: 'lightingColor',\n  'lighting-color': 'lightingColor',\n  limitingconeangle: 'limitingConeAngle',\n  local: 'local',\n  markerend: 'markerEnd',\n  'marker-end': 'markerEnd',\n  markerheight: 'markerHeight',\n  markermid: 'markerMid',\n  'marker-mid': 'markerMid',\n  markerstart: 'markerStart',\n  'marker-start': 'markerStart',\n  markerunits: 'markerUnits',\n  markerwidth: 'markerWidth',\n  mask: 'mask',\n  maskcontentunits: 'maskContentUnits',\n  maskunits: 'maskUnits',\n  mathematical: 'mathematical',\n  mode: 'mode',\n  numoctaves: 'numOctaves',\n  offset: 'offset',\n  opacity: 'opacity',\n  operator: 'operator',\n  order: 'order',\n  orient: 'orient',\n  orientation: 'orientation',\n  origin: 'origin',\n  overflow: 'overflow',\n  overlineposition: 'overlinePosition',\n  'overline-position': 'overlinePosition',\n  overlinethickness: 'overlineThickness',\n  'overline-thickness': 'overlineThickness',\n  paintorder: 'paintOrder',\n  'paint-order': 'paintOrder',\n  panose1: 'panose1',\n  'panose-1': 'panose1',\n  pathlength: 'pathLength',\n  patterncontentunits: 'patternContentUnits',\n  patterntransform: 'patternTransform',\n  patternunits: 'patternUnits',\n  pointerevents: 'pointerEvents',\n  'pointer-events': 'pointerEvents',\n  points: 'points',\n  pointsatx: 'pointsAtX',\n  pointsaty: 'pointsAtY',\n  pointsatz: 'pointsAtZ',\n  prefix: 'prefix',\n  preservealpha: 'preserveAlpha',\n  preserveaspectratio: 'preserveAspectRatio',\n  primitiveunits: 'primitiveUnits',\n  property: 'property',\n  r: 'r',\n  radius: 'radius',\n  refx: 'refX',\n  refy: 'refY',\n  renderingintent: 'renderingIntent',\n  'rendering-intent': 'renderingIntent',\n  repeatcount: 'repeatCount',\n  repeatdur: 'repeatDur',\n  requiredextensions: 'requiredExtensions',\n  requiredfeatures: 'requiredFeatures',\n  resource: 'resource',\n  restart: 'restart',\n  result: 'result',\n  results: 'results',\n  rotate: 'rotate',\n  rx: 'rx',\n  ry: 'ry',\n  scale: 'scale',\n  security: 'security',\n  seed: 'seed',\n  shaperendering: 'shapeRendering',\n  'shape-rendering': 'shapeRendering',\n  slope: 'slope',\n  spacing: 'spacing',\n  specularconstant: 'specularConstant',\n  specularexponent: 'specularExponent',\n  speed: 'speed',\n  spreadmethod: 'spreadMethod',\n  startoffset: 'startOffset',\n  stddeviation: 'stdDeviation',\n  stemh: 'stemh',\n  stemv: 'stemv',\n  stitchtiles: 'stitchTiles',\n  stopcolor: 'stopColor',\n  'stop-color': 'stopColor',\n  stopopacity: 'stopOpacity',\n  'stop-opacity': 'stopOpacity',\n  strikethroughposition: 'strikethroughPosition',\n  'strikethrough-position': 'strikethroughPosition',\n  strikethroughthickness: 'strikethroughThickness',\n  'strikethrough-thickness': 'strikethroughThickness',\n  string: 'string',\n  stroke: 'stroke',\n  strokedasharray: 'strokeDasharray',\n  'stroke-dasharray': 'strokeDasharray',\n  strokedashoffset: 'strokeDashoffset',\n  'stroke-dashoffset': 'strokeDashoffset',\n  strokelinecap: 'strokeLinecap',\n  'stroke-linecap': 'strokeLinecap',\n  strokelinejoin: 'strokeLinejoin',\n  'stroke-linejoin': 'strokeLinejoin',\n  strokemiterlimit: 'strokeMiterlimit',\n  'stroke-miterlimit': 'strokeMiterlimit',\n  strokewidth: 'strokeWidth',\n  'stroke-width': 'strokeWidth',\n  strokeopacity: 'strokeOpacity',\n  'stroke-opacity': 'strokeOpacity',\n  suppresscontenteditablewarning: 'suppressContentEditableWarning',\n  suppresshydrationwarning: 'suppressHydrationWarning',\n  surfacescale: 'surfaceScale',\n  systemlanguage: 'systemLanguage',\n  tablevalues: 'tableValues',\n  targetx: 'targetX',\n  targety: 'targetY',\n  textanchor: 'textAnchor',\n  'text-anchor': 'textAnchor',\n  textdecoration: 'textDecoration',\n  'text-decoration': 'textDecoration',\n  textlength: 'textLength',\n  textrendering: 'textRendering',\n  'text-rendering': 'textRendering',\n  to: 'to',\n  transform: 'transform',\n  transformorigin: 'transformOrigin',\n  'transform-origin': 'transformOrigin',\n  typeof: 'typeof',\n  u1: 'u1',\n  u2: 'u2',\n  underlineposition: 'underlinePosition',\n  'underline-position': 'underlinePosition',\n  underlinethickness: 'underlineThickness',\n  'underline-thickness': 'underlineThickness',\n  unicode: 'unicode',\n  unicodebidi: 'unicodeBidi',\n  'unicode-bidi': 'unicodeBidi',\n  unicoderange: 'unicodeRange',\n  'unicode-range': 'unicodeRange',\n  unitsperem: 'unitsPerEm',\n  'units-per-em': 'unitsPerEm',\n  unselectable: 'unselectable',\n  valphabetic: 'vAlphabetic',\n  'v-alphabetic': 'vAlphabetic',\n  values: 'values',\n  vectoreffect: 'vectorEffect',\n  'vector-effect': 'vectorEffect',\n  version: 'version',\n  vertadvy: 'vertAdvY',\n  'vert-adv-y': 'vertAdvY',\n  vertoriginx: 'vertOriginX',\n  'vert-origin-x': 'vertOriginX',\n  vertoriginy: 'vertOriginY',\n  'vert-origin-y': 'vertOriginY',\n  vhanging: 'vHanging',\n  'v-hanging': 'vHanging',\n  videographic: 'vIdeographic',\n  'v-ideographic': 'vIdeographic',\n  viewbox: 'viewBox',\n  viewtarget: 'viewTarget',\n  visibility: 'visibility',\n  vmathematical: 'vMathematical',\n  'v-mathematical': 'vMathematical',\n  vocab: 'vocab',\n  widths: 'widths',\n  wordspacing: 'wordSpacing',\n  'word-spacing': 'wordSpacing',\n  writingmode: 'writingMode',\n  'writing-mode': 'writingMode',\n  x1: 'x1',\n  x2: 'x2',\n  x: 'x',\n  xchannelselector: 'xChannelSelector',\n  xheight: 'xHeight',\n  'x-height': 'xHeight',\n  xlinkactuate: 'xlinkActuate',\n  'xlink:actuate': 'xlinkActuate',\n  xlinkarcrole: 'xlinkArcrole',\n  'xlink:arcrole': 'xlinkArcrole',\n  xlinkhref: 'xlinkHref',\n  'xlink:href': 'xlinkHref',\n  xlinkrole: 'xlinkRole',\n  'xlink:role': 'xlinkRole',\n  xlinkshow: 'xlinkShow',\n  'xlink:show': 'xlinkShow',\n  xlinktitle: 'xlinkTitle',\n  'xlink:title': 'xlinkTitle',\n  xlinktype: 'xlinkType',\n  'xlink:type': 'xlinkType',\n  xmlbase: 'xmlBase',\n  'xml:base': 'xmlBase',\n  xmllang: 'xmlLang',\n  'xml:lang': 'xmlLang',\n  xmlns: 'xmlns',\n  'xml:space': 'xmlSpace',\n  xmlnsxlink: 'xmlnsXlink',\n  'xmlns:xlink': 'xmlnsXlink',\n  xmlspace: 'xmlSpace',\n  y1: 'y1',\n  y2: 'y2',\n  y: 'y',\n  ychannelselector: 'yChannelSelector',\n  z: 'z',\n  zoomandpan: 'zoomAndPan'\n};\n\nvar warnedProperties = {};\nvar EVENT_NAME_REGEX = /^on./;\nvar INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\nvar rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$') ;\nvar rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$') ;\n\nfunction validateProperty(tagName, name, value, eventRegistry) {\n  {\n    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n      return true;\n    }\n\n    var lowerCasedName = name.toLowerCase();\n\n    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {\n      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');\n\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    {\n      // Actions are special because unlike events they can have other value types.\n      if (typeof value === 'function') {\n        if (tagName === 'form' && name === 'action') {\n          return true;\n        }\n\n        if (tagName === 'input' && name === 'formAction') {\n          return true;\n        }\n\n        if (tagName === 'button' && name === 'formAction') {\n          return true;\n        }\n      }\n    } // We can't rely on the event system being injected on the server.\n\n\n    if (eventRegistry != null) {\n      var registrationNameDependencies = eventRegistry.registrationNameDependencies,\n          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;\n\n      if (registrationNameDependencies.hasOwnProperty(name)) {\n        return true;\n      }\n\n      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;\n\n      if (registrationName != null) {\n        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);\n\n        warnedProperties[name] = true;\n        return true;\n      }\n\n      if (EVENT_NAME_REGEX.test(name)) {\n        error('Unknown event handler property `%s`. It will be ignored.', name);\n\n        warnedProperties[name] = true;\n        return true;\n      }\n    } else if (EVENT_NAME_REGEX.test(name)) {\n      // If no event plugins have been injected, we are in a server environment.\n      // So we can't tell if the event name is correct for sure, but we can filter\n      // out known bad ones like `onclick`. We can't suggest a specific replacement though.\n      if (INVALID_EVENT_NAME_REGEX.test(name)) {\n        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);\n      }\n\n      warnedProperties[name] = true;\n      return true;\n    } // Let the ARIA attribute hook validate ARIA attributes\n\n\n    if (rARIA.test(name) || rARIACamel.test(name)) {\n      return true;\n    }\n\n    if (lowerCasedName === 'innerhtml') {\n      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');\n\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'aria') {\n      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');\n\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {\n      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);\n\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'number' && isNaN(value)) {\n      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);\n\n      warnedProperties[name] = true;\n      return true;\n    } // Known attributes should match the casing specified in the property config.\n\n\n    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n      var standardName = possibleStandardNames[lowerCasedName];\n\n      if (standardName !== name) {\n        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);\n\n        warnedProperties[name] = true;\n        return true;\n      }\n    } else if (name !== lowerCasedName) {\n      // Unknown attributes should have lowercase casing since that's how they\n      // will be cased anyway with server rendering.\n      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);\n\n      warnedProperties[name] = true;\n      return true;\n    } // Now that we've validated casing, do not validate\n    // data types for reserved props\n\n\n    switch (name) {\n      case 'dangerouslySetInnerHTML':\n      case 'children':\n      case 'style':\n      case 'suppressContentEditableWarning':\n      case 'suppressHydrationWarning':\n      case 'defaultValue': // Reserved\n\n      case 'defaultChecked':\n      case 'innerHTML':\n      case 'ref':\n        {\n          return true;\n        }\n\n    }\n\n    switch (typeof value) {\n      case 'boolean':\n        {\n          switch (name) {\n            case 'autoFocus':\n            case 'checked':\n            case 'multiple':\n            case 'muted':\n            case 'selected':\n            case 'contentEditable':\n            case 'spellCheck':\n            case 'draggable':\n            case 'value':\n            case 'autoReverse':\n            case 'externalResourcesRequired':\n            case 'focusable':\n            case 'preserveAlpha':\n            case 'allowFullScreen':\n            case 'async':\n            case 'autoPlay':\n            case 'controls':\n            case 'default':\n            case 'defer':\n            case 'disabled':\n            case 'disablePictureInPicture':\n            case 'disableRemotePlayback':\n            case 'formNoValidate':\n            case 'hidden':\n            case 'loop':\n            case 'noModule':\n            case 'noValidate':\n            case 'open':\n            case 'playsInline':\n            case 'readOnly':\n            case 'required':\n            case 'reversed':\n            case 'scoped':\n            case 'seamless':\n            case 'itemScope':\n            case 'capture':\n            case 'download':\n              {\n                // Boolean properties can accept boolean values\n                return true;\n              }\n\n            default:\n              {\n                var prefix = name.toLowerCase().slice(0, 5);\n\n                if (prefix === 'data-' || prefix === 'aria-') {\n                  return true;\n                }\n\n                if (value) {\n                  error('Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.', value, name, name, value, name);\n                } else {\n                  error('Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.\\n\\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);\n                }\n\n                warnedProperties[name] = true;\n                return true;\n              }\n          }\n        }\n\n      case 'function':\n      case 'symbol':\n        // eslint-disable-line\n        // Warn when a known attribute is a bad type\n        warnedProperties[name] = true;\n        return false;\n\n      case 'string':\n        {\n          // Warn when passing the strings 'false' or 'true' into a boolean prop\n          if (value === 'false' || value === 'true') {\n            switch (name) {\n              case 'checked':\n              case 'selected':\n              case 'multiple':\n              case 'muted':\n              case 'allowFullScreen':\n              case 'async':\n              case 'autoPlay':\n              case 'controls':\n              case 'default':\n              case 'defer':\n              case 'disabled':\n              case 'disablePictureInPicture':\n              case 'disableRemotePlayback':\n              case 'formNoValidate':\n              case 'hidden':\n              case 'loop':\n              case 'noModule':\n              case 'noValidate':\n              case 'open':\n              case 'playsInline':\n              case 'readOnly':\n              case 'required':\n              case 'reversed':\n              case 'scoped':\n              case 'seamless':\n              case 'itemScope':\n                {\n                  break;\n                }\n\n              default:\n                {\n                  return true;\n                }\n            }\n\n            error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string \"false\".', name, value);\n\n            warnedProperties[name] = true;\n            return true;\n          }\n        }\n    }\n\n    return true;\n  }\n}\n\nfunction warnUnknownProperties(type, props, eventRegistry) {\n  {\n    var unknownProps = [];\n\n    for (var key in props) {\n      var isValid = validateProperty(type, key, props[key], eventRegistry);\n\n      if (!isValid) {\n        unknownProps.push(key);\n      }\n    }\n\n    var unknownPropString = unknownProps.map(function (prop) {\n      return '`' + prop + '`';\n    }).join(', ');\n\n    if (unknownProps.length === 1) {\n      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);\n    } else if (unknownProps.length > 1) {\n      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);\n    }\n  }\n}\n\nfunction validateProperties(type, props, eventRegistry) {\n  if (isCustomElement(type) || typeof props.is === 'string') {\n    return;\n  }\n\n  warnUnknownProperties(type, props, eventRegistry);\n}\n\n// 'msTransform' is correct, but the other prefixes should be capitalized\nvar badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\nvar msPattern$1 = /^-ms-/;\nvar hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon\n\nvar badStyleValueWithSemicolonPattern = /;\\s*$/;\nvar warnedStyleNames = {};\nvar warnedStyleValues = {};\nvar warnedForNaNValue = false;\nvar warnedForInfinityValue = false;\n\nfunction camelize(string) {\n  return string.replace(hyphenPattern, function (_, character) {\n    return character.toUpperCase();\n  });\n}\n\nfunction warnHyphenatedStyleName(name) {\n  {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n\n    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests\n    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n    // is converted to lowercase `ms`.\n    camelize(name.replace(msPattern$1, 'ms-')));\n  }\n}\n\nfunction warnBadVendoredStyleName(name) {\n  {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n\n    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));\n  }\n}\n\nfunction warnStyleValueWithSemicolon(name, value) {\n  {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n\n    error(\"Style property values shouldn't contain a semicolon. \" + 'Try \"%s: %s\" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));\n  }\n}\n\nfunction warnStyleValueIsNaN(name, value) {\n  {\n    if (warnedForNaNValue) {\n      return;\n    }\n\n    warnedForNaNValue = true;\n\n    error('`NaN` is an invalid value for the `%s` css style property.', name);\n  }\n}\n\nfunction warnStyleValueIsInfinity(name, value) {\n  {\n    if (warnedForInfinityValue) {\n      return;\n    }\n\n    warnedForInfinityValue = true;\n\n    error('`Infinity` is an invalid value for the `%s` css style property.', name);\n  }\n}\n\nfunction warnValidStyle(name, value) {\n  {\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value);\n    }\n\n    if (typeof value === 'number') {\n      if (isNaN(value)) {\n        warnStyleValueIsNaN(name);\n      } else if (!isFinite(value)) {\n        warnStyleValueIsInfinity(name);\n      }\n    }\n  }\n}\n\nfunction getCrossOriginString(input) {\n  if (typeof input === 'string') {\n    return input === 'use-credentials' ? input : '';\n  }\n\n  return undefined;\n}\n\n// code copied and modified from escape-html\nvar matchHtmlRegExp = /[\"'&<>]/;\n/**\n * Escapes special characters and HTML entities in a given html string.\n *\n * @param  {string} string HTML string to escape for later insertion\n * @return {string}\n * @public\n */\n\nfunction escapeHtml(string) {\n  {\n    checkHtmlStringCoercion(string);\n  }\n\n  var str = '' + string;\n  var match = matchHtmlRegExp.exec(str);\n\n  if (!match) {\n    return str;\n  }\n\n  var escape;\n  var html = '';\n  var index;\n  var lastIndex = 0;\n\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        // \"\n        escape = '&quot;';\n        break;\n\n      case 38:\n        // &\n        escape = '&amp;';\n        break;\n\n      case 39:\n        // '\n        escape = '&#x27;'; // modified from escape-html; used to be '&#39'\n\n        break;\n\n      case 60:\n        // <\n        escape = '&lt;';\n        break;\n\n      case 62:\n        // >\n        escape = '&gt;';\n        break;\n\n      default:\n        continue;\n    }\n\n    if (lastIndex !== index) {\n      html += str.slice(lastIndex, index);\n    }\n\n    lastIndex = index + 1;\n    html += escape;\n  }\n\n  return lastIndex !== index ? html + str.slice(lastIndex, index) : html;\n} // end code copied and modified from escape-html\n\n/**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */\n\n\nfunction escapeTextForBrowser(text) {\n  if (typeof text === 'boolean' || typeof text === 'number') {\n    // this shortcircuit helps perf for types that we know will never have\n    // special characters, especially given that this function is used often\n    // for numeric dom ids.\n    return '' + text;\n  }\n\n  return escapeHtml(text);\n}\n\nvar uppercasePattern = /([A-Z])/g;\nvar msPattern = /^ms-/;\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n */\n\nfunction hyphenateStyleName(name) {\n  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');\n}\n\n// and any newline or tab are filtered out as if they're not part of the URL.\n// https://url.spec.whatwg.org/#url-parsing\n// Tab or newline are defined as \\r\\n\\t:\n// https://infra.spec.whatwg.org/#ascii-tab-or-newline\n// A C0 control is a code point in the range \\u0000 NULL to \\u001F\n// INFORMATION SEPARATOR ONE, inclusive:\n// https://infra.spec.whatwg.org/#c0-control-or-space\n\n/* eslint-disable max-len */\n\nvar isJavaScriptProtocol = /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\nvar didWarn = false;\n\nfunction sanitizeURL(url) {\n  // We should never have symbols here because they get filtered out elsewhere.\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  var stringifiedURL = '' + url;\n\n  {\n    if (!didWarn && isJavaScriptProtocol.test(stringifiedURL)) {\n      didWarn = true;\n\n      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(stringifiedURL));\n    }\n  }\n\n  return url;\n}\n\n// The build script is at scripts/rollup/generate-inline-fizz-runtime.js.\n// Run `yarn generate-inline-fizz-runtime` to generate.\nvar clientRenderBoundary = '$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data=\"$!\",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};';\nvar completeBoundary = '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data=\"$!\",a.setAttribute(\"data-dgst\",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if(\"/$\"===d)if(0===f)break;else f--;else\"$\"!==d&&\"$?\"!==d&&\"$!\"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data=\"$\"}b._reactRetry&&b._reactRetry()}};';\nvar completeBoundaryWithStyles = '$RM=new Map;\\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll(\"link[data-precedence],style[data-precedence]\"),v=[],k=0;b=h[k++];)\"not all\"===b.getAttribute(\"media\")?v.push(b):(\"LINK\"===b.tagName&&n.set(b.getAttribute(\"href\"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement(\"link\");a.href=d;a.rel=\"stylesheet\";for(a.dataset.precedence=\\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute(\"media\");!e||\"l\"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute(\"data-precedence\");a.removeAttribute(\"media\")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,\"\"),u.bind(null,r,t,\"Resource failed to load\"))};';\nvar completeSegment = '$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};';\nvar formReplaying = 'addEventListener(\"submit\",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute(\"formAction\");null!=f&&(e=f,b=null)}\"javascript:throw new Error(\\'React form unexpectedly submitted.\\')\"===e&&(a.preventDefault(),b?(a=document.createElement(\"input\"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.ownerDocument||c,(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,d,b))}});';\n\nfunction getValueDescriptorExpectingObjectForWarning(thing) {\n  return thing === null ? '`null`' : thing === undefined ? '`undefined`' : thing === '' ? 'an empty string' : \"something with type \\\"\" + typeof thing + \"\\\"\";\n}\n\n// same object across all transitions.\n\nvar sharedNotPendingObject = {\n  pending: false,\n  data: null,\n  method: null,\n  action: null\n};\nvar NotPending = Object.freeze(sharedNotPendingObject) ;\n\nvar ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nvar ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;\nvar ReactDOMServerDispatcher = {\n  prefetchDNS: prefetchDNS,\n  preconnect: preconnect,\n  preload: preload,\n  preloadModule: preloadModule,\n  preinitStyle: preinitStyle,\n  preinitScript: preinitScript,\n  preinitModuleScript: preinitModuleScript\n};\nfunction prepareHostDispatcher() {\n  ReactDOMCurrentDispatcher.current = ReactDOMServerDispatcher;\n} // We make every property of the descriptor optional because it is not a contract that\nvar ScriptStreamingFormat = 0;\nvar DataStreamingFormat = 1;\nvar NothingSent\n/*                      */\n= 0;\nvar SentCompleteSegmentFunction\n/*      */\n= 1;\nvar SentCompleteBoundaryFunction\n/*     */\n= 2;\nvar SentClientRenderFunction\n/*         */\n= 4;\nvar SentStyleInsertionFunction\n/*       */\n= 8;\nvar SentFormReplayingRuntime\n/*         */\n= 16; // Per request, global state that is not contextual to the rendering subtree.\n// This cannot be resumed and therefore should only contain things that are\n// temporary working state or are never used in the prerender pass.\n// Credentials here are things that affect whether a browser will make a request\n// as well as things that affect which connection the browser will use for that request.\n// We want these to be aligned across preloads and resources because otherwise the preload\n// will be wasted.\n// We investigated whether referrerPolicy should be included here but from experimentation\n// it seems that browsers do not treat this as part of the http cache key and does not affect\n// which connection is used.\n\nvar EXISTS = null; // This constant is to mark preloads that have no unique credentials\n// to convey. It should never be checked by identity and we should not\n// assume Preload values in ResumableState equal this value because they\n// will have come from some parsed input.\n\nvar PRELOAD_NO_CREDS = [];\n\n{\n  Object.freeze(PRELOAD_NO_CREDS);\n} // Per response, global state that is not contextual to the rendering subtree.\n// This is resumable and therefore should be serializable.\n\n\nvar dataElementQuotedEnd = stringToPrecomputedChunk('\"></template>');\nvar startInlineScript = stringToPrecomputedChunk('<script>');\nvar endInlineScript = stringToPrecomputedChunk('</script>');\nvar startScriptSrc = stringToPrecomputedChunk('<script src=\"');\nvar startModuleSrc = stringToPrecomputedChunk('<script type=\"module\" src=\"');\nvar scriptNonce = stringToPrecomputedChunk('\" nonce=\"');\nvar scriptIntegirty = stringToPrecomputedChunk('\" integrity=\"');\nvar scriptCrossOrigin = stringToPrecomputedChunk('\" crossorigin=\"');\nvar endAsyncScript = stringToPrecomputedChunk('\" async=\"\"></script>');\n/**\n * This escaping function is designed to work with bootstrapScriptContent and importMap only.\n * because we know we are escaping the entire script. We can avoid for instance\n * escaping html comment string sequences that are valid javascript as well because\n * if there are no sebsequent <script sequences the html parser will never enter\n * script data double escaped state (see: https://www.w3.org/TR/html53/syntax.html#script-data-double-escaped-state)\n *\n * While untrusted script content should be made safe before using this api it will\n * ensure that the script cannot be early terminated or never terminated state\n */\n\nfunction escapeBootstrapAndImportMapScriptContent(scriptText) {\n  {\n    checkHtmlStringCoercion(scriptText);\n  }\n\n  return ('' + scriptText).replace(scriptRegex, scriptReplacer);\n}\n\nvar scriptRegex = /(<\\/|<)(s)(cript)/gi;\n\nvar scriptReplacer = function (match, prefix, s, suffix) {\n  return \"\" + prefix + (s === 's' ? \"\\\\u0073\" : \"\\\\u0053\") + suffix;\n};\n\nvar importMapScriptStart = stringToPrecomputedChunk('<script type=\"importmap\">');\nvar importMapScriptEnd = stringToPrecomputedChunk('</script>'); // Since we store headers as strings we deal with their length in utf16 code units\n// rather than visual characters or the utf8 encoding that is used for most binary\n// serialization. Some common HTTP servers only allow for headers to be 4kB in length.\n// We choose a default length that is likely to be well under this already limited length however\n// pathological cases may still cause the utf-8 encoding of the headers to approach this limit.\n// It should also be noted that this maximum is a soft maximum. we have not reached the limit we will\n// allow one more header to be captured which means in practice if the limit is approached it will be exceeded\n\nvar DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS = 2000; // Allows us to keep track of what we've already written so we can refer back to it.\n// if passed externalRuntimeConfig and the enableFizzExternalRuntime feature flag\n// is set, the server will send instructions via data attributes (instead of inline scripts)\n\nfunction createRenderState(resumableState, nonce, externalRuntimeConfig, importMap, onHeaders, maxHeadersLength) {\n  var inlineScriptWithNonce = nonce === undefined ? startInlineScript : stringToPrecomputedChunk('<script nonce=\"' + escapeTextForBrowser(nonce) + '\">');\n  var idPrefix = resumableState.idPrefix;\n  var bootstrapChunks = [];\n  var externalRuntimeScript = null;\n  var bootstrapScriptContent = resumableState.bootstrapScriptContent,\n      bootstrapScripts = resumableState.bootstrapScripts,\n      bootstrapModules = resumableState.bootstrapModules;\n\n  if (bootstrapScriptContent !== undefined) {\n    bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapAndImportMapScriptContent(bootstrapScriptContent)), endInlineScript);\n  }\n\n  {\n\n    if (externalRuntimeConfig !== undefined) {\n      if (typeof externalRuntimeConfig === 'string') {\n        externalRuntimeScript = {\n          src: externalRuntimeConfig,\n          chunks: []\n        };\n        pushScriptImpl(externalRuntimeScript.chunks, {\n          src: externalRuntimeConfig,\n          async: true,\n          integrity: undefined,\n          nonce: nonce\n        });\n      } else {\n        externalRuntimeScript = {\n          src: externalRuntimeConfig.src,\n          chunks: []\n        };\n        pushScriptImpl(externalRuntimeScript.chunks, {\n          src: externalRuntimeConfig.src,\n          async: true,\n          integrity: externalRuntimeConfig.integrity,\n          nonce: nonce\n        });\n      }\n    }\n  }\n\n  var importMapChunks = [];\n\n  if (importMap !== undefined) {\n    var map = importMap;\n    importMapChunks.push(importMapScriptStart);\n    importMapChunks.push(stringToChunk(escapeBootstrapAndImportMapScriptContent(JSON.stringify(map))));\n    importMapChunks.push(importMapScriptEnd);\n  }\n\n  {\n    if (onHeaders && typeof maxHeadersLength === 'number') {\n      if (maxHeadersLength <= 0) {\n        error('React expected a positive non-zero `maxHeadersLength` option but found %s instead. When using the `onHeaders` option you may supply an optional `maxHeadersLength` option as well however, when setting this value to zero or less no headers will be captured.', maxHeadersLength === 0 ? 'zero' : maxHeadersLength);\n      }\n    }\n  }\n\n  var headers = onHeaders ? {\n    preconnects: '',\n    fontPreloads: '',\n    highImagePreloads: '',\n    remainingCapacity: typeof maxHeadersLength === 'number' ? maxHeadersLength : DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS\n  } : null;\n  var renderState = {\n    placeholderPrefix: stringToPrecomputedChunk(idPrefix + 'P:'),\n    segmentPrefix: stringToPrecomputedChunk(idPrefix + 'S:'),\n    boundaryPrefix: stringToPrecomputedChunk(idPrefix + 'B:'),\n    startInlineScript: inlineScriptWithNonce,\n    htmlChunks: null,\n    headChunks: null,\n    externalRuntimeScript: externalRuntimeScript,\n    bootstrapChunks: bootstrapChunks,\n    importMapChunks: importMapChunks,\n    onHeaders: onHeaders,\n    headers: headers,\n    resets: {\n      font: {},\n      dns: {},\n      connect: {\n        default: {},\n        anonymous: {},\n        credentials: {}\n      },\n      image: {},\n      style: {}\n    },\n    charsetChunks: [],\n    viewportChunks: [],\n    hoistableChunks: [],\n    // cleared on flush\n    preconnects: new Set(),\n    fontPreloads: new Set(),\n    highImagePreloads: new Set(),\n    // usedImagePreloads: new Set(),\n    styles: new Map(),\n    bootstrapScripts: new Set(),\n    scripts: new Set(),\n    bulkPreloads: new Set(),\n    preloads: {\n      images: new Map(),\n      stylesheets: new Map(),\n      scripts: new Map(),\n      moduleScripts: new Map()\n    },\n    nonce: nonce,\n    // like a module global for currently rendering boundary\n    hoistableState: null,\n    stylesToHoist: false\n  };\n\n  if (bootstrapScripts !== undefined) {\n    for (var i = 0; i < bootstrapScripts.length; i++) {\n      var scriptConfig = bootstrapScripts[i];\n      var src = void 0,\n          crossOrigin = void 0,\n          integrity = void 0;\n      var props = {\n        rel: 'preload',\n        as: 'script',\n        fetchPriority: 'low',\n        nonce: nonce\n      };\n\n      if (typeof scriptConfig === 'string') {\n        props.href = src = scriptConfig;\n      } else {\n        props.href = src = scriptConfig.src;\n        props.integrity = integrity = typeof scriptConfig.integrity === 'string' ? scriptConfig.integrity : undefined;\n        props.crossOrigin = crossOrigin = typeof scriptConfig === 'string' || scriptConfig.crossOrigin == null ? undefined : scriptConfig.crossOrigin === 'use-credentials' ? 'use-credentials' : '';\n      }\n\n      preloadBootstrapScriptOrModule(resumableState, renderState, src, props);\n      bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(src)));\n\n      if (nonce) {\n        bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));\n      }\n\n      if (typeof integrity === 'string') {\n        bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(integrity)));\n      }\n\n      if (typeof crossOrigin === 'string') {\n        bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(crossOrigin)));\n      }\n\n      bootstrapChunks.push(endAsyncScript);\n    }\n  }\n\n  if (bootstrapModules !== undefined) {\n    for (var _i = 0; _i < bootstrapModules.length; _i++) {\n      var _scriptConfig = bootstrapModules[_i];\n\n      var _src = void 0,\n          _crossOrigin = void 0,\n          _integrity = void 0;\n\n      var _props = {\n        rel: 'modulepreload',\n        fetchPriority: 'low',\n        nonce: nonce\n      };\n\n      if (typeof _scriptConfig === 'string') {\n        _props.href = _src = _scriptConfig;\n      } else {\n        _props.href = _src = _scriptConfig.src;\n        _props.integrity = _integrity = typeof _scriptConfig.integrity === 'string' ? _scriptConfig.integrity : undefined;\n        _props.crossOrigin = _crossOrigin = typeof _scriptConfig === 'string' || _scriptConfig.crossOrigin == null ? undefined : _scriptConfig.crossOrigin === 'use-credentials' ? 'use-credentials' : '';\n      }\n\n      preloadBootstrapScriptOrModule(resumableState, renderState, _src, _props);\n      bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(_src)));\n\n      if (nonce) {\n        bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));\n      }\n\n      if (typeof _integrity === 'string') {\n        bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(_integrity)));\n      }\n\n      if (typeof _crossOrigin === 'string') {\n        bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(_crossOrigin)));\n      }\n\n      bootstrapChunks.push(endAsyncScript);\n    }\n  }\n\n  return renderState;\n}\nfunction createResumableState(identifierPrefix, externalRuntimeConfig, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {\n  var idPrefix = identifierPrefix === undefined ? '' : identifierPrefix;\n  var streamingFormat = ScriptStreamingFormat;\n\n  {\n    if (externalRuntimeConfig !== undefined) {\n      streamingFormat = DataStreamingFormat;\n    }\n  }\n\n  return {\n    idPrefix: idPrefix,\n    nextFormID: 0,\n    streamingFormat: streamingFormat,\n    bootstrapScriptContent: bootstrapScriptContent,\n    bootstrapScripts: bootstrapScripts,\n    bootstrapModules: bootstrapModules,\n    instructions: NothingSent,\n    hasBody: false,\n    hasHtml: false,\n    // @TODO add bootstrap script to implicit preloads\n    // persistent\n    unknownResources: {},\n    dnsResources: {},\n    connectResources: {\n      default: {},\n      anonymous: {},\n      credentials: {}\n    },\n    imageResources: {},\n    styleResources: {},\n    scriptResources: {},\n    moduleUnknownResources: {},\n    moduleScriptResources: {}\n  };\n}\n// modes. We only include the variants as they matter for the sake of our purposes.\n// We don't actually provide the namespace therefore we use constants instead of the string.\n\nvar ROOT_HTML_MODE = 0; // Used for the root most element tag.\n// We have a less than HTML_HTML_MODE check elsewhere. If you add more cases here, make sure it\n// still makes sense\n\nvar HTML_HTML_MODE = 1; // Used for the <html> if it is at the top level.\n\nvar HTML_MODE = 2;\nvar SVG_MODE = 3;\nvar MATHML_MODE = 4;\nvar HTML_TABLE_MODE = 5;\nvar HTML_TABLE_BODY_MODE = 6;\nvar HTML_TABLE_ROW_MODE = 7;\nvar HTML_COLGROUP_MODE = 8; // We have a greater than HTML_TABLE_MODE check elsewhere. If you add more cases here, make sure it\n// still makes sense\n\nvar NO_SCOPE =\n/*         */\n0;\nvar NOSCRIPT_SCOPE =\n/*   */\n1;\nvar PICTURE_SCOPE =\n/*    */\n2; // Lets us keep track of contextual state and pick it back up after suspending.\n\nfunction createFormatContext(insertionMode, selectedValue, tagScope) {\n  return {\n    insertionMode: insertionMode,\n    selectedValue: selectedValue,\n    tagScope: tagScope\n  };\n}\n\nfunction createRootFormatContext(namespaceURI) {\n  var insertionMode = namespaceURI === 'http://www.w3.org/2000/svg' ? SVG_MODE : namespaceURI === 'http://www.w3.org/1998/Math/MathML' ? MATHML_MODE : ROOT_HTML_MODE;\n  return createFormatContext(insertionMode, null, NO_SCOPE);\n}\nfunction getChildFormatContext(parentContext, type, props) {\n  switch (type) {\n    case 'noscript':\n      return createFormatContext(HTML_MODE, null, parentContext.tagScope | NOSCRIPT_SCOPE);\n\n    case 'select':\n      return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue, parentContext.tagScope);\n\n    case 'svg':\n      return createFormatContext(SVG_MODE, null, parentContext.tagScope);\n\n    case 'picture':\n      return createFormatContext(HTML_MODE, null, parentContext.tagScope | PICTURE_SCOPE);\n\n    case 'math':\n      return createFormatContext(MATHML_MODE, null, parentContext.tagScope);\n\n    case 'foreignObject':\n      return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n    // Table parents are special in that their children can only be created at all if they're\n    // wrapped in a table parent. So we need to encode that we're entering this mode.\n\n    case 'table':\n      return createFormatContext(HTML_TABLE_MODE, null, parentContext.tagScope);\n\n    case 'thead':\n    case 'tbody':\n    case 'tfoot':\n      return createFormatContext(HTML_TABLE_BODY_MODE, null, parentContext.tagScope);\n\n    case 'colgroup':\n      return createFormatContext(HTML_COLGROUP_MODE, null, parentContext.tagScope);\n\n    case 'tr':\n      return createFormatContext(HTML_TABLE_ROW_MODE, null, parentContext.tagScope);\n  }\n\n  if (parentContext.insertionMode >= HTML_TABLE_MODE) {\n    // Whatever tag this was, it wasn't a table parent or other special parent, so we must have\n    // entered plain HTML again.\n    return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n  }\n\n  if (parentContext.insertionMode === ROOT_HTML_MODE) {\n    if (type === 'html') {\n      // We've emitted the root and is now in <html> mode.\n      return createFormatContext(HTML_HTML_MODE, null, parentContext.tagScope);\n    } else {\n      // We've emitted the root and is now in plain HTML mode.\n      return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n    }\n  } else if (parentContext.insertionMode === HTML_HTML_MODE) {\n    // We've emitted the document element and is now in plain HTML mode.\n    return createFormatContext(HTML_MODE, null, parentContext.tagScope);\n  }\n\n  return parentContext;\n}\nfunction makeId(resumableState, treeId, localId) {\n  var idPrefix = resumableState.idPrefix;\n  var id = ':' + idPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end\n  // that represents the position of this useId hook among all the useId\n  // hooks for this fiber.\n\n  if (localId > 0) {\n    id += 'H' + localId.toString(32);\n  }\n\n  return id + ':';\n}\n\nfunction encodeHTMLTextNode(text) {\n  return escapeTextForBrowser(text);\n}\n\nvar textSeparator = stringToPrecomputedChunk('<!-- -->');\nfunction pushTextInstance(target, text, renderState, textEmbedded) {\n  if (text === '') {\n    // Empty text doesn't have a DOM node representation and the hydration is aware of this.\n    return textEmbedded;\n  }\n\n  if (textEmbedded) {\n    target.push(textSeparator);\n  }\n\n  target.push(stringToChunk(encodeHTMLTextNode(text)));\n  return true;\n} // Called when Fizz is done with a Segment. Currently the only purpose is to conditionally\n// emit a text separator when we don't know for sure it is safe to omit\n\nfunction pushSegmentFinale(target, renderState, lastPushedText, textEmbedded) {\n  if (lastPushedText && textEmbedded) {\n    target.push(textSeparator);\n  }\n}\nvar styleNameCache = new Map();\n\nfunction processStyleName(styleName) {\n  var chunk = styleNameCache.get(styleName);\n\n  if (chunk !== undefined) {\n    return chunk;\n  }\n\n  var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));\n  styleNameCache.set(styleName, result);\n  return result;\n}\n\nvar styleAttributeStart = stringToPrecomputedChunk(' style=\"');\nvar styleAssign = stringToPrecomputedChunk(':');\nvar styleSeparator = stringToPrecomputedChunk(';');\n\nfunction pushStyleAttribute(target, style) {\n  if (typeof style !== 'object') {\n    throw new Error('The `style` prop expects a mapping from style properties to values, ' + \"not a string. For example, style={{marginRight: spacing + 'em'}} when \" + 'using JSX.');\n  }\n\n  var isFirst = true;\n\n  for (var styleName in style) {\n    if (!hasOwnProperty.call(style, styleName)) {\n      continue;\n    } // If you provide unsafe user data here they can inject arbitrary CSS\n    // which may be problematic (I couldn't repro this):\n    // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n    // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n    // This is not an XSS hole but instead a potential CSS injection issue\n    // which has lead to a greater discussion about how we're going to\n    // trust URLs moving forward. See #2115901\n\n\n    var styleValue = style[styleName];\n\n    if (styleValue == null || typeof styleValue === 'boolean' || styleValue === '') {\n      // TODO: We used to set empty string as a style with an empty value. Does that ever make sense?\n      continue;\n    }\n\n    var nameChunk = void 0;\n    var valueChunk = void 0;\n    var isCustomProperty = styleName.indexOf('--') === 0;\n\n    if (isCustomProperty) {\n      nameChunk = stringToChunk(escapeTextForBrowser(styleName));\n\n      {\n        checkCSSPropertyStringCoercion(styleValue, styleName);\n      }\n\n      valueChunk = stringToChunk(escapeTextForBrowser(('' + styleValue).trim()));\n    } else {\n      {\n        warnValidStyle(styleName, styleValue);\n      }\n\n      nameChunk = processStyleName(styleName);\n\n      if (typeof styleValue === 'number') {\n        if (styleValue !== 0 && !isUnitlessNumber(styleName)) {\n          valueChunk = stringToChunk(styleValue + 'px'); // Presumes implicit 'px' suffix for unitless numbers\n        } else {\n          valueChunk = stringToChunk('' + styleValue);\n        }\n      } else {\n        {\n          checkCSSPropertyStringCoercion(styleValue, styleName);\n        }\n\n        valueChunk = stringToChunk(escapeTextForBrowser(('' + styleValue).trim()));\n      }\n    }\n\n    if (isFirst) {\n      isFirst = false; // If it's first, we don't need any separators prefixed.\n\n      target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);\n    } else {\n      target.push(styleSeparator, nameChunk, styleAssign, valueChunk);\n    }\n  }\n\n  if (!isFirst) {\n    target.push(attributeEnd);\n  }\n}\n\nvar attributeSeparator = stringToPrecomputedChunk(' ');\nvar attributeAssign = stringToPrecomputedChunk('=\"');\nvar attributeEnd = stringToPrecomputedChunk('\"');\nvar attributeEmptyString = stringToPrecomputedChunk('=\"\"');\n\nfunction pushBooleanAttribute(target, name, value) // not null or undefined\n{\n  if (value && typeof value !== 'function' && typeof value !== 'symbol') {\n    target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n  }\n}\n\nfunction pushStringAttribute(target, name, value) // not null or undefined\n{\n  if (typeof value !== 'function' && typeof value !== 'symbol' && typeof value !== 'boolean') {\n    target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n  }\n}\n\nfunction makeFormFieldPrefix(resumableState) {\n  var id = resumableState.nextFormID++;\n  return resumableState.idPrefix + id;\n} // Since this will likely be repeated a lot in the HTML, we use a more concise message\n// than on the client and hopefully it's googleable.\n\n\nvar actionJavaScriptURL = stringToPrecomputedChunk(escapeTextForBrowser( // eslint-disable-next-line no-script-url\n\"javascript:throw new Error('React form unexpectedly submitted.')\"));\nvar startHiddenInputChunk = stringToPrecomputedChunk('<input type=\"hidden\"');\n\nfunction pushAdditionalFormField(value, key) {\n  var target = this;\n  target.push(startHiddenInputChunk);\n\n  if (typeof value !== 'string') {\n    throw new Error('File/Blob fields are not yet supported in progressive forms. ' + 'It probably means you are closing over binary data or FormData in a Server Action.');\n  }\n\n  pushStringAttribute(target, 'name', key);\n  pushStringAttribute(target, 'value', value);\n  target.push(endOfStartTagSelfClosing);\n}\n\nfunction pushAdditionalFormFields(target, formData) {\n  if (formData !== null) {\n    // $FlowFixMe[prop-missing]: FormData has forEach.\n    formData.forEach(pushAdditionalFormField, target);\n  }\n}\n\nfunction pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name) {\n  var formData = null;\n\n  if (typeof formAction === 'function') {\n    // Function form actions cannot control the form properties\n    {\n      if (name !== null && !didWarnFormActionName) {\n        didWarnFormActionName = true;\n\n        error('Cannot specify a \"name\" prop for a button that specifies a function as a formAction. ' + 'React needs it to encode which action should be invoked. It will get overridden.');\n      }\n\n      if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {\n        didWarnFormActionMethod = true;\n\n        error('Cannot specify a formEncType or formMethod for a button that specifies a ' + 'function as a formAction. React provides those automatically. They will get overridden.');\n      }\n\n      if (formTarget !== null && !didWarnFormActionTarget) {\n        didWarnFormActionTarget = true;\n\n        error('Cannot specify a formTarget for a button that specifies a function as a formAction. ' + 'The function will always be executed in the same window.');\n      }\n    }\n\n    var customAction = formAction.$$FORM_ACTION;\n\n    if (typeof customAction === 'function') {\n      // This action has a custom progressive enhancement form that can submit the form\n      // back to the server if it's invoked before hydration. Such as a Server Action.\n      var prefix = makeFormFieldPrefix(resumableState);\n      var customFields = formAction.$$FORM_ACTION(prefix);\n      name = customFields.name;\n      formAction = customFields.action || '';\n      formEncType = customFields.encType;\n      formMethod = customFields.method;\n      formTarget = customFields.target;\n      formData = customFields.data;\n    } else {\n      // Set a javascript URL that doesn't do anything. We don't expect this to be invoked\n      // because we'll preventDefault in the Fizz runtime, but it can happen if a form is\n      // manually submitted or if someone calls stopPropagation before React gets the event.\n      // If CSP is used to block javascript: URLs that's fine too. It just won't show this\n      // error message but the URL will be logged.\n      target.push(attributeSeparator, stringToChunk('formAction'), attributeAssign, actionJavaScriptURL, attributeEnd);\n      name = null;\n      formAction = null;\n      formEncType = null;\n      formMethod = null;\n      formTarget = null;\n      injectFormReplayingRuntime(resumableState, renderState);\n    }\n  }\n\n  if (name != null) {\n    pushAttribute(target, 'name', name);\n  }\n\n  if (formAction != null) {\n    pushAttribute(target, 'formAction', formAction);\n  }\n\n  if (formEncType != null) {\n    pushAttribute(target, 'formEncType', formEncType);\n  }\n\n  if (formMethod != null) {\n    pushAttribute(target, 'formMethod', formMethod);\n  }\n\n  if (formTarget != null) {\n    pushAttribute(target, 'formTarget', formTarget);\n  }\n\n  return formData;\n}\n\nfunction pushAttribute(target, name, value) // not null or undefined\n{\n  switch (name) {\n    // These are very common props and therefore are in the beginning of the switch.\n    // TODO: aria-label is a very common prop but allows booleans so is not like the others\n    // but should ideally go in this list too.\n    case 'className':\n      {\n        pushStringAttribute(target, 'class', value);\n        break;\n      }\n\n    case 'tabIndex':\n      {\n        pushStringAttribute(target, 'tabindex', value);\n        break;\n      }\n\n    case 'dir':\n    case 'role':\n    case 'viewBox':\n    case 'width':\n    case 'height':\n      {\n        pushStringAttribute(target, name, value);\n        break;\n      }\n\n    case 'style':\n      {\n        pushStyleAttribute(target, value);\n        return;\n      }\n\n    case 'src':\n    case 'href':\n    // Fall through to the last case which shouldn't remove empty strings.\n\n    case 'action':\n    case 'formAction':\n      {\n        // TODO: Consider only special casing these for each tag.\n        if (value == null || typeof value === 'function' || typeof value === 'symbol' || typeof value === 'boolean') {\n          return;\n        }\n\n        {\n          checkAttributeStringCoercion(value, name);\n        }\n\n        var sanitizedValue = sanitizeURL('' + value);\n        target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(sanitizedValue)), attributeEnd);\n        return;\n      }\n\n    case 'defaultValue':\n    case 'defaultChecked': // These shouldn't be set as attributes on generic HTML elements.\n\n    case 'innerHTML': // Must use dangerouslySetInnerHTML instead.\n\n    case 'suppressContentEditableWarning':\n    case 'suppressHydrationWarning':\n    case 'ref':\n      // Ignored. These are built-in to React on the client.\n      return;\n\n    case 'autoFocus':\n    case 'multiple':\n    case 'muted':\n      {\n        pushBooleanAttribute(target, name.toLowerCase(), value);\n        return;\n      }\n\n    case 'xlinkHref':\n      {\n        if (typeof value === 'function' || typeof value === 'symbol' || typeof value === 'boolean') {\n          return;\n        }\n\n        {\n          checkAttributeStringCoercion(value, name);\n        }\n\n        var _sanitizedValue = sanitizeURL('' + value);\n\n        target.push(attributeSeparator, stringToChunk('xlink:href'), attributeAssign, stringToChunk(escapeTextForBrowser(_sanitizedValue)), attributeEnd);\n        return;\n      }\n\n    case 'contentEditable':\n    case 'spellCheck':\n    case 'draggable':\n    case 'value':\n    case 'autoReverse':\n    case 'externalResourcesRequired':\n    case 'focusable':\n    case 'preserveAlpha':\n      {\n        // Booleanish String\n        // These are \"enumerated\" attributes that accept \"true\" and \"false\".\n        // In React, we let users pass `true` and `false` even though technically\n        // these aren't boolean attributes (they are coerced to strings).\n        if (typeof value !== 'function' && typeof value !== 'symbol') {\n          target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n        }\n\n        return;\n      }\n\n    case 'allowFullScreen':\n    case 'async':\n    case 'autoPlay':\n    case 'controls':\n    case 'default':\n    case 'defer':\n    case 'disabled':\n    case 'disablePictureInPicture':\n    case 'disableRemotePlayback':\n    case 'formNoValidate':\n    case 'hidden':\n    case 'loop':\n    case 'noModule':\n    case 'noValidate':\n    case 'open':\n    case 'playsInline':\n    case 'readOnly':\n    case 'required':\n    case 'reversed':\n    case 'scoped':\n    case 'seamless':\n    case 'itemScope':\n      {\n        // Boolean\n        if (value && typeof value !== 'function' && typeof value !== 'symbol') {\n          target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n        }\n\n        return;\n      }\n\n    case 'capture':\n    case 'download':\n      {\n        // Overloaded Boolean\n        if (value === true) {\n          target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n        } else if (value === false) ; else if (typeof value !== 'function' && typeof value !== 'symbol') {\n          target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n        }\n\n        return;\n      }\n\n    case 'cols':\n    case 'rows':\n    case 'size':\n    case 'span':\n      {\n        // These are HTML attributes that must be positive numbers.\n        if (typeof value !== 'function' && typeof value !== 'symbol' && !isNaN(value) && value >= 1) {\n          target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n        }\n\n        return;\n      }\n\n    case 'rowSpan':\n    case 'start':\n      {\n        // These are HTML attributes that must be numbers.\n        if (typeof value !== 'function' && typeof value !== 'symbol' && !isNaN(value)) {\n          target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n        }\n\n        return;\n      }\n\n    case 'xlinkActuate':\n      pushStringAttribute(target, 'xlink:actuate', value);\n      return;\n\n    case 'xlinkArcrole':\n      pushStringAttribute(target, 'xlink:arcrole', value);\n      return;\n\n    case 'xlinkRole':\n      pushStringAttribute(target, 'xlink:role', value);\n      return;\n\n    case 'xlinkShow':\n      pushStringAttribute(target, 'xlink:show', value);\n      return;\n\n    case 'xlinkTitle':\n      pushStringAttribute(target, 'xlink:title', value);\n      return;\n\n    case 'xlinkType':\n      pushStringAttribute(target, 'xlink:type', value);\n      return;\n\n    case 'xmlBase':\n      pushStringAttribute(target, 'xml:base', value);\n      return;\n\n    case 'xmlLang':\n      pushStringAttribute(target, 'xml:lang', value);\n      return;\n\n    case 'xmlSpace':\n      pushStringAttribute(target, 'xml:space', value);\n      return;\n\n    default:\n      if ( // shouldIgnoreAttribute\n      // We have already filtered out null/undefined and reserved words.\n      name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {\n        return;\n      }\n\n      var attributeName = getAttributeAlias(name);\n\n      if (isAttributeNameSafe(attributeName)) {\n        // shouldRemoveAttribute\n        switch (typeof value) {\n          case 'function':\n          case 'symbol':\n            // eslint-disable-line\n            return;\n\n          case 'boolean':\n            {\n              var prefix = attributeName.toLowerCase().slice(0, 5);\n\n              if (prefix !== 'data-' && prefix !== 'aria-') {\n                return;\n              }\n            }\n        }\n\n        target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n      }\n\n  }\n}\n\nvar endOfStartTag = stringToPrecomputedChunk('>');\nvar endOfStartTagSelfClosing = stringToPrecomputedChunk('/>');\n\nfunction pushInnerHTML(target, innerHTML, children) {\n  if (innerHTML != null) {\n    if (children != null) {\n      throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');\n    }\n\n    if (typeof innerHTML !== 'object' || !('__html' in innerHTML)) {\n      throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');\n    }\n\n    var html = innerHTML.__html;\n\n    if (html !== null && html !== undefined) {\n      {\n        checkHtmlStringCoercion(html);\n      }\n\n      target.push(stringToChunk('' + html));\n    }\n  }\n} // TODO: Move these to RenderState so that we warn for every request.\n// It would help debugging in stateful servers (e.g. service worker).\n\n\nvar didWarnDefaultInputValue = false;\nvar didWarnDefaultChecked = false;\nvar didWarnDefaultSelectValue = false;\nvar didWarnDefaultTextareaValue = false;\nvar didWarnInvalidOptionChildren = false;\nvar didWarnInvalidOptionInnerHTML = false;\nvar didWarnSelectedSetOnOption = false;\nvar didWarnFormActionType = false;\nvar didWarnFormActionName = false;\nvar didWarnFormActionTarget = false;\nvar didWarnFormActionMethod = false;\n\nfunction checkSelectProp(props, propName) {\n  {\n    var value = props[propName];\n\n    if (value != null) {\n      var array = isArray(value);\n\n      if (props.multiple && !array) {\n        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.', propName);\n      } else if (!props.multiple && array) {\n        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.', propName);\n      }\n    }\n  }\n}\n\nfunction pushStartSelect(target, props) {\n  {\n    checkControlledValueProps('select', props);\n    checkSelectProp(props, 'value');\n    checkSelectProp(props, 'defaultValue');\n\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultSelectValue) {\n      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');\n\n      didWarnDefaultSelectValue = true;\n    }\n  }\n\n  target.push(startChunkForTag('select'));\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          // TODO: This doesn't really make sense for select since it can't use the controlled\n          // value in the innerHTML.\n          innerHTML = propValue;\n          break;\n\n        case 'defaultValue':\n        case 'value':\n          // These are set on the Context instead and applied to the nested options.\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag);\n  pushInnerHTML(target, innerHTML, children);\n  return children;\n}\n\nfunction flattenOptionChildren(children) {\n  var content = ''; // Flatten children and warn if they aren't strings or numbers;\n  // invalid types are ignored.\n\n  React.Children.forEach(children, function (child) {\n    if (child == null) {\n      return;\n    }\n\n    content += child;\n\n    {\n      if (!didWarnInvalidOptionChildren && typeof child !== 'string' && typeof child !== 'number') {\n        didWarnInvalidOptionChildren = true;\n\n        error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');\n      }\n    }\n  });\n  return content;\n}\n\nvar selectedMarkerAttribute = stringToPrecomputedChunk(' selected=\"\"');\n\nfunction pushStartOption(target, props, formatContext) {\n  var selectedValue = formatContext.selectedValue;\n  target.push(startChunkForTag('option'));\n  var children = null;\n  var value = null;\n  var selected = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'selected':\n          // ignore\n          selected = propValue;\n\n          {\n            // TODO: Remove support for `selected` in <option>.\n            if (!didWarnSelectedSetOnOption) {\n              error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');\n\n              didWarnSelectedSetOnOption = true;\n            }\n          }\n\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        case 'value':\n          value = propValue;\n        // We intentionally fallthrough to also set the attribute on the node.\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  if (selectedValue != null) {\n    var stringValue;\n\n    if (value !== null) {\n      {\n        checkAttributeStringCoercion(value, 'value');\n      }\n\n      stringValue = '' + value;\n    } else {\n      {\n        if (innerHTML !== null) {\n          if (!didWarnInvalidOptionInnerHTML) {\n            didWarnInvalidOptionInnerHTML = true;\n\n            error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');\n          }\n        }\n      }\n\n      stringValue = flattenOptionChildren(children);\n    }\n\n    if (isArray(selectedValue)) {\n      // multiple\n      for (var i = 0; i < selectedValue.length; i++) {\n        {\n          checkAttributeStringCoercion(selectedValue[i], 'value');\n        }\n\n        var v = '' + selectedValue[i];\n\n        if (v === stringValue) {\n          target.push(selectedMarkerAttribute);\n          break;\n        }\n      }\n    } else {\n      {\n        checkAttributeStringCoercion(selectedValue, 'select.value');\n      }\n\n      if ('' + selectedValue === stringValue) {\n        target.push(selectedMarkerAttribute);\n      }\n    }\n  } else if (selected) {\n    target.push(selectedMarkerAttribute);\n  }\n\n  target.push(endOfStartTag);\n  pushInnerHTML(target, innerHTML, children);\n  return children;\n}\n\nvar formReplayingRuntimeScript = stringToPrecomputedChunk(formReplaying);\n\nfunction injectFormReplayingRuntime(resumableState, renderState) {\n  // If we haven't sent it yet, inject the runtime that tracks submitted JS actions\n  // for later replaying by Fiber. If we use an external runtime, we don't need\n  // to emit anything. It's always used.\n  if ((resumableState.instructions & SentFormReplayingRuntime) === NothingSent && (!renderState.externalRuntimeScript)) {\n    resumableState.instructions |= SentFormReplayingRuntime;\n    renderState.bootstrapChunks.unshift(renderState.startInlineScript, formReplayingRuntimeScript, endInlineScript);\n  }\n}\n\nvar formStateMarkerIsMatching = stringToPrecomputedChunk('<!--F!-->');\nvar formStateMarkerIsNotMatching = stringToPrecomputedChunk('<!--F-->');\nfunction pushFormStateMarkerIsMatching(target) {\n  target.push(formStateMarkerIsMatching);\n}\nfunction pushFormStateMarkerIsNotMatching(target) {\n  target.push(formStateMarkerIsNotMatching);\n}\n\nfunction pushStartForm(target, props, resumableState, renderState) {\n  target.push(startChunkForTag('form'));\n  var children = null;\n  var innerHTML = null;\n  var formAction = null;\n  var formEncType = null;\n  var formMethod = null;\n  var formTarget = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        case 'action':\n          formAction = propValue;\n          break;\n\n        case 'encType':\n          formEncType = propValue;\n          break;\n\n        case 'method':\n          formMethod = propValue;\n          break;\n\n        case 'target':\n          formTarget = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  var formData = null;\n  var formActionName = null;\n\n  if (typeof formAction === 'function') {\n    // Function form actions cannot control the form properties\n    {\n      if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {\n        didWarnFormActionMethod = true;\n\n        error('Cannot specify a encType or method for a form that specifies a ' + 'function as the action. React provides those automatically. ' + 'They will get overridden.');\n      }\n\n      if (formTarget !== null && !didWarnFormActionTarget) {\n        didWarnFormActionTarget = true;\n\n        error('Cannot specify a target for a form that specifies a function as the action. ' + 'The function will always be executed in the same window.');\n      }\n    }\n\n    var customAction = formAction.$$FORM_ACTION;\n\n    if (typeof customAction === 'function') {\n      // This action has a custom progressive enhancement form that can submit the form\n      // back to the server if it's invoked before hydration. Such as a Server Action.\n      var prefix = makeFormFieldPrefix(resumableState);\n      var customFields = formAction.$$FORM_ACTION(prefix);\n      formAction = customFields.action || '';\n      formEncType = customFields.encType;\n      formMethod = customFields.method;\n      formTarget = customFields.target;\n      formData = customFields.data;\n      formActionName = customFields.name;\n    } else {\n      // Set a javascript URL that doesn't do anything. We don't expect this to be invoked\n      // because we'll preventDefault in the Fizz runtime, but it can happen if a form is\n      // manually submitted or if someone calls stopPropagation before React gets the event.\n      // If CSP is used to block javascript: URLs that's fine too. It just won't show this\n      // error message but the URL will be logged.\n      target.push(attributeSeparator, stringToChunk('action'), attributeAssign, actionJavaScriptURL, attributeEnd);\n      formAction = null;\n      formEncType = null;\n      formMethod = null;\n      formTarget = null;\n      injectFormReplayingRuntime(resumableState, renderState);\n    }\n  }\n\n  if (formAction != null) {\n    pushAttribute(target, 'action', formAction);\n  }\n\n  if (formEncType != null) {\n    pushAttribute(target, 'encType', formEncType);\n  }\n\n  if (formMethod != null) {\n    pushAttribute(target, 'method', formMethod);\n  }\n\n  if (formTarget != null) {\n    pushAttribute(target, 'target', formTarget);\n  }\n\n  target.push(endOfStartTag);\n\n  if (formActionName !== null) {\n    target.push(startHiddenInputChunk);\n    pushStringAttribute(target, 'name', formActionName);\n    target.push(endOfStartTagSelfClosing);\n    pushAdditionalFormFields(target, formData);\n  }\n\n  pushInnerHTML(target, innerHTML, children);\n\n  if (typeof children === 'string') {\n    // Special case children as a string to avoid the unnecessary comment.\n    // TODO: Remove this special case after the general optimization is in place.\n    target.push(stringToChunk(encodeHTMLTextNode(children)));\n    return null;\n  }\n\n  return children;\n}\n\nfunction pushInput(target, props, resumableState, renderState) {\n  {\n    checkControlledValueProps('input', props);\n  }\n\n  target.push(startChunkForTag('input'));\n  var name = null;\n  var formAction = null;\n  var formEncType = null;\n  var formMethod = null;\n  var formTarget = null;\n  var value = null;\n  var defaultValue = null;\n  var checked = null;\n  var defaultChecked = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n        case 'dangerouslySetInnerHTML':\n          throw new Error('input' + \" is a self-closing tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n\n        case 'name':\n          name = propValue;\n          break;\n\n        case 'formAction':\n          formAction = propValue;\n          break;\n\n        case 'formEncType':\n          formEncType = propValue;\n          break;\n\n        case 'formMethod':\n          formMethod = propValue;\n          break;\n\n        case 'formTarget':\n          formTarget = propValue;\n          break;\n\n        case 'defaultChecked':\n          defaultChecked = propValue;\n          break;\n\n        case 'defaultValue':\n          defaultValue = propValue;\n          break;\n\n        case 'checked':\n          checked = propValue;\n          break;\n\n        case 'value':\n          value = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  {\n    if (formAction !== null && props.type !== 'image' && props.type !== 'submit' && !didWarnFormActionType) {\n      didWarnFormActionType = true;\n\n      error('An input can only specify a formAction along with type=\"submit\" or type=\"image\".');\n    }\n  }\n\n  var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);\n\n  {\n    if (checked !== null && defaultChecked !== null && !didWarnDefaultChecked) {\n      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', 'A component', props.type);\n\n      didWarnDefaultChecked = true;\n    }\n\n    if (value !== null && defaultValue !== null && !didWarnDefaultInputValue) {\n      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', 'A component', props.type);\n\n      didWarnDefaultInputValue = true;\n    }\n  }\n\n  if (checked !== null) {\n    pushBooleanAttribute(target, 'checked', checked);\n  } else if (defaultChecked !== null) {\n    pushBooleanAttribute(target, 'checked', defaultChecked);\n  }\n\n  if (value !== null) {\n    pushAttribute(target, 'value', value);\n  } else if (defaultValue !== null) {\n    pushAttribute(target, 'value', defaultValue);\n  }\n\n  target.push(endOfStartTagSelfClosing); // We place any additional hidden form fields after the input.\n\n  pushAdditionalFormFields(target, formData);\n  return null;\n}\n\nfunction pushStartButton(target, props, resumableState, renderState) {\n  target.push(startChunkForTag('button'));\n  var children = null;\n  var innerHTML = null;\n  var name = null;\n  var formAction = null;\n  var formEncType = null;\n  var formMethod = null;\n  var formTarget = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        case 'name':\n          name = propValue;\n          break;\n\n        case 'formAction':\n          formAction = propValue;\n          break;\n\n        case 'formEncType':\n          formEncType = propValue;\n          break;\n\n        case 'formMethod':\n          formMethod = propValue;\n          break;\n\n        case 'formTarget':\n          formTarget = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  {\n    if (formAction !== null && props.type != null && props.type !== 'submit' && !didWarnFormActionType) {\n      didWarnFormActionType = true;\n\n      error('A button can only specify a formAction along with type=\"submit\" or no type.');\n    }\n  }\n\n  var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);\n  target.push(endOfStartTag); // We place any additional hidden form fields we need to include inside the button itself.\n\n  pushAdditionalFormFields(target, formData);\n  pushInnerHTML(target, innerHTML, children);\n\n  if (typeof children === 'string') {\n    // Special case children as a string to avoid the unnecessary comment.\n    // TODO: Remove this special case after the general optimization is in place.\n    target.push(stringToChunk(encodeHTMLTextNode(children)));\n    return null;\n  }\n\n  return children;\n}\n\nfunction pushStartTextArea(target, props) {\n  {\n    checkControlledValueProps('textarea', props);\n\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultTextareaValue) {\n      error('Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');\n\n      didWarnDefaultTextareaValue = true;\n    }\n  }\n\n  target.push(startChunkForTag('textarea'));\n  var value = null;\n  var defaultValue = null;\n  var children = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'value':\n          value = propValue;\n          break;\n\n        case 'defaultValue':\n          defaultValue = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  if (value === null && defaultValue !== null) {\n    value = defaultValue;\n  }\n\n  target.push(endOfStartTag); // TODO (yungsters): Remove support for children content in <textarea>.\n\n  if (children != null) {\n    {\n      error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');\n    }\n\n    if (value != null) {\n      throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');\n    }\n\n    if (isArray(children)) {\n      if (children.length > 1) {\n        throw new Error('<textarea> can only have at most one child.');\n      } // TODO: remove the coercion and the DEV check below because it will\n      // always be overwritten by the coercion several lines below it. #22309\n\n\n      {\n        checkHtmlStringCoercion(children[0]);\n      }\n\n      value = '' + children[0];\n    }\n\n    {\n      checkHtmlStringCoercion(children);\n    }\n\n    value = '' + children;\n  }\n\n  if (typeof value === 'string' && value[0] === '\\n') {\n    // text/html ignores the first character in these tags if it's a newline\n    // Prefer to break application/xml over text/html (for now) by adding\n    // a newline specifically to get eaten by the parser. (Alternately for\n    // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n    // \\r is normalized out by HTMLTextAreaElement#value.)\n    // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n    // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n    // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n    // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n    //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n    target.push(leadingNewline);\n  } // ToString and push directly instead of recurse over children.\n  // We don't really support complex children in the value anyway.\n  // This also currently avoids a trailing comment node which breaks textarea.\n\n\n  if (value !== null) {\n    {\n      checkAttributeStringCoercion(value, 'value');\n    }\n\n    target.push(stringToChunk(encodeHTMLTextNode('' + value)));\n  }\n\n  return null;\n}\n\nfunction pushMeta(target, props, renderState, textEmbedded, insertionMode, noscriptTagInScope, isFallback) {\n  {\n    if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {\n      return pushSelfClosing(target, props, 'meta');\n    } else {\n      if (textEmbedded) {\n        // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n        // to be safe and assume text will follow by inserting a textSeparator\n        target.push(textSeparator);\n      }\n\n      if (isFallback) {\n        // Hoistable Elements for fallbacks are simply omitted. we don't want to emit them early\n        // because they are likely superceded by primary content and we want to avoid needing to clean\n        // them up when the primary content is ready. They are never hydrated on the client anyway because\n        // boundaries in fallback are awaited or client render, in either case there is never hydration\n        return null;\n      } else if (typeof props.charSet === 'string') {\n        // \"charset\" Should really be config and not picked up from tags however since this is\n        // the only way to embed the tag today we flush it on a special queue on the Request so it\n        // can go before everything else. Like viewport this means that the tag will escape it's\n        // parent container.\n        return pushSelfClosing(renderState.charsetChunks, props, 'meta');\n      } else if (props.name === 'viewport') {\n        // \"viewport\" is flushed on the Request so it can go earlier that Float resources that\n        // might be affected by it. This means it can escape the boundary it is rendered within.\n        // This is a pragmatic solution to viewport being incredibly sensitive to document order\n        // without requiring all hoistables to be flushed too early.\n        return pushSelfClosing(renderState.viewportChunks, props, 'meta');\n      } else {\n        return pushSelfClosing(renderState.hoistableChunks, props, 'meta');\n      }\n    }\n  }\n}\n\nfunction pushLink(target, props, resumableState, renderState, hoistableState, textEmbedded, insertionMode, noscriptTagInScope, isFallback) {\n  {\n    var rel = props.rel;\n    var href = props.href;\n    var precedence = props.precedence;\n\n    if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof rel !== 'string' || typeof href !== 'string' || href === '') {\n      {\n        if (rel === 'stylesheet' && typeof props.precedence === 'string') {\n          if (typeof href !== 'string' || !href) {\n            error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and expected the `href` prop to be a non-empty string but ecountered %s instead. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop ensure there is a non-empty string `href` prop as well, otherwise remove the `precedence` prop.', getValueDescriptorExpectingObjectForWarning(href));\n          }\n        }\n      }\n\n      pushLinkImpl(target, props);\n      return null;\n    }\n\n    if (props.rel === 'stylesheet') {\n      // This <link> may hoistable as a Stylesheet Resource, otherwise it will emit in place\n      var key = getResourceKey(href);\n\n      if (typeof precedence !== 'string' || props.disabled != null || props.onLoad || props.onError) {\n        // This stylesheet is either not opted into Resource semantics or has conflicting properties which\n        // disqualify it for such. We can still create a preload resource to help it load faster on the\n        // client\n        {\n          if (typeof precedence === 'string') {\n            if (props.disabled != null) {\n              error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and a `disabled` prop. The presence of the `disabled` prop indicates an intent to manage the stylesheet active state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the `disabled` prop, otherwise remove the `precedence` prop.');\n            } else if (props.onLoad || props.onError) {\n              var propDescription = props.onLoad && props.onError ? '`onLoad` and `onError` props' : props.onLoad ? '`onLoad` prop' : '`onError` prop';\n\n              error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', propDescription, propDescription);\n            }\n          }\n        }\n\n        return pushLinkImpl(target, props);\n      } else {\n        // This stylesheet refers to a Resource and we create a new one if necessary\n        var styleQueue = renderState.styles.get(precedence);\n        var hasKey = resumableState.styleResources.hasOwnProperty(key);\n        var resourceState = hasKey ? resumableState.styleResources[key] : undefined;\n\n        if (resourceState !== EXISTS) {\n          // We are going to create this resource now so it is marked as Exists\n          resumableState.styleResources[key] = EXISTS; // If this is the first time we've encountered this precedence we need\n          // to create a StyleQueue\n\n          if (!styleQueue) {\n            styleQueue = {\n              precedence: stringToChunk(escapeTextForBrowser(precedence)),\n              rules: [],\n              hrefs: [],\n              sheets: new Map()\n            };\n            renderState.styles.set(precedence, styleQueue);\n          }\n\n          var resource = {\n            state: PENDING$1,\n            props: stylesheetPropsFromRawProps(props)\n          };\n\n          if (resourceState) {\n            // When resourceState is truty it is a Preload state. We cast it for clarity\n            var preloadState = resourceState;\n\n            if (preloadState.length === 2) {\n              adoptPreloadCredentials(resource.props, preloadState);\n            }\n\n            var preloadResource = renderState.preloads.stylesheets.get(key);\n\n            if (preloadResource && preloadResource.length > 0) {\n              // The Preload for this resource was created in this render pass and has not flushed yet so\n              // we need to clear it to avoid it flushing.\n              preloadResource.length = 0;\n            } else {\n              // Either the preload resource from this render already flushed in this render pass\n              // or the preload flushed in a prior pass (prerender). In either case we need to mark\n              // this resource as already having been preloaded.\n              resource.state = PRELOADED;\n            }\n          } // We add the newly created resource to our StyleQueue and if necessary\n          // track the resource with the currently rendering boundary\n\n\n          styleQueue.sheets.set(key, resource);\n\n          if (hoistableState) {\n            hoistableState.stylesheets.add(resource);\n          }\n        } else {\n          // We need to track whether this boundary should wait on this resource or not.\n          // Typically this resource should always exist since we either had it or just created\n          // it. However, it's possible when you resume that the style has already been emitted\n          // and then it wouldn't be recreated in the RenderState and there's no need to track\n          // it again since we should've hoisted it to the shell already.\n          if (styleQueue) {\n            var _resource = styleQueue.sheets.get(key);\n\n            if (_resource) {\n              if (hoistableState) {\n                hoistableState.stylesheets.add(_resource);\n              }\n            }\n          }\n        }\n\n        if (textEmbedded) {\n          // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n          // to be safe and assume text will follow by inserting a textSeparator\n          target.push(textSeparator);\n        }\n\n        return null;\n      }\n    } else if (props.onLoad || props.onError) {\n      // When using load handlers we cannot hoist and need to emit links in place\n      return pushLinkImpl(target, props);\n    } else {\n      // We can hoist this link so we may need to emit a text separator.\n      // @TODO refactor text separators so we don't have to defensively add\n      // them when we don't end up emitting a tag as a result of pushStartInstance\n      if (textEmbedded) {\n        // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n        // to be safe and assume text will follow by inserting a textSeparator\n        target.push(textSeparator);\n      }\n\n      if (isFallback) {\n        // Hoistable Elements for fallbacks are simply omitted. we don't want to emit them early\n        // because they are likely superceded by primary content and we want to avoid needing to clean\n        // them up when the primary content is ready. They are never hydrated on the client anyway because\n        // boundaries in fallback are awaited or client render, in either case there is never hydration\n        return null;\n      } else {\n        return pushLinkImpl(renderState.hoistableChunks, props);\n      }\n    }\n  }\n}\n\nfunction pushLinkImpl(target, props) {\n  target.push(startChunkForTag('link'));\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n        case 'dangerouslySetInnerHTML':\n          throw new Error('link' + \" is a self-closing tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTagSelfClosing);\n  return null;\n}\n\nfunction pushStyle(target, props, resumableState, renderState, hoistableState, textEmbedded, insertionMode, noscriptTagInScope) {\n  {\n    if (hasOwnProperty.call(props, 'children')) {\n      var children = props.children;\n      var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n\n      if (typeof child === 'function' || typeof child === 'symbol' || Array.isArray(child)) {\n        var childType = typeof child === 'function' ? 'a Function' : typeof child === 'symbol' ? 'a Sybmol' : 'an Array';\n\n        error('React expect children of <style> tags to be a string, number, or object with a `toString` method but found %s instead. ' + 'In browsers style Elements can only have `Text` Nodes as children.', childType);\n      }\n    }\n  }\n\n  {\n    var precedence = props.precedence;\n    var href = props.href;\n\n    if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof precedence !== 'string' || typeof href !== 'string' || href === '') {\n      // This style tag is not able to be turned into a Style Resource\n      return pushStyleImpl(target, props);\n    }\n\n    {\n      if (href.includes(' ')) {\n        error('React expected the `href` prop for a <style> tag opting into hoisting semantics using the `precedence` prop to not have any spaces but ecountered spaces instead. using spaces in this prop will cause hydration of this style to fail on the client. The href for the <style> where this ocurred is \"%s\".', href);\n      }\n    }\n\n    var key = getResourceKey(href);\n    var styleQueue = renderState.styles.get(precedence);\n    var hasKey = resumableState.styleResources.hasOwnProperty(key);\n    var resourceState = hasKey ? resumableState.styleResources[key] : undefined;\n\n    if (resourceState !== EXISTS) {\n      // We are going to create this resource now so it is marked as Exists\n      resumableState.styleResources[key] = EXISTS;\n\n      {\n        if (resourceState) {\n          error('React encountered a hoistable style tag for the same href as a preload: \"%s\". When using a style tag to inline styles you should not also preload it as a stylsheet.', href);\n        }\n      }\n\n      if (!styleQueue) {\n        // This is the first time we've encountered this precedence we need\n        // to create a StyleQueue.\n        styleQueue = {\n          precedence: stringToChunk(escapeTextForBrowser(precedence)),\n          rules: [],\n          hrefs: [stringToChunk(escapeTextForBrowser(href))],\n          sheets: new Map()\n        };\n        renderState.styles.set(precedence, styleQueue);\n      } else {\n        // We have seen this precedence before and need to track this href\n        styleQueue.hrefs.push(stringToChunk(escapeTextForBrowser(href)));\n      }\n\n      pushStyleContents(styleQueue.rules, props);\n    }\n\n    if (styleQueue) {\n      // We need to track whether this boundary should wait on this resource or not.\n      // Typically this resource should always exist since we either had it or just created\n      // it. However, it's possible when you resume that the style has already been emitted\n      // and then it wouldn't be recreated in the RenderState and there's no need to track\n      // it again since we should've hoisted it to the shell already.\n      if (hoistableState) {\n        hoistableState.styles.add(styleQueue);\n      }\n    }\n\n    if (textEmbedded) {\n      // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n      // to be safe and assume text will follow by inserting a textSeparator\n      target.push(textSeparator);\n    }\n  }\n}\n\nfunction pushStyleImpl(target, props) {\n  target.push(startChunkForTag('style'));\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag);\n  var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n\n  if (typeof child !== 'function' && typeof child !== 'symbol' && child !== null && child !== undefined) {\n    // eslint-disable-next-line react-internal/safe-string-coercion\n    target.push(stringToChunk(escapeTextForBrowser('' + child)));\n  }\n\n  pushInnerHTML(target, innerHTML, children);\n  target.push(endChunkForTag('style'));\n  return null;\n}\n\nfunction pushStyleContents(target, props) {\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n      }\n    }\n  }\n\n  var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n\n  if (typeof child !== 'function' && typeof child !== 'symbol' && child !== null && child !== undefined) {\n    // eslint-disable-next-line react-internal/safe-string-coercion\n    target.push(stringToChunk(escapeTextForBrowser('' + child)));\n  }\n\n  pushInnerHTML(target, innerHTML, children);\n  return;\n}\n\nfunction pushImg(target, props, resumableState, renderState, pictureTagInScope) {\n  var src = props.src,\n      srcSet = props.srcSet;\n\n  if (props.loading !== 'lazy' && (src || srcSet) && (typeof src === 'string' || src == null) && (typeof srcSet === 'string' || srcSet == null) && props.fetchPriority !== 'low' && pictureTagInScope === false && // We exclude data URIs in src and srcSet since these should not be preloaded\n  !(typeof src === 'string' && src[4] === ':' && (src[0] === 'd' || src[0] === 'D') && (src[1] === 'a' || src[1] === 'A') && (src[2] === 't' || src[2] === 'T') && (src[3] === 'a' || src[3] === 'A')) && !(typeof srcSet === 'string' && srcSet[4] === ':' && (srcSet[0] === 'd' || srcSet[0] === 'D') && (srcSet[1] === 'a' || srcSet[1] === 'A') && (srcSet[2] === 't' || srcSet[2] === 'T') && (srcSet[3] === 'a' || srcSet[3] === 'A'))) {\n    // We have a suspensey image and ought to preload it to optimize the loading of display blocking\n    // resumableState.\n    var sizes = typeof props.sizes === 'string' ? props.sizes : undefined;\n    var key = getImageResourceKey(src, srcSet, sizes);\n    var promotablePreloads = renderState.preloads.images;\n    var resource = promotablePreloads.get(key);\n\n    if (resource) {\n      // We consider whether this preload can be promoted to higher priority flushing queue.\n      // The only time a resource will exist here is if it was created during this render\n      // and was not already in the high priority queue.\n      if (props.fetchPriority === 'high' || renderState.highImagePreloads.size < 10) {\n        // Delete the resource from the map since we are promoting it and don't want to\n        // reenter this branch in a second pass for duplicate img hrefs.\n        promotablePreloads.delete(key); // $FlowFixMe - Flow should understand that this is a Resource if the condition was true\n\n        renderState.highImagePreloads.add(resource);\n      }\n    } else if (!resumableState.imageResources.hasOwnProperty(key)) {\n      // We must construct a new preload resource\n      resumableState.imageResources[key] = PRELOAD_NO_CREDS;\n      var crossOrigin = getCrossOriginString(props.crossOrigin);\n      var headers = renderState.headers;\n      var header;\n\n      if (headers && headers.remainingCapacity > 0 && ( // this is a hueristic similar to capping element preloads to 10 unless explicitly\n      // fetchPriority=\"high\". We use length here which means it will fit fewer images when\n      // the urls are long and more when short. arguably byte size is a better hueristic because\n      // it directly translates to how much we send down before content is actually seen.\n      // We could unify the counts and also make it so the total is tracked regardless of\n      // flushing output but since the headers are likely to be go earlier than content\n      // they don't really conflict so for now I've kept them separate\n      props.fetchPriority === 'high' || headers.highImagePreloads.length < 500) && ( // We manually construct the options for the preload only from strings. We don't want to pollute\n      // the params list with arbitrary props and if we copied everything over as it we might get\n      // coercion errors. We have checks for this in Dev but it seems safer to just only accept values\n      // that are strings\n      header = getPreloadAsHeader(src, 'image', {\n        imageSrcSet: props.srcSet,\n        imageSizes: props.sizes,\n        crossOrigin: crossOrigin,\n        integrity: props.integrity,\n        nonce: props.nonce,\n        type: props.type,\n        fetchPriority: props.fetchPriority,\n        referrerPolicy: props.refererPolicy\n      }), // We always consume the header length since once we find one header that doesn't fit\n      // we assume all the rest won't as well. This is to avoid getting into a situation\n      // where we have a very small remaining capacity but no headers will ever fit and we end\n      // up constantly trying to see if the next resource might make it. In the future we can\n      // make this behavior different between render and prerender since in the latter case\n      // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n      // headers.\n      (headers.remainingCapacity -= header.length) >= 2)) {\n        // If we postpone in the shell we will still emit this preload so we track\n        // it to make sure we don't reset it.\n        renderState.resets.image[key] = PRELOAD_NO_CREDS;\n\n        if (headers.highImagePreloads) {\n          headers.highImagePreloads += ', ';\n        } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n\n\n        headers.highImagePreloads += header;\n      } else {\n        resource = [];\n        pushLinkImpl(resource, {\n          rel: 'preload',\n          as: 'image',\n          // There is a bug in Safari where imageSrcSet is not respected on preload links\n          // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n          // This harms older browers that do not support imageSrcSet by making their preloads not work\n          // but this population is shrinking fast and is already small so we accept this tradeoff.\n          href: srcSet ? undefined : src,\n          imageSrcSet: srcSet,\n          imageSizes: sizes,\n          crossOrigin: crossOrigin,\n          integrity: props.integrity,\n          type: props.type,\n          fetchPriority: props.fetchPriority,\n          referrerPolicy: props.referrerPolicy\n        });\n\n        if (props.fetchPriority === 'high' || renderState.highImagePreloads.size < 10) {\n          renderState.highImagePreloads.add(resource);\n        } else {\n          renderState.bulkPreloads.add(resource); // We can bump the priority up if the same img is rendered later\n          // with fetchPriority=\"high\"\n\n          promotablePreloads.set(key, resource);\n        }\n      }\n    }\n  }\n\n  return pushSelfClosing(target, props, 'img');\n}\n\nfunction pushSelfClosing(target, props, tag) {\n  target.push(startChunkForTag(tag));\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n        case 'dangerouslySetInnerHTML':\n          throw new Error(tag + \" is a self-closing tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTagSelfClosing);\n  return null;\n}\n\nfunction pushStartMenuItem(target, props) {\n  target.push(startChunkForTag('menuitem'));\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n        case 'dangerouslySetInnerHTML':\n          throw new Error('menuitems cannot have `children` nor `dangerouslySetInnerHTML`.');\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag);\n  return null;\n}\n\nfunction pushTitle(target, props, renderState, insertionMode, noscriptTagInScope, isFallback) {\n  {\n    if (hasOwnProperty.call(props, 'children')) {\n      var children = props.children;\n      var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n\n      if (Array.isArray(children) && children.length > 1) {\n        error('React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an Array with length %s instead.' + ' Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert `children` of <title> tags to a single string value' + ' which is why Arrays of length greater than 1 are not supported. When using JSX it can be commong to combine text nodes and value nodes.' + ' For example: <title>hello {nameOfUser}</title>. While not immediately apparent, `children` in this case is an Array with length 2. If your `children` prop' + ' is using this form try rewriting it using a template string: <title>{`hello ${nameOfUser}`}</title>.', children.length);\n      } else if (typeof child === 'function' || typeof child === 'symbol') {\n        var childType = typeof child === 'function' ? 'a Function' : 'a Sybmol';\n\n        error('React expect children of <title> tags to be a string, number, or object with a novel `toString` method but found %s instead.' + ' Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title>' + ' tags to a single string value.', childType);\n      } else if (child && child.toString === {}.toString) {\n        if (child.$$typeof != null) {\n          error('React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that appears to be' + ' a React element which never implements a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to' + ' be able to convert children of <title> tags to a single string value which is why rendering React elements is not supported. If the `children` of <title> is' + ' a React Component try moving the <title> tag into that component. If the `children` of <title> is some HTML markup change it to be Text only to be valid HTML.');\n        } else {\n          error('React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that does not implement' + ' a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags' + ' to a single string value. Using the default `toString` method available on every object is almost certainly an error. Consider whether the `children` of this <title>' + ' is an object in error and change it to a string or number value if so. Otherwise implement a `toString` method that React can use to produce a valid <title>.');\n        }\n      }\n    }\n  }\n\n  {\n    if (insertionMode !== SVG_MODE && !noscriptTagInScope && props.itemProp == null) {\n      if (isFallback) {\n        // Hoistable Elements for fallbacks are simply omitted. we don't want to emit them early\n        // because they are likely superceded by primary content and we want to avoid needing to clean\n        // them up when the primary content is ready. They are never hydrated on the client anyway because\n        // boundaries in fallback are awaited or client render, in either case there is never hydration\n        return null;\n      } else {\n        pushTitleImpl(renderState.hoistableChunks, props);\n      }\n    } else {\n      return pushTitleImpl(target, props);\n    }\n  }\n}\n\nfunction pushTitleImpl(target, props) {\n  target.push(startChunkForTag('title'));\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag);\n  var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n\n  if (typeof child !== 'function' && typeof child !== 'symbol' && child !== null && child !== undefined) {\n    // eslint-disable-next-line react-internal/safe-string-coercion\n    target.push(stringToChunk(escapeTextForBrowser('' + child)));\n  }\n\n  pushInnerHTML(target, innerHTML, children);\n  target.push(endChunkForTag('title'));\n  return null;\n}\n\nfunction pushStartHead(target, props, renderState, insertionMode) {\n  {\n    if (insertionMode < HTML_MODE && renderState.headChunks === null) {\n      // This <head> is the Document.head and should be part of the preamble\n      renderState.headChunks = [];\n      return pushStartGenericElement(renderState.headChunks, props, 'head');\n    } else {\n      // This <head> is deep and is likely just an error. we emit it inline though.\n      // Validation should warn that this tag is the the wrong spot.\n      return pushStartGenericElement(target, props, 'head');\n    }\n  }\n}\n\nfunction pushStartHtml(target, props, renderState, insertionMode) {\n  {\n    if (insertionMode === ROOT_HTML_MODE && renderState.htmlChunks === null) {\n      // This <html> is the Document.documentElement and should be part of the preamble\n      renderState.htmlChunks = [doctypeChunk];\n      return pushStartGenericElement(renderState.htmlChunks, props, 'html');\n    } else {\n      // This <html> is deep and is likely just an error. we emit it inline though.\n      // Validation should warn that this tag is the the wrong spot.\n      return pushStartGenericElement(target, props, 'html');\n    }\n  }\n}\n\nfunction pushScript(target, props, resumableState, renderState, textEmbedded, insertionMode, noscriptTagInScope) {\n  {\n    var asyncProp = props.async;\n\n    if (typeof props.src !== 'string' || !props.src || !(asyncProp && typeof asyncProp !== 'function' && typeof asyncProp !== 'symbol') || props.onLoad || props.onError || insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {\n      // This script will not be a resource, we bailout early and emit it in place.\n      return pushScriptImpl(target, props);\n    }\n\n    var src = props.src;\n    var key = getResourceKey(src); // We can make this <script> into a ScriptResource\n\n    var resources, preloads;\n\n    if (props.type === 'module') {\n      resources = resumableState.moduleScriptResources;\n      preloads = renderState.preloads.moduleScripts;\n    } else {\n      resources = resumableState.scriptResources;\n      preloads = renderState.preloads.scripts;\n    }\n\n    var hasKey = resources.hasOwnProperty(key);\n    var resourceState = hasKey ? resources[key] : undefined;\n\n    if (resourceState !== EXISTS) {\n      // We are going to create this resource now so it is marked as Exists\n      resources[key] = EXISTS;\n      var scriptProps = props;\n\n      if (resourceState) {\n        // When resourceState is truty it is a Preload state. We cast it for clarity\n        var preloadState = resourceState;\n\n        if (preloadState.length === 2) {\n          scriptProps = assign({}, props);\n          adoptPreloadCredentials(scriptProps, preloadState);\n        }\n\n        var preloadResource = preloads.get(key);\n\n        if (preloadResource) {\n          // the preload resource exists was created in this render. Now that we have\n          // a script resource which will emit earlier than a preload would if it\n          // hasn't already flushed we prevent it from flushing by zeroing the length\n          preloadResource.length = 0;\n        }\n      }\n\n      var resource = []; // Add to the script flushing queue\n\n      renderState.scripts.add(resource); // encode the tag as Chunks\n\n      pushScriptImpl(resource, scriptProps);\n    }\n\n    if (textEmbedded) {\n      // This script follows text but we aren't writing a tag. while not as efficient as possible we need\n      // to be safe and assume text will follow by inserting a textSeparator\n      target.push(textSeparator);\n    }\n\n    return null;\n  }\n}\n\nfunction pushScriptImpl(target, props) {\n  target.push(startChunkForTag('script'));\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag);\n\n  {\n    if (children != null && typeof children !== 'string') {\n      var descriptiveStatement = typeof children === 'number' ? 'a number for children' : Array.isArray(children) ? 'an array for children' : 'something unexpected for children';\n\n      error('A script element was rendered with %s. If script element has children it must be a single string.' + ' Consider using dangerouslySetInnerHTML or passing a plain string as children.', descriptiveStatement);\n    }\n  }\n\n  pushInnerHTML(target, innerHTML, children);\n\n  if (typeof children === 'string') {\n    target.push(stringToChunk(encodeHTMLTextNode(children)));\n  }\n\n  target.push(endChunkForTag('script'));\n  return null;\n}\n\nfunction pushStartGenericElement(target, props, tag) {\n  target.push(startChunkForTag(tag));\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag);\n  pushInnerHTML(target, innerHTML, children);\n\n  if (typeof children === 'string') {\n    // Special case children as a string to avoid the unnecessary comment.\n    // TODO: Remove this special case after the general optimization is in place.\n    target.push(stringToChunk(encodeHTMLTextNode(children)));\n    return null;\n  }\n\n  return children;\n}\n\nfunction pushStartCustomElement(target, props, tag) {\n  target.push(startChunkForTag(tag));\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      var attributeName = propKey;\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        case 'style':\n          pushStyleAttribute(target, propValue);\n          break;\n\n        case 'suppressContentEditableWarning':\n        case 'suppressHydrationWarning':\n        case 'ref':\n          // Ignored. These are built-in to React on the client.\n          break;\n\n        case 'className':\n\n        // intentional fallthrough\n\n        default:\n          if (isAttributeNameSafe(propKey) && typeof propValue !== 'function' && typeof propValue !== 'symbol') {\n\n            target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);\n          }\n\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag);\n  pushInnerHTML(target, innerHTML, children);\n  return children;\n}\n\nvar leadingNewline = stringToPrecomputedChunk('\\n');\n\nfunction pushStartPreformattedElement(target, props, tag) {\n  target.push(startChunkForTag(tag));\n  var children = null;\n  var innerHTML = null;\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'children':\n          children = propValue;\n          break;\n\n        case 'dangerouslySetInnerHTML':\n          innerHTML = propValue;\n          break;\n\n        default:\n          pushAttribute(target, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  target.push(endOfStartTag); // text/html ignores the first character in these tags if it's a newline\n  // Prefer to break application/xml over text/html (for now) by adding\n  // a newline specifically to get eaten by the parser. (Alternately for\n  // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n  // \\r is normalized out by HTMLTextAreaElement#value.)\n  // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n  // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n  // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n  // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n  //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n  // TODO: This doesn't deal with the case where the child is an array\n  // or component that returns a string.\n\n  if (innerHTML != null) {\n    if (children != null) {\n      throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');\n    }\n\n    if (typeof innerHTML !== 'object' || !('__html' in innerHTML)) {\n      throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');\n    }\n\n    var html = innerHTML.__html;\n\n    if (html !== null && html !== undefined) {\n      if (typeof html === 'string' && html.length > 0 && html[0] === '\\n') {\n        target.push(leadingNewline, stringToChunk(html));\n      } else {\n        {\n          checkHtmlStringCoercion(html);\n        }\n\n        target.push(stringToChunk('' + html));\n      }\n    }\n  }\n\n  if (typeof children === 'string' && children[0] === '\\n') {\n    target.push(leadingNewline);\n  }\n\n  return children;\n} // We accept any tag to be rendered but since this gets injected into arbitrary\n// HTML, we want to make sure that it's a safe tag.\n// http://www.w3.org/TR/REC-xml/#NT-Name\n\n\nvar VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset\n\nvar validatedTagCache = new Map();\n\nfunction startChunkForTag(tag) {\n  var tagStartChunk = validatedTagCache.get(tag);\n\n  if (tagStartChunk === undefined) {\n    if (!VALID_TAG_REGEX.test(tag)) {\n      throw new Error(\"Invalid tag: \" + tag);\n    }\n\n    tagStartChunk = stringToPrecomputedChunk('<' + tag);\n    validatedTagCache.set(tag, tagStartChunk);\n  }\n\n  return tagStartChunk;\n}\n\nvar doctypeChunk = stringToPrecomputedChunk('<!DOCTYPE html>');\nfunction pushStartInstance(target, type, props, resumableState, renderState, hoistableState, formatContext, textEmbedded, isFallback) {\n  {\n    validateProperties$2(type, props);\n    validateProperties$1(type, props);\n    validateProperties(type, props, null);\n\n    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {\n      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');\n    }\n\n    if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {\n      if (type.indexOf('-') === -1 && type.toLowerCase() !== type) {\n        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);\n      }\n    }\n  }\n\n  switch (type) {\n    case 'div':\n    case 'span':\n    case 'svg':\n    case 'path':\n      // Fast track very common tags\n      break;\n\n    case 'a':\n      {\n        break;\n      }\n\n    case 'g':\n    case 'p':\n    case 'li':\n      // Fast track very common tags\n      break;\n    // Special tags\n\n    case 'select':\n      return pushStartSelect(target, props);\n\n    case 'option':\n      return pushStartOption(target, props, formatContext);\n\n    case 'textarea':\n      return pushStartTextArea(target, props);\n\n    case 'input':\n      return pushInput(target, props, resumableState, renderState);\n\n    case 'button':\n      return pushStartButton(target, props, resumableState, renderState);\n\n    case 'form':\n      return pushStartForm(target, props, resumableState, renderState);\n\n    case 'menuitem':\n      return pushStartMenuItem(target, props);\n\n    case 'title':\n      return pushTitle(target, props, renderState, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback) ;\n\n    case 'link':\n      return pushLink(target, props, resumableState, renderState, hoistableState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);\n\n    case 'script':\n      return pushScript(target, props, resumableState, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE)) ;\n\n    case 'style':\n      return pushStyle(target, props, resumableState, renderState, hoistableState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));\n\n    case 'meta':\n      return pushMeta(target, props, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);\n    // Newline eating tags\n\n    case 'listing':\n    case 'pre':\n      {\n        return pushStartPreformattedElement(target, props, type);\n      }\n\n    case 'img':\n      {\n        return pushImg(target, props, resumableState, renderState, !!(formatContext.tagScope & PICTURE_SCOPE)) ;\n      }\n    // Omitted close tags\n\n    case 'base':\n    case 'area':\n    case 'br':\n    case 'col':\n    case 'embed':\n    case 'hr':\n    case 'keygen':\n    case 'param':\n    case 'source':\n    case 'track':\n    case 'wbr':\n      {\n        return pushSelfClosing(target, props, type);\n      }\n    // These are reserved SVG and MathML elements, that are never custom elements.\n    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n\n    case 'annotation-xml':\n    case 'color-profile':\n    case 'font-face':\n    case 'font-face-src':\n    case 'font-face-uri':\n    case 'font-face-format':\n    case 'font-face-name':\n    case 'missing-glyph':\n      {\n        break;\n      }\n    // Preamble start tags\n\n    case 'head':\n      return pushStartHead(target, props, renderState, formatContext.insertionMode);\n\n    case 'html':\n      {\n        return pushStartHtml(target, props, renderState, formatContext.insertionMode);\n      }\n\n    default:\n      {\n        if (type.indexOf('-') !== -1) {\n          // Custom element\n          return pushStartCustomElement(target, props, type);\n        }\n      }\n  } // Generic element\n\n\n  return pushStartGenericElement(target, props, type);\n}\nvar endTagCache = new Map();\n\nfunction endChunkForTag(tag) {\n  var chunk = endTagCache.get(tag);\n\n  if (chunk === undefined) {\n    chunk = stringToPrecomputedChunk('</' + tag + '>');\n    endTagCache.set(tag, chunk);\n  }\n\n  return chunk;\n}\n\nfunction pushEndInstance(target, type, props, resumableState, formatContext) {\n  switch (type) {\n    // When float is on we expect title and script tags to always be pushed in\n    // a unit and never return children. when we end up pushing the end tag we\n    // want to ensure there is no extra closing tag pushed\n    case 'title':\n    case 'style':\n    case 'script':\n    // Omitted close tags\n    // TODO: Instead of repeating this switch we could try to pass a flag from above.\n    // That would require returning a tuple. Which might be ok if it gets inlined.\n\n    case 'area':\n    case 'base':\n    case 'br':\n    case 'col':\n    case 'embed':\n    case 'hr':\n    case 'img':\n    case 'input':\n    case 'keygen':\n    case 'link':\n    case 'meta':\n    case 'param':\n    case 'source':\n    case 'track':\n    case 'wbr':\n      {\n        // No close tag needed.\n        return;\n      }\n    // Postamble end tags\n    // When float is enabled we omit the end tags for body and html when\n    // they represent the Document.body and Document.documentElement Nodes.\n    // This is so we can withhold them until the postamble when we know\n    // we won't emit any more tags\n\n    case 'body':\n      {\n        if (formatContext.insertionMode <= HTML_HTML_MODE) {\n          resumableState.hasBody = true;\n          return;\n        }\n\n        break;\n      }\n\n    case 'html':\n      if (formatContext.insertionMode === ROOT_HTML_MODE) {\n        resumableState.hasHtml = true;\n        return;\n      }\n\n      break;\n  }\n\n  target.push(endChunkForTag(type));\n}\n\nfunction writeBootstrap(destination, renderState) {\n  var bootstrapChunks = renderState.bootstrapChunks;\n  var i = 0;\n\n  for (; i < bootstrapChunks.length - 1; i++) {\n    writeChunk(destination, bootstrapChunks[i]);\n  }\n\n  if (i < bootstrapChunks.length) {\n    var lastChunk = bootstrapChunks[i];\n    bootstrapChunks.length = 0;\n    return writeChunkAndReturn(destination, lastChunk);\n  }\n\n  return true;\n}\n\nfunction writeCompletedRoot(destination, renderState) {\n  return writeBootstrap(destination, renderState);\n} // Structural Nodes\n// A placeholder is a node inside a hidden partial tree that can be filled in later, but before\n// display. It's never visible to users. We use the template tag because it can be used in every\n// type of parent. <script> tags also work in every other tag except <colgroup>.\n\nvar placeholder1 = stringToPrecomputedChunk('<template id=\"');\nvar placeholder2 = stringToPrecomputedChunk('\"></template>');\nfunction writePlaceholder(destination, renderState, id) {\n  writeChunk(destination, placeholder1);\n  writeChunk(destination, renderState.placeholderPrefix);\n  var formattedID = stringToChunk(id.toString(16));\n  writeChunk(destination, formattedID);\n  return writeChunkAndReturn(destination, placeholder2);\n} // Suspense boundaries are encoded as comments.\n\nvar startCompletedSuspenseBoundary = stringToPrecomputedChunk('<!--$-->');\nvar startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id=\"');\nvar startPendingSuspenseBoundary2 = stringToPrecomputedChunk('\"></template>');\nvar startClientRenderedSuspenseBoundary = stringToPrecomputedChunk('<!--$!-->');\nvar endSuspenseBoundary = stringToPrecomputedChunk('<!--/$-->');\nvar clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk('<template');\nvar clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('\"');\nvar clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst=\"');\nvar clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg=\"');\nvar clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck=\"');\nvar clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk('></template>');\nfunction writeStartCompletedSuspenseBoundary(destination, renderState) {\n  return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);\n}\nfunction writeStartPendingSuspenseBoundary(destination, renderState, id) {\n  writeChunk(destination, startPendingSuspenseBoundary1);\n\n  if (id === null) {\n    throw new Error('An ID must have been assigned before we can complete the boundary.');\n  }\n\n  writeChunk(destination, renderState.boundaryPrefix);\n  writeChunk(destination, stringToChunk(id.toString(16)));\n  return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);\n}\nfunction writeStartClientRenderedSuspenseBoundary(destination, renderState, errorDigest, errorMesssage, errorComponentStack) {\n  var result;\n  result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);\n  writeChunk(destination, clientRenderedSuspenseBoundaryError1);\n\n  if (errorDigest) {\n    writeChunk(destination, clientRenderedSuspenseBoundaryError1A);\n    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));\n    writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n  }\n\n  {\n    if (errorMesssage) {\n      writeChunk(destination, clientRenderedSuspenseBoundaryError1B);\n      writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));\n      writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n    }\n\n    if (errorComponentStack) {\n      writeChunk(destination, clientRenderedSuspenseBoundaryError1C);\n      writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));\n      writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n    }\n  }\n\n  result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);\n  return result;\n}\nfunction writeEndCompletedSuspenseBoundary(destination, renderState) {\n  return writeChunkAndReturn(destination, endSuspenseBoundary);\n}\nfunction writeEndPendingSuspenseBoundary(destination, renderState) {\n  return writeChunkAndReturn(destination, endSuspenseBoundary);\n}\nfunction writeEndClientRenderedSuspenseBoundary(destination, renderState) {\n  return writeChunkAndReturn(destination, endSuspenseBoundary);\n}\nvar startSegmentHTML = stringToPrecomputedChunk('<div hidden id=\"');\nvar startSegmentHTML2 = stringToPrecomputedChunk('\">');\nvar endSegmentHTML = stringToPrecomputedChunk('</div>');\nvar startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden=\"true\" style=\"display:none\" id=\"');\nvar startSegmentSVG2 = stringToPrecomputedChunk('\">');\nvar endSegmentSVG = stringToPrecomputedChunk('</svg>');\nvar startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden=\"true\" style=\"display:none\" id=\"');\nvar startSegmentMathML2 = stringToPrecomputedChunk('\">');\nvar endSegmentMathML = stringToPrecomputedChunk('</math>');\nvar startSegmentTable = stringToPrecomputedChunk('<table hidden id=\"');\nvar startSegmentTable2 = stringToPrecomputedChunk('\">');\nvar endSegmentTable = stringToPrecomputedChunk('</table>');\nvar startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id=\"');\nvar startSegmentTableBody2 = stringToPrecomputedChunk('\">');\nvar endSegmentTableBody = stringToPrecomputedChunk('</tbody></table>');\nvar startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id=\"');\nvar startSegmentTableRow2 = stringToPrecomputedChunk('\">');\nvar endSegmentTableRow = stringToPrecomputedChunk('</tr></table>');\nvar startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id=\"');\nvar startSegmentColGroup2 = stringToPrecomputedChunk('\">');\nvar endSegmentColGroup = stringToPrecomputedChunk('</colgroup></table>');\nfunction writeStartSegment(destination, renderState, formatContext, id) {\n  switch (formatContext.insertionMode) {\n    case ROOT_HTML_MODE:\n    case HTML_HTML_MODE:\n    case HTML_MODE:\n      {\n        writeChunk(destination, startSegmentHTML);\n        writeChunk(destination, renderState.segmentPrefix);\n        writeChunk(destination, stringToChunk(id.toString(16)));\n        return writeChunkAndReturn(destination, startSegmentHTML2);\n      }\n\n    case SVG_MODE:\n      {\n        writeChunk(destination, startSegmentSVG);\n        writeChunk(destination, renderState.segmentPrefix);\n        writeChunk(destination, stringToChunk(id.toString(16)));\n        return writeChunkAndReturn(destination, startSegmentSVG2);\n      }\n\n    case MATHML_MODE:\n      {\n        writeChunk(destination, startSegmentMathML);\n        writeChunk(destination, renderState.segmentPrefix);\n        writeChunk(destination, stringToChunk(id.toString(16)));\n        return writeChunkAndReturn(destination, startSegmentMathML2);\n      }\n\n    case HTML_TABLE_MODE:\n      {\n        writeChunk(destination, startSegmentTable);\n        writeChunk(destination, renderState.segmentPrefix);\n        writeChunk(destination, stringToChunk(id.toString(16)));\n        return writeChunkAndReturn(destination, startSegmentTable2);\n      }\n    // TODO: For the rest of these, there will be extra wrapper nodes that never\n    // get deleted from the document. We need to delete the table too as part\n    // of the injected scripts. They are invisible though so it's not too terrible\n    // and it's kind of an edge case to suspend in a table. Totally supported though.\n\n    case HTML_TABLE_BODY_MODE:\n      {\n        writeChunk(destination, startSegmentTableBody);\n        writeChunk(destination, renderState.segmentPrefix);\n        writeChunk(destination, stringToChunk(id.toString(16)));\n        return writeChunkAndReturn(destination, startSegmentTableBody2);\n      }\n\n    case HTML_TABLE_ROW_MODE:\n      {\n        writeChunk(destination, startSegmentTableRow);\n        writeChunk(destination, renderState.segmentPrefix);\n        writeChunk(destination, stringToChunk(id.toString(16)));\n        return writeChunkAndReturn(destination, startSegmentTableRow2);\n      }\n\n    case HTML_COLGROUP_MODE:\n      {\n        writeChunk(destination, startSegmentColGroup);\n        writeChunk(destination, renderState.segmentPrefix);\n        writeChunk(destination, stringToChunk(id.toString(16)));\n        return writeChunkAndReturn(destination, startSegmentColGroup2);\n      }\n\n    default:\n      {\n        throw new Error('Unknown insertion mode. This is a bug in React.');\n      }\n  }\n}\nfunction writeEndSegment(destination, formatContext) {\n  switch (formatContext.insertionMode) {\n    case ROOT_HTML_MODE:\n    case HTML_HTML_MODE:\n    case HTML_MODE:\n      {\n        return writeChunkAndReturn(destination, endSegmentHTML);\n      }\n\n    case SVG_MODE:\n      {\n        return writeChunkAndReturn(destination, endSegmentSVG);\n      }\n\n    case MATHML_MODE:\n      {\n        return writeChunkAndReturn(destination, endSegmentMathML);\n      }\n\n    case HTML_TABLE_MODE:\n      {\n        return writeChunkAndReturn(destination, endSegmentTable);\n      }\n\n    case HTML_TABLE_BODY_MODE:\n      {\n        return writeChunkAndReturn(destination, endSegmentTableBody);\n      }\n\n    case HTML_TABLE_ROW_MODE:\n      {\n        return writeChunkAndReturn(destination, endSegmentTableRow);\n      }\n\n    case HTML_COLGROUP_MODE:\n      {\n        return writeChunkAndReturn(destination, endSegmentColGroup);\n      }\n\n    default:\n      {\n        throw new Error('Unknown insertion mode. This is a bug in React.');\n      }\n  }\n}\nvar completeSegmentScript1Full = stringToPrecomputedChunk(completeSegment + '$RS(\"');\nvar completeSegmentScript1Partial = stringToPrecomputedChunk('$RS(\"');\nvar completeSegmentScript2 = stringToPrecomputedChunk('\",\"');\nvar completeSegmentScriptEnd = stringToPrecomputedChunk('\")</script>');\nvar completeSegmentData1 = stringToPrecomputedChunk('<template data-rsi=\"\" data-sid=\"');\nvar completeSegmentData2 = stringToPrecomputedChunk('\" data-pid=\"');\nvar completeSegmentDataEnd = dataElementQuotedEnd;\nfunction writeCompletedSegmentInstruction(destination, resumableState, renderState, contentSegmentID) {\n  var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;\n\n  if (scriptFormat) {\n    writeChunk(destination, renderState.startInlineScript);\n\n    if ((resumableState.instructions & SentCompleteSegmentFunction) === NothingSent) {\n      // The first time we write this, we'll need to include the full implementation.\n      resumableState.instructions |= SentCompleteSegmentFunction;\n      writeChunk(destination, completeSegmentScript1Full);\n    } else {\n      // Future calls can just reuse the same function.\n      writeChunk(destination, completeSegmentScript1Partial);\n    }\n  } else {\n    writeChunk(destination, completeSegmentData1);\n  } // Write function arguments, which are string literals\n\n\n  writeChunk(destination, renderState.segmentPrefix);\n  var formattedID = stringToChunk(contentSegmentID.toString(16));\n  writeChunk(destination, formattedID);\n\n  if (scriptFormat) {\n    writeChunk(destination, completeSegmentScript2);\n  } else {\n    writeChunk(destination, completeSegmentData2);\n  }\n\n  writeChunk(destination, renderState.placeholderPrefix);\n  writeChunk(destination, formattedID);\n\n  if (scriptFormat) {\n    return writeChunkAndReturn(destination, completeSegmentScriptEnd);\n  } else {\n    return writeChunkAndReturn(destination, completeSegmentDataEnd);\n  }\n}\nvar completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundary + '$RC(\"');\nvar completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC(\"');\nvar completeBoundaryWithStylesScript1FullBoth = stringToPrecomputedChunk(completeBoundary + completeBoundaryWithStyles + '$RR(\"');\nvar completeBoundaryWithStylesScript1FullPartial = stringToPrecomputedChunk(completeBoundaryWithStyles + '$RR(\"');\nvar completeBoundaryWithStylesScript1Partial = stringToPrecomputedChunk('$RR(\"');\nvar completeBoundaryScript2 = stringToPrecomputedChunk('\",\"');\nvar completeBoundaryScript3a = stringToPrecomputedChunk('\",');\nvar completeBoundaryScript3b = stringToPrecomputedChunk('\"');\nvar completeBoundaryScriptEnd = stringToPrecomputedChunk(')</script>');\nvar completeBoundaryData1 = stringToPrecomputedChunk('<template data-rci=\"\" data-bid=\"');\nvar completeBoundaryWithStylesData1 = stringToPrecomputedChunk('<template data-rri=\"\" data-bid=\"');\nvar completeBoundaryData2 = stringToPrecomputedChunk('\" data-sid=\"');\nvar completeBoundaryData3a = stringToPrecomputedChunk('\" data-sty=\"');\nvar completeBoundaryDataEnd = dataElementQuotedEnd;\nfunction writeCompletedBoundaryInstruction(destination, resumableState, renderState, id, hoistableState) {\n  var requiresStyleInsertion;\n\n  {\n    requiresStyleInsertion = renderState.stylesToHoist; // If necessary stylesheets will be flushed with this instruction.\n    // Any style tags not yet hoisted in the Document will also be hoisted.\n    // We reset this state since after this instruction executes all styles\n    // up to this point will have been hoisted\n\n    renderState.stylesToHoist = false;\n  }\n\n  var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;\n\n  if (scriptFormat) {\n    writeChunk(destination, renderState.startInlineScript);\n\n    if (requiresStyleInsertion) {\n      if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {\n        resumableState.instructions |= SentStyleInsertionFunction | SentCompleteBoundaryFunction;\n        writeChunk(destination, completeBoundaryWithStylesScript1FullBoth);\n      } else if ((resumableState.instructions & SentStyleInsertionFunction) === NothingSent) {\n        resumableState.instructions |= SentStyleInsertionFunction;\n        writeChunk(destination, completeBoundaryWithStylesScript1FullPartial);\n      } else {\n        writeChunk(destination, completeBoundaryWithStylesScript1Partial);\n      }\n    } else {\n      if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {\n        resumableState.instructions |= SentCompleteBoundaryFunction;\n        writeChunk(destination, completeBoundaryScript1Full);\n      } else {\n        writeChunk(destination, completeBoundaryScript1Partial);\n      }\n    }\n  } else {\n    if (requiresStyleInsertion) {\n      writeChunk(destination, completeBoundaryWithStylesData1);\n    } else {\n      writeChunk(destination, completeBoundaryData1);\n    }\n  }\n\n  var idChunk = stringToChunk(id.toString(16));\n  writeChunk(destination, renderState.boundaryPrefix);\n  writeChunk(destination, idChunk); // Write function arguments, which are string and array literals\n\n  if (scriptFormat) {\n    writeChunk(destination, completeBoundaryScript2);\n  } else {\n    writeChunk(destination, completeBoundaryData2);\n  }\n\n  writeChunk(destination, renderState.segmentPrefix);\n  writeChunk(destination, idChunk);\n\n  if (requiresStyleInsertion) {\n    // Script and data writers must format this differently:\n    //  - script writer emits an array literal, whose string elements are\n    //    escaped for javascript  e.g. [\"A\", \"B\"]\n    //  - data writer emits a string literal, which is escaped as html\n    //    e.g. [&#34;A&#34;, &#34;B&#34;]\n    if (scriptFormat) {\n      writeChunk(destination, completeBoundaryScript3a); // hoistableState encodes an array literal\n\n      writeStyleResourceDependenciesInJS(destination, hoistableState);\n    } else {\n      writeChunk(destination, completeBoundaryData3a);\n      writeStyleResourceDependenciesInAttr(destination, hoistableState);\n    }\n  } else {\n    if (scriptFormat) {\n      writeChunk(destination, completeBoundaryScript3b);\n    }\n  }\n\n  var writeMore;\n\n  if (scriptFormat) {\n    writeMore = writeChunkAndReturn(destination, completeBoundaryScriptEnd);\n  } else {\n    writeMore = writeChunkAndReturn(destination, completeBoundaryDataEnd);\n  }\n\n  return writeBootstrap(destination, renderState) && writeMore;\n}\nvar clientRenderScript1Full = stringToPrecomputedChunk(clientRenderBoundary + ';$RX(\"');\nvar clientRenderScript1Partial = stringToPrecomputedChunk('$RX(\"');\nvar clientRenderScript1A = stringToPrecomputedChunk('\"');\nvar clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(',');\nvar clientRenderScriptEnd = stringToPrecomputedChunk(')</script>');\nvar clientRenderData1 = stringToPrecomputedChunk('<template data-rxi=\"\" data-bid=\"');\nvar clientRenderData2 = stringToPrecomputedChunk('\" data-dgst=\"');\nvar clientRenderData3 = stringToPrecomputedChunk('\" data-msg=\"');\nvar clientRenderData4 = stringToPrecomputedChunk('\" data-stck=\"');\nvar clientRenderDataEnd = dataElementQuotedEnd;\nfunction writeClientRenderBoundaryInstruction(destination, resumableState, renderState, id, errorDigest, errorMessage, errorComponentStack) {\n  var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;\n\n  if (scriptFormat) {\n    writeChunk(destination, renderState.startInlineScript);\n\n    if ((resumableState.instructions & SentClientRenderFunction) === NothingSent) {\n      // The first time we write this, we'll need to include the full implementation.\n      resumableState.instructions |= SentClientRenderFunction;\n      writeChunk(destination, clientRenderScript1Full);\n    } else {\n      // Future calls can just reuse the same function.\n      writeChunk(destination, clientRenderScript1Partial);\n    }\n  } else {\n    // <template data-rxi=\"\" data-bid=\"\n    writeChunk(destination, clientRenderData1);\n  }\n\n  writeChunk(destination, renderState.boundaryPrefix);\n  writeChunk(destination, stringToChunk(id.toString(16)));\n\n  if (scriptFormat) {\n    // \" needs to be inserted for scripts, since ArgInterstitual does not contain\n    // leading or trailing quotes\n    writeChunk(destination, clientRenderScript1A);\n  }\n\n  if (errorDigest || errorMessage || errorComponentStack) {\n    if (scriptFormat) {\n      // ,\"JSONString\"\n      writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n      writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || '')));\n    } else {\n      // \" data-dgst=\"HTMLString\n      writeChunk(destination, clientRenderData2);\n      writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest || '')));\n    }\n  }\n\n  if (errorMessage || errorComponentStack) {\n    if (scriptFormat) {\n      // ,\"JSONString\"\n      writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n      writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || '')));\n    } else {\n      // \" data-msg=\"HTMLString\n      writeChunk(destination, clientRenderData3);\n      writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMessage || '')));\n    }\n  }\n\n  if (errorComponentStack) {\n    // ,\"JSONString\"\n    if (scriptFormat) {\n      writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n      writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));\n    } else {\n      // \" data-stck=\"HTMLString\n      writeChunk(destination, clientRenderData4);\n      writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));\n    }\n  }\n\n  if (scriptFormat) {\n    // ></script>\n    return writeChunkAndReturn(destination, clientRenderScriptEnd);\n  } else {\n    // \"></template>\n    return writeChunkAndReturn(destination, clientRenderDataEnd);\n  }\n}\nvar regexForJSStringsInInstructionScripts = /[<\\u2028\\u2029]/g;\n\nfunction escapeJSStringsForInstructionScripts(input) {\n  var escaped = JSON.stringify(input);\n  return escaped.replace(regexForJSStringsInInstructionScripts, function (match) {\n    switch (match) {\n      // santizing breaking out of strings and script tags\n      case '<':\n        return \"\\\\u003c\";\n\n      case \"\\u2028\":\n        return \"\\\\u2028\";\n\n      case \"\\u2029\":\n        return \"\\\\u2029\";\n\n      default:\n        {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React');\n        }\n    }\n  });\n}\n\nvar regexForJSStringsInScripts = /[&><\\u2028\\u2029]/g;\n\nfunction escapeJSObjectForInstructionScripts(input) {\n  var escaped = JSON.stringify(input);\n  return escaped.replace(regexForJSStringsInScripts, function (match) {\n    switch (match) {\n      // santizing breaking out of strings and script tags\n      case '&':\n        return \"\\\\u0026\";\n\n      case '>':\n        return \"\\\\u003e\";\n\n      case '<':\n        return \"\\\\u003c\";\n\n      case \"\\u2028\":\n        return \"\\\\u2028\";\n\n      case \"\\u2029\":\n        return \"\\\\u2029\";\n\n      default:\n        {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React');\n        }\n    }\n  });\n}\n\nvar lateStyleTagResourceOpen1 = stringToPrecomputedChunk('<style media=\"not all\" data-precedence=\"');\nvar lateStyleTagResourceOpen2 = stringToPrecomputedChunk('\" data-href=\"');\nvar lateStyleTagResourceOpen3 = stringToPrecomputedChunk('\">');\nvar lateStyleTagTemplateClose = stringToPrecomputedChunk('</style>'); // Tracks whether the boundary currently flushing is flushign style tags or has any\n// stylesheet dependencies not flushed in the Preamble.\n\nvar currentlyRenderingBoundaryHasStylesToHoist = false; // Acts as a return value for the forEach execution of style tag flushing.\n\nvar destinationHasCapacity = true;\n\nfunction flushStyleTagsLateForBoundary(styleQueue) {\n  var rules = styleQueue.rules;\n  var hrefs = styleQueue.hrefs;\n\n  {\n    if (rules.length > 0 && hrefs.length === 0) {\n      error('React expected to have at least one href for an a hoistable style but found none. This is a bug in React.');\n    }\n  }\n\n  var i = 0;\n\n  if (hrefs.length) {\n    writeChunk(this, lateStyleTagResourceOpen1);\n    writeChunk(this, styleQueue.precedence);\n    writeChunk(this, lateStyleTagResourceOpen2);\n\n    for (; i < hrefs.length - 1; i++) {\n      writeChunk(this, hrefs[i]);\n      writeChunk(this, spaceSeparator);\n    }\n\n    writeChunk(this, hrefs[i]);\n    writeChunk(this, lateStyleTagResourceOpen3);\n\n    for (i = 0; i < rules.length; i++) {\n      writeChunk(this, rules[i]);\n    }\n\n    destinationHasCapacity = writeChunkAndReturn(this, lateStyleTagTemplateClose); // We wrote style tags for this boundary and we may need to emit a script\n    // to hoist them.\n\n    currentlyRenderingBoundaryHasStylesToHoist = true; // style resources can flush continuously since more rules may be written into\n    // them with new hrefs. Instead of marking it flushed, we simply reset the chunks\n    // and hrefs\n\n    rules.length = 0;\n    hrefs.length = 0;\n  }\n}\n\nfunction hasStylesToHoist(stylesheet) {\n  // We need to reveal boundaries with styles whenever a stylesheet it depends on is either\n  // not flushed or flushed after the preamble (shell).\n  if (stylesheet.state !== PREAMBLE) {\n    currentlyRenderingBoundaryHasStylesToHoist = true;\n    return true;\n  }\n\n  return false;\n}\n\nfunction writeHoistablesForBoundary(destination, hoistableState, renderState) {\n  // Reset these on each invocation, they are only safe to read in this function\n  currentlyRenderingBoundaryHasStylesToHoist = false;\n  destinationHasCapacity = true; // Flush style tags for each precedence this boundary depends on\n\n  hoistableState.styles.forEach(flushStyleTagsLateForBoundary, destination); // Determine if this boundary has stylesheets that need to be awaited upon completion\n\n  hoistableState.stylesheets.forEach(hasStylesToHoist); // We don't actually want to flush any hoistables until the boundary is complete so we omit\n  // any further writing here. This is becuase unlike Resources, Hoistable Elements act more like\n  // regular elements, each rendered element has a unique representation in the DOM. We don't want\n  // these elements to appear in the DOM early, before the boundary has actually completed\n\n  if (currentlyRenderingBoundaryHasStylesToHoist) {\n    renderState.stylesToHoist = true;\n  }\n\n  return destinationHasCapacity;\n}\n\nfunction flushResource(resource) {\n  for (var i = 0; i < resource.length; i++) {\n    writeChunk(this, resource[i]);\n  }\n\n  resource.length = 0;\n}\n\nvar stylesheetFlushingQueue = [];\n\nfunction flushStyleInPreamble(stylesheet, key, map) {\n  // We still need to encode stylesheet chunks\n  // because unlike most Hoistables and Resources we do not eagerly encode\n  // them during render. This is because if we flush late we have to send a\n  // different encoding and we don't want to encode multiple times\n  pushLinkImpl(stylesheetFlushingQueue, stylesheet.props);\n\n  for (var i = 0; i < stylesheetFlushingQueue.length; i++) {\n    writeChunk(this, stylesheetFlushingQueue[i]);\n  }\n\n  stylesheetFlushingQueue.length = 0;\n  stylesheet.state = PREAMBLE;\n}\n\nvar styleTagResourceOpen1 = stringToPrecomputedChunk('<style data-precedence=\"');\nvar styleTagResourceOpen2 = stringToPrecomputedChunk('\" data-href=\"');\nvar spaceSeparator = stringToPrecomputedChunk(' ');\nvar styleTagResourceOpen3 = stringToPrecomputedChunk('\">');\nvar styleTagResourceClose = stringToPrecomputedChunk('</style>');\n\nfunction flushStylesInPreamble(styleQueue, precedence) {\n  var hasStylesheets = styleQueue.sheets.size > 0;\n  styleQueue.sheets.forEach(flushStyleInPreamble, this);\n  styleQueue.sheets.clear();\n  var rules = styleQueue.rules;\n  var hrefs = styleQueue.hrefs; // If we don't emit any stylesheets at this precedence we still need to maintain the precedence\n  // order so even if there are no rules for style tags at this precedence we emit an empty style\n  // tag with the data-precedence attribute\n\n  if (!hasStylesheets || hrefs.length) {\n    writeChunk(this, styleTagResourceOpen1);\n    writeChunk(this, styleQueue.precedence);\n    var i = 0;\n\n    if (hrefs.length) {\n      writeChunk(this, styleTagResourceOpen2);\n\n      for (; i < hrefs.length - 1; i++) {\n        writeChunk(this, hrefs[i]);\n        writeChunk(this, spaceSeparator);\n      }\n\n      writeChunk(this, hrefs[i]);\n    }\n\n    writeChunk(this, styleTagResourceOpen3);\n\n    for (i = 0; i < rules.length; i++) {\n      writeChunk(this, rules[i]);\n    }\n\n    writeChunk(this, styleTagResourceClose); // style resources can flush continuously since more rules may be written into\n    // them with new hrefs. Instead of marking it flushed, we simply reset the chunks\n    // and hrefs\n\n    rules.length = 0;\n    hrefs.length = 0;\n  }\n}\n\nfunction preloadLateStyle(stylesheet) {\n  if (stylesheet.state === PENDING$1) {\n    stylesheet.state = PRELOADED;\n    var preloadProps = preloadAsStylePropsFromProps(stylesheet.props.href, stylesheet.props);\n    pushLinkImpl(stylesheetFlushingQueue, preloadProps);\n\n    for (var i = 0; i < stylesheetFlushingQueue.length; i++) {\n      writeChunk(this, stylesheetFlushingQueue[i]);\n    }\n\n    stylesheetFlushingQueue.length = 0;\n  }\n}\n\nfunction preloadLateStyles(styleQueue) {\n  styleQueue.sheets.forEach(preloadLateStyle, this);\n  styleQueue.sheets.clear();\n} // We don't bother reporting backpressure at the moment because we expect to\n// flush the entire preamble in a single pass. This probably should be modified\n// in the future to be backpressure sensitive but that requires a larger refactor\n// of the flushing code in Fizz.\n\n\nfunction writePreamble(destination, resumableState, renderState, willFlushAllSegments) {\n  // This function must be called exactly once on every request\n  if (!willFlushAllSegments && renderState.externalRuntimeScript) {\n    // If the root segment is incomplete due to suspended tasks\n    // (e.g. willFlushAllSegments = false) and we are using data\n    // streaming format, ensure the external runtime is sent.\n    // (User code could choose to send this even earlier by calling\n    //  preinit(...), if they know they will suspend).\n    var _renderState$external = renderState.externalRuntimeScript,\n        src = _renderState$external.src,\n        chunks = _renderState$external.chunks;\n    internalPreinitScript(resumableState, renderState, src, chunks);\n  }\n\n  var htmlChunks = renderState.htmlChunks;\n  var headChunks = renderState.headChunks;\n  var i = 0; // Emit open tags before Hoistables and Resources\n\n  if (htmlChunks) {\n    // We have an <html> to emit as part of the preamble\n    for (i = 0; i < htmlChunks.length; i++) {\n      writeChunk(destination, htmlChunks[i]);\n    }\n\n    if (headChunks) {\n      for (i = 0; i < headChunks.length; i++) {\n        writeChunk(destination, headChunks[i]);\n      }\n    } else {\n      // We did not render a head but we emitted an <html> so we emit one now\n      writeChunk(destination, startChunkForTag('head'));\n      writeChunk(destination, endOfStartTag);\n    }\n  } else if (headChunks) {\n    // We do not have an <html> but we do have a <head>\n    for (i = 0; i < headChunks.length; i++) {\n      writeChunk(destination, headChunks[i]);\n    }\n  } // Emit high priority Hoistables\n\n\n  var charsetChunks = renderState.charsetChunks;\n\n  for (i = 0; i < charsetChunks.length; i++) {\n    writeChunk(destination, charsetChunks[i]);\n  }\n\n  charsetChunks.length = 0; // emit preconnect resources\n\n  renderState.preconnects.forEach(flushResource, destination);\n  renderState.preconnects.clear();\n  var viewportChunks = renderState.viewportChunks;\n\n  for (i = 0; i < viewportChunks.length; i++) {\n    writeChunk(destination, viewportChunks[i]);\n  }\n\n  viewportChunks.length = 0;\n  renderState.fontPreloads.forEach(flushResource, destination);\n  renderState.fontPreloads.clear();\n  renderState.highImagePreloads.forEach(flushResource, destination);\n  renderState.highImagePreloads.clear(); // Flush unblocked stylesheets by precedence\n\n  renderState.styles.forEach(flushStylesInPreamble, destination);\n  var importMapChunks = renderState.importMapChunks;\n\n  for (i = 0; i < importMapChunks.length; i++) {\n    writeChunk(destination, importMapChunks[i]);\n  }\n\n  importMapChunks.length = 0;\n  renderState.bootstrapScripts.forEach(flushResource, destination);\n  renderState.scripts.forEach(flushResource, destination);\n  renderState.scripts.clear();\n  renderState.bulkPreloads.forEach(flushResource, destination);\n  renderState.bulkPreloads.clear(); // Write embedding hoistableChunks\n\n  var hoistableChunks = renderState.hoistableChunks;\n\n  for (i = 0; i < hoistableChunks.length; i++) {\n    writeChunk(destination, hoistableChunks[i]);\n  }\n\n  hoistableChunks.length = 0;\n\n  if (htmlChunks && headChunks === null) {\n    // we have an <html> but we inserted an implicit <head> tag. We need\n    // to close it since the main content won't have it\n    writeChunk(destination, endChunkForTag('head'));\n  }\n} // We don't bother reporting backpressure at the moment because we expect to\n// flush the entire preamble in a single pass. This probably should be modified\n// in the future to be backpressure sensitive but that requires a larger refactor\n// of the flushing code in Fizz.\n\nfunction writeHoistables(destination, resumableState, renderState) {\n  var i = 0; // Emit high priority Hoistables\n  // We omit charsetChunks because we have already sent the shell and if it wasn't\n  // already sent it is too late now.\n\n  var viewportChunks = renderState.viewportChunks;\n\n  for (i = 0; i < viewportChunks.length; i++) {\n    writeChunk(destination, viewportChunks[i]);\n  }\n\n  viewportChunks.length = 0;\n  renderState.preconnects.forEach(flushResource, destination);\n  renderState.preconnects.clear();\n  renderState.fontPreloads.forEach(flushResource, destination);\n  renderState.fontPreloads.clear();\n  renderState.highImagePreloads.forEach(flushResource, destination);\n  renderState.highImagePreloads.clear(); // Preload any stylesheets. these will emit in a render instruction that follows this\n  // but we want to kick off preloading as soon as possible\n\n  renderState.styles.forEach(preloadLateStyles, destination); // We only hoist importmaps that are configured through createResponse and that will\n  // always flush in the preamble. Generally we don't expect people to render them as\n  // tags when using React but if you do they are going to be treated like regular inline\n  // scripts and flush after other hoistables which is problematic\n  // bootstrap scripts should flush above script priority but these can only flush in the preamble\n  // so we elide the code here for performance\n\n  renderState.scripts.forEach(flushResource, destination);\n  renderState.scripts.clear();\n  renderState.bulkPreloads.forEach(flushResource, destination);\n  renderState.bulkPreloads.clear(); // Write embedding hoistableChunks\n\n  var hoistableChunks = renderState.hoistableChunks;\n\n  for (i = 0; i < hoistableChunks.length; i++) {\n    writeChunk(destination, hoistableChunks[i]);\n  }\n\n  hoistableChunks.length = 0;\n}\nfunction writePostamble(destination, resumableState) {\n  if (resumableState.hasBody) {\n    writeChunk(destination, endChunkForTag('body'));\n  }\n\n  if (resumableState.hasHtml) {\n    writeChunk(destination, endChunkForTag('html'));\n  }\n}\nvar arrayFirstOpenBracket = stringToPrecomputedChunk('[');\nvar arraySubsequentOpenBracket = stringToPrecomputedChunk(',[');\nvar arrayInterstitial = stringToPrecomputedChunk(',');\nvar arrayCloseBracket = stringToPrecomputedChunk(']'); // This function writes a 2D array of strings to be embedded in javascript.\n// E.g.\n//  [[\"JS_escaped_string1\", \"JS_escaped_string2\"]]\n\nfunction writeStyleResourceDependenciesInJS(destination, hoistableState) {\n  writeChunk(destination, arrayFirstOpenBracket);\n  var nextArrayOpenBrackChunk = arrayFirstOpenBracket;\n  hoistableState.stylesheets.forEach(function (resource) {\n    if (resource.state === PREAMBLE) ; else if (resource.state === LATE) {\n      // We only need to emit the href because this resource flushed in an earlier\n      // boundary already which encoded the attributes necessary to construct\n      // the resource instance on the client.\n      writeChunk(destination, nextArrayOpenBrackChunk);\n      writeStyleResourceDependencyHrefOnlyInJS(destination, resource.props.href);\n      writeChunk(destination, arrayCloseBracket);\n      nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n    } else {\n      // We need to emit the whole resource for insertion on the client\n      writeChunk(destination, nextArrayOpenBrackChunk);\n      writeStyleResourceDependencyInJS(destination, resource.props.href, resource.props['data-precedence'], resource.props);\n      writeChunk(destination, arrayCloseBracket);\n      nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n      resource.state = LATE;\n    }\n  });\n  writeChunk(destination, arrayCloseBracket);\n}\n/* Helper functions */\n\n\nfunction writeStyleResourceDependencyHrefOnlyInJS(destination, href) {\n  // We should actually enforce this earlier when the resource is created but for\n  // now we make sure we are actually dealing with a string here.\n  {\n    checkAttributeStringCoercion(href, 'href');\n  }\n\n  var coercedHref = '' + href;\n  writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));\n}\n\nfunction writeStyleResourceDependencyInJS(destination, href, precedence, props) {\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  var coercedHref = sanitizeURL('' + href);\n  writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));\n\n  {\n    checkAttributeStringCoercion(precedence, 'precedence');\n  }\n\n  var coercedPrecedence = '' + precedence;\n  writeChunk(destination, arrayInterstitial);\n  writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedPrecedence)));\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'href':\n        case 'rel':\n        case 'precedence':\n        case 'data-precedence':\n          {\n            break;\n          }\n\n        case 'children':\n        case 'dangerouslySetInnerHTML':\n          throw new Error('link' + \" is a self-closing tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n\n        default:\n          writeStyleResourceAttributeInJS(destination, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction writeStyleResourceAttributeInJS(destination, name, value) // not null or undefined\n{\n  var attributeName = name.toLowerCase();\n  var attributeValue;\n\n  switch (typeof value) {\n    case 'function':\n    case 'symbol':\n      return;\n  }\n\n  switch (name) {\n    // Reserved names\n    case 'innerHTML':\n    case 'dangerouslySetInnerHTML':\n    case 'suppressContentEditableWarning':\n    case 'suppressHydrationWarning':\n    case 'style':\n    case 'ref':\n      // Ignored\n      return;\n    // Attribute renames\n\n    case 'className':\n      {\n        attributeName = 'class';\n\n        {\n          checkAttributeStringCoercion(value, attributeName);\n        }\n\n        attributeValue = '' + value;\n        break;\n      }\n    // Booleans\n\n    case 'hidden':\n      {\n        if (value === false) {\n          return;\n        }\n\n        attributeValue = '';\n        break;\n      }\n    // Santized URLs\n\n    case 'src':\n    case 'href':\n      {\n        value = sanitizeURL(value);\n\n        {\n          checkAttributeStringCoercion(value, attributeName);\n        }\n\n        attributeValue = '' + value;\n        break;\n      }\n\n    default:\n      {\n        if ( // unrecognized event handlers are not SSR'd and we (apparently)\n        // use on* as hueristic for these handler props\n        name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {\n          return;\n        }\n\n        if (!isAttributeNameSafe(name)) {\n          return;\n        }\n\n        {\n          checkAttributeStringCoercion(value, attributeName);\n        }\n\n        attributeValue = '' + value;\n      }\n  }\n\n  writeChunk(destination, arrayInterstitial);\n  writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeName)));\n  writeChunk(destination, arrayInterstitial);\n  writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeValue)));\n} // This function writes a 2D array of strings to be embedded in an attribute\n// value and read with JSON.parse in ReactDOMServerExternalRuntime.js\n// E.g.\n//  [[&quot;JSON_escaped_string1&quot;, &quot;JSON_escaped_string2&quot;]]\n\n\nfunction writeStyleResourceDependenciesInAttr(destination, hoistableState) {\n  writeChunk(destination, arrayFirstOpenBracket);\n  var nextArrayOpenBrackChunk = arrayFirstOpenBracket;\n  hoistableState.stylesheets.forEach(function (resource) {\n    if (resource.state === PREAMBLE) ; else if (resource.state === LATE) {\n      // We only need to emit the href because this resource flushed in an earlier\n      // boundary already which encoded the attributes necessary to construct\n      // the resource instance on the client.\n      writeChunk(destination, nextArrayOpenBrackChunk);\n      writeStyleResourceDependencyHrefOnlyInAttr(destination, resource.props.href);\n      writeChunk(destination, arrayCloseBracket);\n      nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n    } else {\n      // We need to emit the whole resource for insertion on the client\n      writeChunk(destination, nextArrayOpenBrackChunk);\n      writeStyleResourceDependencyInAttr(destination, resource.props.href, resource.props['data-precedence'], resource.props);\n      writeChunk(destination, arrayCloseBracket);\n      nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n      resource.state = LATE;\n    }\n  });\n  writeChunk(destination, arrayCloseBracket);\n}\n/* Helper functions */\n\n\nfunction writeStyleResourceDependencyHrefOnlyInAttr(destination, href) {\n  // We should actually enforce this earlier when the resource is created but for\n  // now we make sure we are actually dealing with a string here.\n  {\n    checkAttributeStringCoercion(href, 'href');\n  }\n\n  var coercedHref = '' + href;\n  writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));\n}\n\nfunction writeStyleResourceDependencyInAttr(destination, href, precedence, props) {\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  var coercedHref = sanitizeURL('' + href);\n  writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));\n\n  {\n    checkAttributeStringCoercion(precedence, 'precedence');\n  }\n\n  var coercedPrecedence = '' + precedence;\n  writeChunk(destination, arrayInterstitial);\n  writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedPrecedence))));\n\n  for (var propKey in props) {\n    if (hasOwnProperty.call(props, propKey)) {\n      var propValue = props[propKey];\n\n      if (propValue == null) {\n        continue;\n      }\n\n      switch (propKey) {\n        case 'href':\n        case 'rel':\n        case 'precedence':\n        case 'data-precedence':\n          {\n            break;\n          }\n\n        case 'children':\n        case 'dangerouslySetInnerHTML':\n          throw new Error('link' + \" is a self-closing tag and must neither have `children` nor \" + 'use `dangerouslySetInnerHTML`.');\n\n        default:\n          writeStyleResourceAttributeInAttr(destination, propKey, propValue);\n          break;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction writeStyleResourceAttributeInAttr(destination, name, value) // not null or undefined\n{\n  var attributeName = name.toLowerCase();\n  var attributeValue;\n\n  switch (typeof value) {\n    case 'function':\n    case 'symbol':\n      return;\n  }\n\n  switch (name) {\n    // Reserved names\n    case 'innerHTML':\n    case 'dangerouslySetInnerHTML':\n    case 'suppressContentEditableWarning':\n    case 'suppressHydrationWarning':\n    case 'style':\n    case 'ref':\n      // Ignored\n      return;\n    // Attribute renames\n\n    case 'className':\n      {\n        attributeName = 'class';\n\n        {\n          checkAttributeStringCoercion(value, attributeName);\n        }\n\n        attributeValue = '' + value;\n        break;\n      }\n    // Booleans\n\n    case 'hidden':\n      {\n        if (value === false) {\n          return;\n        }\n\n        attributeValue = '';\n        break;\n      }\n    // Santized URLs\n\n    case 'src':\n    case 'href':\n      {\n        value = sanitizeURL(value);\n\n        {\n          checkAttributeStringCoercion(value, attributeName);\n        }\n\n        attributeValue = '' + value;\n        break;\n      }\n\n    default:\n      {\n        if ( // unrecognized event handlers are not SSR'd and we (apparently)\n        // use on* as hueristic for these handler props\n        name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {\n          return;\n        }\n\n        if (!isAttributeNameSafe(name)) {\n          return;\n        }\n\n        {\n          checkAttributeStringCoercion(value, attributeName);\n        }\n\n        attributeValue = '' + value;\n      }\n  }\n\n  writeChunk(destination, arrayInterstitial);\n  writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeName))));\n  writeChunk(destination, arrayInterstitial);\n  writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeValue))));\n}\n/**\n * Resources\n */\n\n\nvar PENDING$1 = 0;\nvar PRELOADED = 1;\nvar PREAMBLE = 2;\nvar LATE = 3;\nfunction createHoistableState() {\n  return {\n    styles: new Set(),\n    stylesheets: new Set()\n  };\n}\n\nfunction getResourceKey(href) {\n  return href;\n}\n\nfunction getImageResourceKey(href, imageSrcSet, imageSizes) {\n  if (imageSrcSet) {\n    return imageSrcSet + '\\n' + (imageSizes || '');\n  }\n\n  return href;\n}\n\nfunction prefetchDNS(href) {\n\n  var request = resolveRequest();\n\n  if (!request) {\n    // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n    // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n    // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n    // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n    // fetching) and we don't want to warn in those cases.\n    return;\n  }\n\n  var resumableState = getResumableState(request);\n  var renderState = getRenderState(request);\n\n  if (typeof href === 'string' && href) {\n    var key = getResourceKey(href);\n\n    if (!resumableState.dnsResources.hasOwnProperty(key)) {\n      resumableState.dnsResources[key] = EXISTS;\n      var headers = renderState.headers;\n      var header;\n\n      if (headers && headers.remainingCapacity > 0 && ( // Compute the header since we might be able to fit it in the max length\n      header = getPrefetchDNSAsHeader(href), // We always consume the header length since once we find one header that doesn't fit\n      // we assume all the rest won't as well. This is to avoid getting into a situation\n      // where we have a very small remaining capacity but no headers will ever fit and we end\n      // up constantly trying to see if the next resource might make it. In the future we can\n      // make this behavior different between render and prerender since in the latter case\n      // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n      // headers.\n      (headers.remainingCapacity -= header.length) >= 2)) {\n        // Store this as resettable in case we are prerendering and postpone in the Shell\n        renderState.resets.dns[key] = EXISTS;\n\n        if (headers.preconnects) {\n          headers.preconnects += ', ';\n        } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n\n\n        headers.preconnects += header;\n      } else {\n        // Encode as element\n        var resource = [];\n        pushLinkImpl(resource, {\n          href: href,\n          rel: 'dns-prefetch'\n        });\n        renderState.preconnects.add(resource);\n      }\n    }\n\n    flushResources(request);\n  }\n}\n\nfunction preconnect(href, crossOrigin) {\n\n  var request = resolveRequest();\n\n  if (!request) {\n    // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n    // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n    // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n    // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n    // fetching) and we don't want to warn in those cases.\n    return;\n  }\n\n  var resumableState = getResumableState(request);\n  var renderState = getRenderState(request);\n\n  if (typeof href === 'string' && href) {\n    var bucket = crossOrigin === 'use-credentials' ? 'credentials' : typeof crossOrigin === 'string' ? 'anonymous' : 'default';\n    var key = getResourceKey(href);\n\n    if (!resumableState.connectResources[bucket].hasOwnProperty(key)) {\n      resumableState.connectResources[bucket][key] = EXISTS;\n      var headers = renderState.headers;\n      var header;\n\n      if (headers && headers.remainingCapacity > 0 && ( // Compute the header since we might be able to fit it in the max length\n      header = getPreconnectAsHeader(href, crossOrigin), // We always consume the header length since once we find one header that doesn't fit\n      // we assume all the rest won't as well. This is to avoid getting into a situation\n      // where we have a very small remaining capacity but no headers will ever fit and we end\n      // up constantly trying to see if the next resource might make it. In the future we can\n      // make this behavior different between render and prerender since in the latter case\n      // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n      // headers.\n      (headers.remainingCapacity -= header.length) >= 2)) {\n        // Store this in resettableState in case we are prerending and postpone in the Shell\n        renderState.resets.connect[bucket][key] = EXISTS;\n\n        if (headers.preconnects) {\n          headers.preconnects += ', ';\n        } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n\n\n        headers.preconnects += header;\n      } else {\n        var resource = [];\n        pushLinkImpl(resource, {\n          rel: 'preconnect',\n          href: href,\n          crossOrigin: crossOrigin\n        });\n        renderState.preconnects.add(resource);\n      }\n    }\n\n    flushResources(request);\n  }\n}\n\nfunction preload(href, as, options) {\n\n  var request = resolveRequest();\n\n  if (!request) {\n    // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n    // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n    // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n    // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n    // fetching) and we don't want to warn in those cases.\n    return;\n  }\n\n  var resumableState = getResumableState(request);\n  var renderState = getRenderState(request);\n\n  if (as && href) {\n    switch (as) {\n      case 'image':\n        {\n          var imageSrcSet, imageSizes, fetchPriority;\n\n          if (options) {\n            imageSrcSet = options.imageSrcSet;\n            imageSizes = options.imageSizes;\n            fetchPriority = options.fetchPriority;\n          }\n\n          var key = getImageResourceKey(href, imageSrcSet, imageSizes);\n\n          if (resumableState.imageResources.hasOwnProperty(key)) {\n            // we can return if we already have this resource\n            return;\n          }\n\n          resumableState.imageResources[key] = PRELOAD_NO_CREDS;\n          var headers = renderState.headers;\n          var header;\n\n          if (headers && headers.remainingCapacity > 0 && fetchPriority === 'high' && ( // Compute the header since we might be able to fit it in the max length\n          header = getPreloadAsHeader(href, as, options), // We always consume the header length since once we find one header that doesn't fit\n          // we assume all the rest won't as well. This is to avoid getting into a situation\n          // where we have a very small remaining capacity but no headers will ever fit and we end\n          // up constantly trying to see if the next resource might make it. In the future we can\n          // make this behavior different between render and prerender since in the latter case\n          // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n          // headers.\n          (headers.remainingCapacity -= header.length) >= 2)) {\n            // If we postpone in the shell we will still emit a preload as a header so we\n            // track this to make sure we don't reset it.\n            renderState.resets.image[key] = PRELOAD_NO_CREDS;\n\n            if (headers.highImagePreloads) {\n              headers.highImagePreloads += ', ';\n            } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n\n\n            headers.highImagePreloads += header;\n          } else {\n            // If we don't have headers to write to we have to encode as elements to flush in the head\n            // When we have imageSrcSet the browser probably cannot load the right version from headers\n            // (this should be verified by testing). For now we assume these need to go in the head\n            // as elements even if headers are available.\n            var resource = [];\n            pushLinkImpl(resource, assign({\n              rel: 'preload',\n              // There is a bug in Safari where imageSrcSet is not respected on preload links\n              // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n              // This harms older browers that do not support imageSrcSet by making their preloads not work\n              // but this population is shrinking fast and is already small so we accept this tradeoff.\n              href: imageSrcSet ? undefined : href,\n              as: as\n            }, options));\n\n            if (fetchPriority === 'high') {\n              renderState.highImagePreloads.add(resource);\n            } else {\n              renderState.bulkPreloads.add(resource); // Stash the resource in case we need to promote it to higher priority\n              // when an img tag is rendered\n\n              renderState.preloads.images.set(key, resource);\n            }\n          }\n\n          break;\n        }\n\n      case 'style':\n        {\n          var _key = getResourceKey(href);\n\n          if (resumableState.styleResources.hasOwnProperty(_key)) {\n            // we can return if we already have this resource\n            return;\n          }\n\n          var _resource2 = [];\n          pushLinkImpl(_resource2, assign({\n            rel: 'preload',\n            href: href,\n            as: as\n          }, options));\n          resumableState.styleResources[_key] = options && (typeof options.crossOrigin === 'string' || typeof options.integrity === 'string') ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;\n          renderState.preloads.stylesheets.set(_key, _resource2);\n          renderState.bulkPreloads.add(_resource2);\n          break;\n        }\n\n      case 'script':\n        {\n          var _key2 = getResourceKey(href);\n\n          if (resumableState.scriptResources.hasOwnProperty(_key2)) {\n            // we can return if we already have this resource\n            return;\n          }\n\n          var _resource3 = [];\n          renderState.preloads.scripts.set(_key2, _resource3);\n          renderState.bulkPreloads.add(_resource3);\n          pushLinkImpl(_resource3, assign({\n            rel: 'preload',\n            href: href,\n            as: as\n          }, options));\n          resumableState.scriptResources[_key2] = options && (typeof options.crossOrigin === 'string' || typeof options.integrity === 'string') ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;\n          break;\n        }\n\n      default:\n        {\n          var _key3 = getResourceKey(href);\n\n          var hasAsType = resumableState.unknownResources.hasOwnProperty(as);\n          var resources;\n\n          if (hasAsType) {\n            resources = resumableState.unknownResources[as];\n\n            if (resources.hasOwnProperty(_key3)) {\n              // we can return if we already have this resource\n              return;\n            }\n          } else {\n            resources = {};\n            resumableState.unknownResources[as] = resources;\n          }\n\n          resources[_key3] = PRELOAD_NO_CREDS;\n          var _headers = renderState.headers;\n\n          var _header;\n\n          if (_headers && _headers.remainingCapacity > 0 && as === 'font' && ( // We compute the header here because we might be able to fit it in the max length\n          _header = getPreloadAsHeader(href, as, options), // We always consume the header length since once we find one header that doesn't fit\n          // we assume all the rest won't as well. This is to avoid getting into a situation\n          // where we have a very small remaining capacity but no headers will ever fit and we end\n          // up constantly trying to see if the next resource might make it. In the future we can\n          // make this behavior different between render and prerender since in the latter case\n          // we are less sensitive to the current requests runtime per and more sensitive to maximizing\n          // headers.\n          (_headers.remainingCapacity -= _header.length) >= 2)) {\n            // If we postpone in the shell we will still emit this preload so we\n            // track it here to prevent it from being reset.\n            renderState.resets.font[_key3] = PRELOAD_NO_CREDS;\n\n            if (_headers.fontPreloads) {\n              _headers.fontPreloads += ', ';\n            } // $FlowFixMe[unsafe-addition]: we assign header during the if condition\n\n\n            _headers.fontPreloads += _header;\n          } else {\n            // We either don't have headers or we are preloading something that does\n            // not warrant elevated priority so we encode as an element.\n            var _resource4 = [];\n\n            var props = assign({\n              rel: 'preload',\n              href: href,\n              as: as\n            }, options);\n\n            pushLinkImpl(_resource4, props);\n\n            switch (as) {\n              case 'font':\n                renderState.fontPreloads.add(_resource4);\n                break;\n              // intentional fall through\n\n              default:\n                renderState.bulkPreloads.add(_resource4);\n            }\n          }\n        }\n    } // If we got this far we created a new resource\n\n\n    flushResources(request);\n  }\n}\n\nfunction preloadModule(href, options) {\n\n  var request = resolveRequest();\n\n  if (!request) {\n    // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n    // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n    // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n    // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n    // fetching) and we don't want to warn in those cases.\n    return;\n  }\n\n  var resumableState = getResumableState(request);\n  var renderState = getRenderState(request);\n\n  if (href) {\n    var key = getResourceKey(href);\n    var as = options && typeof options.as === 'string' ? options.as : 'script';\n    var resource;\n\n    switch (as) {\n      case 'script':\n        {\n          if (resumableState.moduleScriptResources.hasOwnProperty(key)) {\n            // we can return if we already have this resource\n            return;\n          }\n\n          resource = [];\n          resumableState.moduleScriptResources[key] = options && (typeof options.crossOrigin === 'string' || typeof options.integrity === 'string') ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;\n          renderState.preloads.moduleScripts.set(key, resource);\n          break;\n        }\n\n      default:\n        {\n          var hasAsType = resumableState.moduleUnknownResources.hasOwnProperty(as);\n          var resources;\n\n          if (hasAsType) {\n            resources = resumableState.unknownResources[as];\n\n            if (resources.hasOwnProperty(key)) {\n              // we can return if we already have this resource\n              return;\n            }\n          } else {\n            resources = {};\n            resumableState.moduleUnknownResources[as] = resources;\n          }\n\n          resource = [];\n          resources[key] = PRELOAD_NO_CREDS;\n        }\n    }\n\n    pushLinkImpl(resource, assign({\n      rel: 'modulepreload',\n      href: href\n    }, options));\n    renderState.bulkPreloads.add(resource); // If we got this far we created a new resource\n\n    flushResources(request);\n  }\n}\n\nfunction preinitStyle(href, precedence, options) {\n\n  var request = resolveRequest();\n\n  if (!request) {\n    // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n    // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n    // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n    // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n    // fetching) and we don't want to warn in those cases.\n    return;\n  }\n\n  var resumableState = getResumableState(request);\n  var renderState = getRenderState(request);\n\n  if (href) {\n    precedence = precedence || 'default';\n    var key = getResourceKey(href);\n    var styleQueue = renderState.styles.get(precedence);\n    var hasKey = resumableState.styleResources.hasOwnProperty(key);\n    var resourceState = hasKey ? resumableState.styleResources[key] : undefined;\n\n    if (resourceState !== EXISTS) {\n      // We are going to create this resource now so it is marked as Exists\n      resumableState.styleResources[key] = EXISTS; // If this is the first time we've encountered this precedence we need\n      // to create a StyleQueue\n\n      if (!styleQueue) {\n        styleQueue = {\n          precedence: stringToChunk(escapeTextForBrowser(precedence)),\n          rules: [],\n          hrefs: [],\n          sheets: new Map()\n        };\n        renderState.styles.set(precedence, styleQueue);\n      }\n\n      var resource = {\n        state: PENDING$1,\n        props: assign({\n          rel: 'stylesheet',\n          href: href,\n          'data-precedence': precedence\n        }, options)\n      };\n\n      if (resourceState) {\n        // When resourceState is truty it is a Preload state. We cast it for clarity\n        var preloadState = resourceState;\n\n        if (preloadState.length === 2) {\n          adoptPreloadCredentials(resource.props, preloadState);\n        }\n\n        var preloadResource = renderState.preloads.stylesheets.get(key);\n\n        if (preloadResource && preloadResource.length > 0) {\n          // The Preload for this resource was created in this render pass and has not flushed yet so\n          // we need to clear it to avoid it flushing.\n          preloadResource.length = 0;\n        } else {\n          // Either the preload resource from this render already flushed in this render pass\n          // or the preload flushed in a prior pass (prerender). In either case we need to mark\n          // this resource as already having been preloaded.\n          resource.state = PRELOADED;\n        }\n      } // We add the newly created resource to our StyleQueue and if necessary\n      // track the resource with the currently rendering boundary\n\n\n      styleQueue.sheets.set(key, resource); // Notify the request that there are resources to flush even if no work is currently happening\n\n      flushResources(request);\n    }\n  }\n}\n\nfunction preinitScript(src, options) {\n\n  var request = resolveRequest();\n\n  if (!request) {\n    // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n    // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n    // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n    // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n    // fetching) and we don't want to warn in those cases.\n    return;\n  }\n\n  var resumableState = getResumableState(request);\n  var renderState = getRenderState(request);\n\n  if (src) {\n    var key = getResourceKey(src);\n    var hasKey = resumableState.scriptResources.hasOwnProperty(key);\n    var resourceState = hasKey ? resumableState.scriptResources[key] : undefined;\n\n    if (resourceState !== EXISTS) {\n      // We are going to create this resource now so it is marked as Exists\n      resumableState.scriptResources[key] = EXISTS;\n\n      var props = assign({\n        src: src,\n        async: true\n      }, options);\n\n      if (resourceState) {\n        // When resourceState is truty it is a Preload state. We cast it for clarity\n        var preloadState = resourceState;\n\n        if (preloadState.length === 2) {\n          adoptPreloadCredentials(props, preloadState);\n        }\n\n        var preloadResource = renderState.preloads.scripts.get(key);\n\n        if (preloadResource) {\n          // the preload resource exists was created in this render. Now that we have\n          // a script resource which will emit earlier than a preload would if it\n          // hasn't already flushed we prevent it from flushing by zeroing the length\n          preloadResource.length = 0;\n        }\n      }\n\n      var resource = []; // Add to the script flushing queue\n\n      renderState.scripts.add(resource); // encode the tag as Chunks\n\n      pushScriptImpl(resource, props); // Notify the request that there are resources to flush even if no work is currently happening\n\n      flushResources(request);\n    }\n\n    return;\n  }\n}\n\nfunction preinitModuleScript(src, options) {\n\n  var request = resolveRequest();\n\n  if (!request) {\n    // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n    // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n    // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n    // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n    // fetching) and we don't want to warn in those cases.\n    return;\n  }\n\n  var resumableState = getResumableState(request);\n  var renderState = getRenderState(request);\n\n  if (src) {\n    var key = getResourceKey(src);\n    var hasKey = resumableState.moduleScriptResources.hasOwnProperty(key);\n    var resourceState = hasKey ? resumableState.moduleScriptResources[key] : undefined;\n\n    if (resourceState !== EXISTS) {\n      // We are going to create this resource now so it is marked as Exists\n      resumableState.moduleScriptResources[key] = EXISTS;\n\n      var props = assign({\n        src: src,\n        type: 'module',\n        async: true\n      }, options);\n\n      if (resourceState) {\n        // When resourceState is truty it is a Preload state. We cast it for clarity\n        var preloadState = resourceState;\n\n        if (preloadState.length === 2) {\n          adoptPreloadCredentials(props, preloadState);\n        }\n\n        var preloadResource = renderState.preloads.moduleScripts.get(key);\n\n        if (preloadResource) {\n          // the preload resource exists was created in this render. Now that we have\n          // a script resource which will emit earlier than a preload would if it\n          // hasn't already flushed we prevent it from flushing by zeroing the length\n          preloadResource.length = 0;\n        }\n      }\n\n      var resource = []; // Add to the script flushing queue\n\n      renderState.scripts.add(resource); // encode the tag as Chunks\n\n      pushScriptImpl(resource, props); // Notify the request that there are resources to flush even if no work is currently happening\n\n      flushResources(request);\n    }\n\n    return;\n  }\n} // This function is only safe to call at Request start time since it assumes\n// that each module has not already been preloaded. If we find a need to preload\n// scripts at any other point in time we will need to check whether the preload\n// already exists and not assume it\n\n\nfunction preloadBootstrapScriptOrModule(resumableState, renderState, href, props) {\n\n  var key = getResourceKey(href);\n\n  {\n    if (resumableState.scriptResources.hasOwnProperty(key) || resumableState.moduleScriptResources.hasOwnProperty(key)) {\n      // This is coded as a React error because it should be impossible for a userspace preload to preempt this call\n      // If a userspace preload can preempt it then this assumption is broken and we need to reconsider this strategy\n      // rather than instruct the user to not preload their bootstrap scripts themselves\n      error('Internal React Error: React expected bootstrap script or module with src \"%s\" to not have been preloaded already. please file an issue', href);\n    }\n  } // The href used for bootstrap scripts and bootstrap modules should never be\n  // used to preinit the resource. If a script can be preinited then it shouldn't\n  // be a bootstrap script/module and if it is a bootstrap script/module then it\n  // must not be safe to emit early. To avoid possibly allowing for preinits of\n  // bootstrap scripts/modules we occlude these keys.\n\n\n  resumableState.scriptResources[key] = EXISTS;\n  resumableState.moduleScriptResources[key] = EXISTS;\n  var resource = [];\n  pushLinkImpl(resource, props);\n  renderState.bootstrapScripts.add(resource);\n}\n\nfunction internalPreinitScript(resumableState, renderState, src, chunks) {\n  var key = getResourceKey(src);\n\n  if (!resumableState.scriptResources.hasOwnProperty(key)) {\n    var resource = chunks;\n    resumableState.scriptResources[key] = EXISTS;\n    renderState.scripts.add(resource);\n  }\n\n  return;\n}\n\nfunction preloadAsStylePropsFromProps(href, props) {\n  return {\n    rel: 'preload',\n    as: 'style',\n    href: href,\n    crossOrigin: props.crossOrigin,\n    fetchPriority: props.fetchPriority,\n    integrity: props.integrity,\n    media: props.media,\n    hrefLang: props.hrefLang,\n    referrerPolicy: props.referrerPolicy\n  };\n}\n\nfunction stylesheetPropsFromRawProps(rawProps) {\n  return assign({}, rawProps, {\n    'data-precedence': rawProps.precedence,\n    precedence: null\n  });\n}\n\nfunction adoptPreloadCredentials(target, preloadState) {\n  if (target.crossOrigin == null) target.crossOrigin = preloadState[0];\n  if (target.integrity == null) target.integrity = preloadState[1];\n}\n\nfunction getPrefetchDNSAsHeader(href) {\n  var escapedHref = escapeHrefForLinkHeaderURLContext(href);\n  return \"<\" + escapedHref + \">; rel=dns-prefetch\";\n}\n\nfunction getPreconnectAsHeader(href, crossOrigin) {\n  var escapedHref = escapeHrefForLinkHeaderURLContext(href);\n  var value = \"<\" + escapedHref + \">; rel=preconnect\";\n\n  if (typeof crossOrigin === 'string') {\n    var escapedCrossOrigin = escapeStringForLinkHeaderQuotedParamValueContext(crossOrigin, 'crossOrigin');\n    value += \"; crossorigin=\\\"\" + escapedCrossOrigin + \"\\\"\";\n  }\n\n  return value;\n}\n\nfunction getPreloadAsHeader(href, as, params) {\n  var escapedHref = escapeHrefForLinkHeaderURLContext(href);\n  var escapedAs = escapeStringForLinkHeaderQuotedParamValueContext(as, 'as');\n  var value = \"<\" + escapedHref + \">; rel=preload; as=\\\"\" + escapedAs + \"\\\"\";\n\n  for (var paramName in params) {\n    if (hasOwnProperty.call(params, paramName)) {\n      var paramValue = params[paramName];\n\n      if (typeof paramValue === 'string') {\n        value += \"; \" + paramName.toLowerCase() + \"=\\\"\" + escapeStringForLinkHeaderQuotedParamValueContext(paramValue, paramName) + \"\\\"\";\n      }\n    }\n  }\n\n  return value;\n}\n\nfunction getStylesheetPreloadAsHeader(stylesheet) {\n  var props = stylesheet.props;\n  var preloadOptions = {\n    crossOrigin: props.crossOrigin,\n    integrity: props.integrity,\n    nonce: props.nonce,\n    type: props.type,\n    fetchPriority: props.fetchPriority,\n    referrerPolicy: props.referrerPolicy,\n    media: props.media\n  };\n  return getPreloadAsHeader(props.href, 'style', preloadOptions);\n} // This escaping function is only safe to use for href values being written into\n// a \"Link\" header in between `<` and `>` characters. The primary concern with the href is\n// to escape the bounding characters as well as new lines. This is unsafe to use in any other\n// context\n\n\nvar regexForHrefInLinkHeaderURLContext = /[<>\\r\\n]/g;\n\nfunction escapeHrefForLinkHeaderURLContext(hrefInput) {\n  {\n    checkAttributeStringCoercion(hrefInput, 'href');\n  }\n\n  var coercedHref = '' + hrefInput;\n  return coercedHref.replace(regexForHrefInLinkHeaderURLContext, escapeHrefForLinkHeaderURLContextReplacer);\n}\n\nfunction escapeHrefForLinkHeaderURLContextReplacer(match) {\n  switch (match) {\n    case '<':\n      return '%3C';\n\n    case '>':\n      return '%3E';\n\n    case '\\n':\n      return '%0A';\n\n    case '\\r':\n      return '%0D';\n\n    default:\n      {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('escapeLinkHrefForHeaderContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React');\n      }\n  }\n} // This escaping function is only safe to use for quoted param values in an HTTP header.\n// It is unsafe to use for any value not inside quote marks in parater value position.\n\n\nvar regexForLinkHeaderQuotedParamValueContext = /[\"';,\\r\\n]/g;\n\nfunction escapeStringForLinkHeaderQuotedParamValueContext(value, name) {\n  {\n    checkOptionStringCoercion(value, name);\n  }\n\n  var coerced = '' + value;\n  return coerced.replace(regexForLinkHeaderQuotedParamValueContext, escapeStringForLinkHeaderQuotedParamValueContextReplacer);\n}\n\nfunction escapeStringForLinkHeaderQuotedParamValueContextReplacer(match) {\n  switch (match) {\n    case '\"':\n      return '%22';\n\n    case \"'\":\n      return '%27';\n\n    case ';':\n      return '%3B';\n\n    case ',':\n      return '%2C';\n\n    case '\\n':\n      return '%0A';\n\n    case '\\r':\n      return '%0D';\n\n    default:\n      {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('escapeStringForLinkHeaderQuotedParamValueContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React');\n      }\n  }\n}\n\nfunction hoistStyleQueueDependency(styleQueue) {\n  this.styles.add(styleQueue);\n}\n\nfunction hoistStylesheetDependency(stylesheet) {\n  this.stylesheets.add(stylesheet);\n}\n\nfunction hoistHoistables(parentState, childState) {\n  childState.styles.forEach(hoistStyleQueueDependency, parentState);\n  childState.stylesheets.forEach(hoistStylesheetDependency, parentState);\n} // This function is called at various times depending on whether we are rendering\n// or prerendering. In this implementation we only actually emit headers once and\n// subsequent calls are ignored. We track whether the request has a completed shell\n// to determine whether we will follow headers with a flush including stylesheets.\n// In the context of prerrender we don't have a completed shell when the request finishes\n// with a postpone in the shell. In the context of a render we don't have a completed shell\n// if this is called before the shell finishes rendering which usually will happen anytime\n// anything suspends in the shell.\n\nfunction emitEarlyPreloads(renderState, resumableState, shellComplete) {\n  var onHeaders = renderState.onHeaders;\n\n  if (onHeaders) {\n    var headers = renderState.headers;\n\n    if (headers) {\n      // Even if onHeaders throws we don't want to call this again so\n      // we drop the headers state from this point onwards.\n      renderState.headers = null;\n      var linkHeader = headers.preconnects;\n\n      if (headers.fontPreloads) {\n        if (linkHeader) {\n          linkHeader += ', ';\n        }\n\n        linkHeader += headers.fontPreloads;\n      }\n\n      if (headers.highImagePreloads) {\n        if (linkHeader) {\n          linkHeader += ', ';\n        }\n\n        linkHeader += headers.highImagePreloads;\n      }\n\n      if (!shellComplete) {\n        // We use raw iterators because we want to be able to halt iteration\n        // We could refactor renderState to store these dually in arrays to\n        // make this more efficient at the cost of additional memory and\n        // write overhead. However this code only runs once per request so\n        // for now I consider this sufficient.\n        var queueIter = renderState.styles.values();\n\n        outer: for (var queueStep = queueIter.next(); headers.remainingCapacity > 0 && !queueStep.done; queueStep = queueIter.next()) {\n          var sheets = queueStep.value.sheets;\n          var sheetIter = sheets.values();\n\n          for (var sheetStep = sheetIter.next(); headers.remainingCapacity > 0 && !sheetStep.done; sheetStep = sheetIter.next()) {\n            var sheet = sheetStep.value;\n            var props = sheet.props;\n            var key = getResourceKey(props.href);\n            var header = getStylesheetPreloadAsHeader(sheet); // We mutate the capacity b/c we don't want to keep checking if later headers will fit.\n            // This means that a particularly long header might close out the header queue where later\n            // headers could still fit. We could in the future alter the behavior here based on prerender vs render\n            // since during prerender we aren't as concerned with pure runtime performance.\n\n            if ((headers.remainingCapacity -= header.length) >= 2) {\n              renderState.resets.style[key] = PRELOAD_NO_CREDS;\n\n              if (linkHeader) {\n                linkHeader += ', ';\n              }\n\n              linkHeader += header; // We already track that the resource exists in resumableState however\n              // if the resumableState resets because we postponed in the shell\n              // which is what is happening in this branch if we are prerendering\n              // then we will end up resetting the resumableState. When it resets we\n              // want to record the fact that this stylesheet was already preloaded\n\n              renderState.resets.style[key] = typeof props.crossOrigin === 'string' || typeof props.integrity === 'string' ? [props.crossOrigin, props.integrity] : PRELOAD_NO_CREDS;\n            } else {\n              break outer;\n            }\n          }\n        }\n      }\n\n      if (linkHeader) {\n        onHeaders({\n          Link: linkHeader\n        });\n      } else {\n        // We still call this with no headers because a user may be using it as a signal that\n        // it React will not provide any headers\n        onHeaders({});\n      }\n\n      return;\n    }\n  }\n}\nvar NotPendingTransition = NotPending;\n\nvar requestStorage = new async_hooks.AsyncLocalStorage();\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\nvar warnedAboutMissingGetChildContext;\n\n{\n  warnedAboutMissingGetChildContext = {};\n}\n\nvar emptyContextObject = {};\n\n{\n  Object.freeze(emptyContextObject);\n}\n\nfunction getMaskedContext(type, unmaskedContext) {\n  {\n    var contextTypes = type.contextTypes;\n\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    var context = {};\n\n    for (var key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    return context;\n  }\n}\nfunction processChildContext(instance, type, parentContext, childContextTypes) {\n  {\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      {\n        var componentName = getComponentNameFromType(type) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n\n          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n        }\n      }\n\n      return parentContext;\n    }\n\n    var childContext = instance.getChildContext();\n\n    for (var contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        throw new Error((getComponentNameFromType(type) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\");\n      }\n    }\n\n    return assign({}, parentContext, childContext);\n  }\n}\n\nvar rendererSigil;\n\n{\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n} // Used to store the parent path of all context overrides in a shared linked list.\n// Forming a reverse tree.\n// The structure of a context snapshot is an implementation of this file.\n// Currently, it's implemented as tracking the current active node.\n\n\nvar rootContextSnapshot = null; // We assume that this runtime owns the \"current\" field on all ReactContext instances.\n// This global (actually thread local) state represents what state all those \"current\",\n// fields are currently in.\n\nvar currentActiveSnapshot = null;\n\nfunction popNode(prev) {\n  {\n    prev.context._currentValue = prev.parentValue;\n  }\n}\n\nfunction pushNode(next) {\n  {\n    next.context._currentValue = next.value;\n  }\n}\n\nfunction popToNearestCommonAncestor(prev, next) {\n  if (prev === next) ; else {\n    popNode(prev);\n    var parentPrev = prev.parent;\n    var parentNext = next.parent;\n\n    if (parentPrev === null) {\n      if (parentNext !== null) {\n        throw new Error('The stacks must reach the root at the same time. This is a bug in React.');\n      }\n    } else {\n      if (parentNext === null) {\n        throw new Error('The stacks must reach the root at the same time. This is a bug in React.');\n      }\n\n      popToNearestCommonAncestor(parentPrev, parentNext);\n    } // On the way back, we push the new ones that weren't common.\n\n\n    pushNode(next);\n  }\n}\n\nfunction popAllPrevious(prev) {\n  popNode(prev);\n  var parentPrev = prev.parent;\n\n  if (parentPrev !== null) {\n    popAllPrevious(parentPrev);\n  }\n}\n\nfunction pushAllNext(next) {\n  var parentNext = next.parent;\n\n  if (parentNext !== null) {\n    pushAllNext(parentNext);\n  }\n\n  pushNode(next);\n}\n\nfunction popPreviousToCommonLevel(prev, next) {\n  popNode(prev);\n  var parentPrev = prev.parent;\n\n  if (parentPrev === null) {\n    throw new Error('The depth must equal at least at zero before reaching the root. This is a bug in React.');\n  }\n\n  if (parentPrev.depth === next.depth) {\n    // We found the same level. Now we just need to find a shared ancestor.\n    popToNearestCommonAncestor(parentPrev, next);\n  } else {\n    // We must still be deeper.\n    popPreviousToCommonLevel(parentPrev, next);\n  }\n}\n\nfunction popNextToCommonLevel(prev, next) {\n  var parentNext = next.parent;\n\n  if (parentNext === null) {\n    throw new Error('The depth must equal at least at zero before reaching the root. This is a bug in React.');\n  }\n\n  if (prev.depth === parentNext.depth) {\n    // We found the same level. Now we just need to find a shared ancestor.\n    popToNearestCommonAncestor(prev, parentNext);\n  } else {\n    // We must still be deeper.\n    popNextToCommonLevel(prev, parentNext);\n  }\n\n  pushNode(next);\n} // Perform context switching to the new snapshot.\n// To make it cheap to read many contexts, while not suspending, we make the switch eagerly by\n// updating all the context's current values. That way reads, always just read the current value.\n// At the cost of updating contexts even if they're never read by this subtree.\n\n\nfunction switchContext(newSnapshot) {\n  // The basic algorithm we need to do is to pop back any contexts that are no longer on the stack.\n  // We also need to update any new contexts that are now on the stack with the deepest value.\n  // The easiest way to update new contexts is to just reapply them in reverse order from the\n  // perspective of the backpointers. To avoid allocating a lot when switching, we use the stack\n  // for that. Therefore this algorithm is recursive.\n  // 1) First we pop which ever snapshot tree was deepest. Popping old contexts as we go.\n  // 2) Then we find the nearest common ancestor from there. Popping old contexts as we go.\n  // 3) Then we reapply new contexts on the way back up the stack.\n  var prev = currentActiveSnapshot;\n  var next = newSnapshot;\n\n  if (prev !== next) {\n    if (prev === null) {\n      // $FlowFixMe[incompatible-call]: This has to be non-null since it's not equal to prev.\n      pushAllNext(next);\n    } else if (next === null) {\n      popAllPrevious(prev);\n    } else if (prev.depth === next.depth) {\n      popToNearestCommonAncestor(prev, next);\n    } else if (prev.depth > next.depth) {\n      popPreviousToCommonLevel(prev, next);\n    } else {\n      popNextToCommonLevel(prev, next);\n    }\n\n    currentActiveSnapshot = next;\n  }\n}\nfunction pushProvider(context, nextValue) {\n  var prevValue;\n\n  {\n    prevValue = context._currentValue;\n    context._currentValue = nextValue;\n\n    {\n      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer = rendererSigil;\n    }\n  }\n\n  var prevNode = currentActiveSnapshot;\n  var newNode = {\n    parent: prevNode,\n    depth: prevNode === null ? 0 : prevNode.depth + 1,\n    context: context,\n    parentValue: prevValue,\n    value: nextValue\n  };\n  currentActiveSnapshot = newNode;\n  return newNode;\n}\nfunction popProvider(context) {\n  var prevSnapshot = currentActiveSnapshot;\n\n  if (prevSnapshot === null) {\n    throw new Error('Tried to pop a Context at the root of the app. This is a bug in React.');\n  }\n\n  {\n    if (prevSnapshot.context !== context) {\n      error('The parent context is not the expected context. This is probably a bug in React.');\n    }\n  }\n\n  {\n    var value = prevSnapshot.parentValue;\n    prevSnapshot.context._currentValue = value;\n\n    {\n      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer = rendererSigil;\n    }\n  }\n\n  return currentActiveSnapshot = prevSnapshot.parent;\n}\nfunction getActiveContext() {\n  return currentActiveSnapshot;\n}\nfunction readContext$1(context) {\n  var value = context._currentValue ;\n  return value;\n}\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\nfunction get(key) {\n  return key._reactInternals;\n}\nfunction set(key, value) {\n  key._reactInternals = value;\n}\n\nvar didWarnAboutNoopUpdateForComponent = {};\nvar didWarnAboutDeprecatedWillMount = {};\nvar didWarnAboutUninitializedState;\nvar didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nvar didWarnAboutLegacyLifecyclesAndDerivedState;\nvar didWarnAboutUndefinedDerivedState;\nvar didWarnAboutDirectlyAssigningPropsToState;\nvar didWarnAboutContextTypeAndContextTypes;\nvar didWarnAboutInvalidateContextType;\nvar didWarnOnInvalidCallback;\n\n{\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n  didWarnOnInvalidCallback = new Set();\n}\n\nfunction warnOnInvalidCallback(callback) {\n  {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var key = String(callback);\n\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n\n      error('Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n    }\n  }\n}\n\nfunction warnOnUndefinedDerivedState(type, partialState) {\n  {\n    if (partialState === undefined) {\n      var componentName = getComponentNameFromType(type) || 'Component';\n\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n\n        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n      }\n    }\n  }\n}\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && getComponentNameFromType(_constructor) || 'ReactClass';\n    var warningKey = componentName + '.' + callerName;\n\n    if (didWarnAboutNoopUpdateForComponent[warningKey]) {\n      return;\n    }\n\n    error('Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op.\\n\\nPlease check the code for the %s component.', callerName, componentName);\n\n    didWarnAboutNoopUpdateForComponent[warningKey] = true;\n  }\n}\n\nvar classComponentUpdater = {\n  isMounted: function (inst) {\n    return false;\n  },\n  // $FlowFixMe[missing-local-annot]\n  enqueueSetState: function (inst, payload, callback) {\n    var internals = get(inst);\n\n    if (internals.queue === null) {\n      warnNoop(inst, 'setState');\n    } else {\n      internals.queue.push(payload);\n\n      {\n        if (callback !== undefined && callback !== null) {\n          warnOnInvalidCallback(callback);\n        }\n      }\n    }\n  },\n  enqueueReplaceState: function (inst, payload, callback) {\n    var internals = get(inst);\n    internals.replace = true;\n    internals.queue = [payload];\n\n    {\n      if (callback !== undefined && callback !== null) {\n        warnOnInvalidCallback(callback);\n      }\n    }\n  },\n  // $FlowFixMe[missing-local-annot]\n  enqueueForceUpdate: function (inst, callback) {\n    var internals = get(inst);\n\n    if (internals.queue === null) {\n      warnNoop(inst, 'forceUpdate');\n    } else {\n      {\n        if (callback !== undefined && callback !== null) {\n          warnOnInvalidCallback(callback);\n        }\n      }\n    }\n  }\n};\n\nfunction applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {\n  var partialState = getDerivedStateFromProps(nextProps, prevState);\n\n  {\n    warnOnUndefinedDerivedState(ctor, partialState);\n  } // Merge the partial state and the previous state.\n\n\n  var newState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n  return newState;\n}\n\nfunction constructClassInstance(ctor, props, maskedLegacyContext) {\n  var context = emptyContextObject;\n  var contextType = ctor.contextType;\n\n  {\n    if ('contextType' in ctor) {\n      var isValid = // Allow null for conditional declaration\n      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE;\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n        var addendum = '';\n\n        if (contextType === undefined) {\n          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_CONSUMER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n        }\n\n        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext$1(contextType);\n  } else {\n    context = maskedLegacyContext;\n  }\n\n  var instance = new ctor(props, context);\n\n  {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && (instance.state === null || instance.state === undefined)) {\n      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n\n        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n      }\n    } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n\n    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n      var foundWillMountName = null;\n      var foundWillReceivePropsName = null;\n      var foundWillUpdateName = null;\n\n      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n\n      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n\n      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n\n      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n        var _componentName = getComponentNameFromType(ctor) || 'Component';\n\n        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n\n          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n        }\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction checkClassInstance(instance, ctor, newProps) {\n  {\n    var name = getComponentNameFromType(ctor) || 'Component';\n    var renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        error('No `render` method found on the %s ' + 'instance: did you accidentally return an object from the constructor?', name);\n      } else {\n        error('No `render` method found on the %s ' + 'instance: you may have forgotten to define `render`.', name);\n      }\n    }\n\n    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n    }\n\n    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n    }\n\n    if (instance.propTypes) {\n      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n    }\n\n    if (instance.contextType) {\n      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n    }\n\n    {\n      if (instance.contextTypes) {\n        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n      }\n\n      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n\n        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n    }\n\n    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\n    }\n\n    if (typeof instance.componentDidUnmount === 'function') {\n      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n    }\n\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n    }\n\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n    }\n\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n    }\n\n    var hasMutatedProps = instance.props !== newProps;\n\n    if (instance.props !== undefined && hasMutatedProps) {\n      error('When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name);\n    }\n\n    if (instance.defaultProps) {\n      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n\n      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n    }\n\n    var state = instance.state;\n\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      error('%s.state: must be set to an object or null', name);\n    }\n\n    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n    }\n  }\n}\n\nfunction callComponentWillMount(type, instance) {\n  var oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    {\n      if (instance.componentWillMount.__suppressDeprecationWarning !== true) {\n        var componentName = getComponentNameFromType(type) || 'Unknown';\n\n        if (!didWarnAboutDeprecatedWillMount[componentName]) {\n          warn( // keep this warning in sync with ReactStrictModeWarning.js\n          'componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code from componentWillMount to componentDidMount (preferred in most cases) ' + 'or the constructor.\\n' + '\\nPlease update the following components: %s', componentName);\n\n          didWarnAboutDeprecatedWillMount[componentName] = true;\n        }\n      }\n    }\n\n    instance.componentWillMount();\n  }\n\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    {\n      error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentNameFromType(type) || 'Component');\n    }\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {\n  if (internalInstance.queue !== null && internalInstance.queue.length > 0) {\n    var oldQueue = internalInstance.queue;\n    var oldReplace = internalInstance.replace;\n    internalInstance.queue = null;\n    internalInstance.replace = false;\n\n    if (oldReplace && oldQueue.length === 1) {\n      inst.state = oldQueue[0];\n    } else {\n      var nextState = oldReplace ? oldQueue[0] : inst.state;\n      var dontMutate = true;\n\n      for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {\n        var partial = oldQueue[i];\n        var partialState = typeof partial === 'function' ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;\n\n        if (partialState != null) {\n          if (dontMutate) {\n            dontMutate = false;\n            nextState = assign({}, nextState, partialState);\n          } else {\n            assign(nextState, partialState);\n          }\n        }\n      }\n\n      inst.state = nextState;\n    }\n  } else {\n    internalInstance.queue = null;\n  }\n} // Invokes the mount life-cycles on a previously never rendered instance.\n\n\nfunction mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {\n  {\n    checkClassInstance(instance, ctor, newProps);\n  }\n\n  var initialState = instance.state !== undefined ? instance.state : null;\n  instance.updater = classComponentUpdater;\n  instance.props = newProps;\n  instance.state = initialState; // We don't bother initializing the refs object on the server, since we're not going to resolve them anyway.\n  // The internal instance will be used to manage updates that happen during this mount.\n\n  var internalInstance = {\n    queue: [],\n    replace: false\n  };\n  set(instance, internalInstance);\n  var contextType = ctor.contextType;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext$1(contextType);\n  } else {\n    instance.context = maskedLegacyContext;\n  }\n\n  {\n    if (instance.state === newProps) {\n      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n\n        error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n      }\n    }\n  }\n\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);\n  } // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\n  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n    callComponentWillMount(ctor, instance); // If we had additional state updates during this life-cycle, let's\n    // process them now.\n\n    processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);\n  }\n}\n\n// Ids are base 32 strings whose binary representation corresponds to the\n// position of a node in a tree.\n// Every time the tree forks into multiple children, we add additional bits to\n// the left of the sequence that represent the position of the child within the\n// current level of children.\n//\n//      00101       00010001011010101\n//      ╰─┬─╯       ╰───────┬───────╯\n//   Fork 5 of 20       Parent id\n//\n// The leading 0s are important. In the above example, you only need 3 bits to\n// represent slot 5. However, you need 5 bits to represent all the forks at\n// the current level, so we must account for the empty bits at the end.\n//\n// For this same reason, slots are 1-indexed instead of 0-indexed. Otherwise,\n// the zeroth id at a level would be indistinguishable from its parent.\n//\n// If a node has only one child, and does not materialize an id (i.e. does not\n// contain a useId hook), then we don't need to allocate any space in the\n// sequence. It's treated as a transparent indirection. For example, these two\n// trees produce the same ids:\n//\n// <>                          <>\n//   <Indirection>               <A />\n//     <A />                     <B />\n//   </Indirection>            </>\n//   <B />\n// </>\n//\n// However, we cannot skip any node that materializes an id. Otherwise, a parent\n// id that does not fork would be indistinguishable from its child id. For\n// example, this tree does not fork, but the parent and child must have\n// different ids.\n//\n// <Parent>\n//   <Child />\n// </Parent>\n//\n// To handle this scenario, every time we materialize an id, we allocate a\n// new level with a single slot. You can think of this as a fork with only one\n// prong, or an array of children with length 1.\n//\n// It's possible for the size of the sequence to exceed 32 bits, the max\n// size for bitwise operations. When this happens, we make more room by\n// converting the right part of the id to a string and storing it in an overflow\n// variable. We use a base 32 string representation, because 32 is the largest\n// power of 2 that is supported by toString(). We want the base to be large so\n// that the resulting ids are compact, and we want the base to be a power of 2\n// because every log2(base) bits corresponds to a single character, i.e. every\n// log2(32) = 5 bits. That means we can lop bits off the end 5 at a time without\n// affecting the final result.\nvar emptyTreeContext = {\n  id: 1,\n  overflow: ''\n};\nfunction getTreeId(context) {\n  var overflow = context.overflow;\n  var idWithLeadingBit = context.id;\n  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n  return id.toString(32) + overflow;\n}\nfunction pushTreeContext(baseContext, totalChildren, index) {\n  var baseIdWithLeadingBit = baseContext.id;\n  var baseOverflow = baseContext.overflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n  // of the id; we use it to account for leading 0s.\n\n  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n  var slot = index + 1;\n  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n  // consideration the leading 1 we use to mark the end of the sequence.\n\n  if (length > 30) {\n    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n    // This branch assumes the length of the base id is greater than 5; it won't\n    // work for smaller ids, because you need 5 bits per character.\n    //\n    // We encode the id in multiple steps: first the base id, then the\n    // remaining digits.\n    //\n    // Each 5 bit sequence corresponds to a single base 32 character. So for\n    // example, if the current id is 23 bits long, we can convert 20 of those\n    // bits into a string of 4 characters, with 3 bits left over.\n    //\n    // First calculate how many bits in the base id represent a complete\n    // sequence of characters.\n    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n\n    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n\n    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n\n    var restOfBaseId = baseId >> numberOfOverflowBits;\n    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n    // we made more room, this time it won't overflow.\n\n    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n    var restOfNewBits = slot << restOfBaseLength;\n    var id = restOfNewBits | restOfBaseId;\n    var overflow = newOverflow + baseOverflow;\n    return {\n      id: 1 << restOfLength | id,\n      overflow: overflow\n    };\n  } else {\n    // Normal path\n    var newBits = slot << baseLength;\n\n    var _id = newBits | baseId;\n\n    var _overflow = baseOverflow;\n    return {\n      id: 1 << length | _id,\n      overflow: _overflow\n    };\n  }\n}\n\nfunction getBitLength(number) {\n  return 32 - clz32(number);\n}\n\nfunction getLeadingBit(id) {\n  return 1 << getBitLength(id) - 1;\n} // TODO: Math.clz32 is supported in Node 12+. Maybe we can drop the fallback.\n\n\nvar clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\nvar log = Math.log;\nvar LN2 = Math.LN2;\n\nfunction clz32Fallback(x) {\n  var asUint = x >>> 0;\n\n  if (asUint === 0) {\n    return 32;\n  }\n\n  return 31 - (log(asUint) / LN2 | 0) | 0;\n}\n\n// Corresponds to ReactFiberWakeable and ReactFlightWakeable modules. Generally,\n// changes to one module should be reflected in the others.\n// TODO: Rename this module and the corresponding Fiber one to \"Thenable\"\n// instead of \"Wakeable\". Or some other more appropriate name.\n// An error that is thrown (e.g. by `use`) to trigger Suspense. If we\n// detect this is caught by userspace, we'll log a warning in development.\nvar SuspenseException = new Error(\"Suspense Exception: This is not a real error! It's an implementation \" + 'detail of `use` to interrupt the current render. You must either ' + 'rethrow it immediately, or move the `use` call outside of the ' + '`try/catch` block. Capturing without rethrowing will lead to ' + 'unexpected behavior.\\n\\n' + 'To handle async errors, wrap your component in an error boundary, or ' + \"call the promise's `.catch` method and pass the result to `use`\");\nfunction createThenableState() {\n  // The ThenableState is created the first time a component suspends. If it\n  // suspends again, we'll reuse the same state.\n  return [];\n}\n\nfunction noop$2() {}\n\nfunction trackUsedThenable(thenableState, thenable, index) {\n  var previous = thenableState[index];\n\n  if (previous === undefined) {\n    thenableState.push(thenable);\n  } else {\n    if (previous !== thenable) {\n      // Reuse the previous thenable, and drop the new one. We can assume\n      // they represent the same value, because components are idempotent.\n      // Avoid an unhandled rejection errors for the Promises that we'll\n      // intentionally ignore.\n      thenable.then(noop$2, noop$2);\n      thenable = previous;\n    }\n  } // We use an expando to track the status and result of a thenable so that we\n  // can synchronously unwrap the value. Think of this as an extension of the\n  // Promise API, or a custom interface that is a superset of Thenable.\n  //\n  // If the thenable doesn't have a status, set it to \"pending\" and attach\n  // a listener that will update its status and result when it resolves.\n\n\n  switch (thenable.status) {\n    case 'fulfilled':\n      {\n        var fulfilledValue = thenable.value;\n        return fulfilledValue;\n      }\n\n    case 'rejected':\n      {\n        var rejectedError = thenable.reason;\n        throw rejectedError;\n      }\n\n    default:\n      {\n        if (typeof thenable.status === 'string') ; else {\n          var pendingThenable = thenable;\n          pendingThenable.status = 'pending';\n          pendingThenable.then(function (fulfilledValue) {\n            if (thenable.status === 'pending') {\n              var fulfilledThenable = thenable;\n              fulfilledThenable.status = 'fulfilled';\n              fulfilledThenable.value = fulfilledValue;\n            }\n          }, function (error) {\n            if (thenable.status === 'pending') {\n              var rejectedThenable = thenable;\n              rejectedThenable.status = 'rejected';\n              rejectedThenable.reason = error;\n            }\n          }); // Check one more time in case the thenable resolved synchronously\n\n          switch (thenable.status) {\n            case 'fulfilled':\n              {\n                var fulfilledThenable = thenable;\n                return fulfilledThenable.value;\n              }\n\n            case 'rejected':\n              {\n                var rejectedThenable = thenable;\n                throw rejectedThenable.reason;\n              }\n          }\n        } // Suspend.\n        //\n        // Throwing here is an implementation detail that allows us to unwind the\n        // call stack. But we shouldn't allow it to leak into userspace. Throw an\n        // opaque placeholder value instead of the actual thenable. If it doesn't\n        // get captured by the work loop, log a warning, because that means\n        // something in userspace must have caught it.\n\n\n        suspendedThenable = thenable;\n        throw SuspenseException;\n      }\n  }\n} // This is used to track the actual thenable that suspended so it can be\n// passed to the rest of the Suspense implementation — which, for historical\n// reasons, expects to receive a thenable.\n\nvar suspendedThenable = null;\nfunction getSuspendedThenable() {\n  // This is called right after `use` suspends by throwing an exception. `use`\n  // throws an opaque value instead of the thenable itself so that it can't be\n  // caught in userspace. Then the work loop accesses the actual thenable using\n  // this function.\n  if (suspendedThenable === null) {\n    throw new Error('Expected a suspended thenable. This is a bug in React. Please file ' + 'an issue.');\n  }\n\n  var thenable = suspendedThenable;\n  suspendedThenable = null;\n  return thenable;\n}\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = // $FlowFixMe[method-unbinding]\ntypeof Object.is === 'function' ? Object.is : is;\n\nvar currentlyRenderingComponent = null;\nvar currentlyRenderingTask = null;\nvar currentlyRenderingRequest = null;\nvar currentlyRenderingKeyPath = null;\nvar firstWorkInProgressHook = null;\nvar workInProgressHook = null; // Whether the work-in-progress hook is a re-rendered hook\n\nvar isReRender = false; // Whether an update was scheduled during the currently executing render pass.\n\nvar didScheduleRenderPhaseUpdate = false; // Counts the number of useId hooks in this component\n\nvar localIdCounter = 0; // Chunks that should be pushed to the stream once the component\n// finishes rendering.\n// Counts the number of useFormState calls in this component\n\nvar formStateCounter = 0; // The index of the useFormState hook that matches the one passed in at the\n// root during an MPA navigation, if any.\n\nvar formStateMatchingIndex = -1; // Counts the number of use(thenable) calls in this component\n\nvar thenableIndexCounter = 0;\nvar thenableState = null; // Lazily created map of render-phase updates\n\nvar renderPhaseUpdates = null; // Counter to prevent infinite loops.\n\nvar numberOfReRenders = 0;\nvar RE_RENDER_LIMIT = 25;\nvar isInHookUserCodeInDev = false; // In DEV, this is the name of the currently executing primitive hook\n\nvar currentHookNameInDev;\n\nfunction resolveCurrentlyRenderingComponent() {\n  if (currentlyRenderingComponent === null) {\n    throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n  }\n\n  {\n    if (isInHookUserCodeInDev) {\n      error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n    }\n  }\n\n  return currentlyRenderingComponent;\n}\n\nfunction areHookInputsEqual(nextDeps, prevDeps) {\n  if (prevDeps === null) {\n    {\n      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n    }\n\n    return false;\n  }\n\n  {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + nextDeps.join(', ') + \"]\", \"[\" + prevDeps.join(', ') + \"]\");\n    }\n  } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    if (objectIs(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction createHook() {\n  if (numberOfReRenders > 0) {\n    throw new Error('Rendered more hooks than during the previous render');\n  }\n\n  return {\n    memoizedState: null,\n    queue: null,\n    next: null\n  };\n}\n\nfunction createWorkInProgressHook() {\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    if (firstWorkInProgressHook === null) {\n      isReRender = false;\n      firstWorkInProgressHook = workInProgressHook = createHook();\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      isReRender = true;\n      workInProgressHook = firstWorkInProgressHook;\n    }\n  } else {\n    if (workInProgressHook.next === null) {\n      isReRender = false; // Append to the end of the list\n\n      workInProgressHook = workInProgressHook.next = createHook();\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      isReRender = true;\n      workInProgressHook = workInProgressHook.next;\n    }\n  }\n\n  return workInProgressHook;\n}\n\nfunction prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState) {\n  currentlyRenderingComponent = componentIdentity;\n  currentlyRenderingTask = task;\n  currentlyRenderingRequest = request;\n  currentlyRenderingKeyPath = keyPath;\n\n  {\n    isInHookUserCodeInDev = false;\n  } // The following should have already been reset\n  // didScheduleRenderPhaseUpdate = false;\n  // firstWorkInProgressHook = null;\n  // numberOfReRenders = 0;\n  // renderPhaseUpdates = null;\n  // workInProgressHook = null;\n\n\n  localIdCounter = 0;\n  formStateCounter = 0;\n  formStateMatchingIndex = -1;\n  thenableIndexCounter = 0;\n  thenableState = prevThenableState;\n}\nfunction finishHooks(Component, props, children, refOrContext) {\n  // This must be called after every function component to prevent hooks from\n  // being used in classes.\n  while (didScheduleRenderPhaseUpdate) {\n    // Updates were scheduled during the render phase. They are stored in\n    // the `renderPhaseUpdates` map. Call the component again, reusing the\n    // work-in-progress hooks and applying the additional updates on top. Keep\n    // restarting until no more updates are scheduled.\n    didScheduleRenderPhaseUpdate = false;\n    localIdCounter = 0;\n    formStateCounter = 0;\n    formStateMatchingIndex = -1;\n    thenableIndexCounter = 0;\n    numberOfReRenders += 1; // Start over from the beginning of the list\n\n    workInProgressHook = null;\n    children = Component(props, refOrContext);\n  }\n\n  resetHooksState();\n  return children;\n}\nfunction getThenableStateAfterSuspending() {\n  var state = thenableState;\n  thenableState = null;\n  return state;\n}\nfunction checkDidRenderIdHook() {\n  // This should be called immediately after every finishHooks call.\n  // Conceptually, it's part of the return value of finishHooks; it's only a\n  // separate function to avoid using an array tuple.\n  var didRenderIdHook = localIdCounter !== 0;\n  return didRenderIdHook;\n}\nfunction getFormStateCount() {\n  // This should be called immediately after every finishHooks call.\n  // Conceptually, it's part of the return value of finishHooks; it's only a\n  // separate function to avoid using an array tuple.\n  return formStateCounter;\n}\nfunction getFormStateMatchingIndex() {\n  // This should be called immediately after every finishHooks call.\n  // Conceptually, it's part of the return value of finishHooks; it's only a\n  // separate function to avoid using an array tuple.\n  return formStateMatchingIndex;\n} // Reset the internal hooks state if an error occurs while rendering a component\n\nfunction resetHooksState() {\n  {\n    isInHookUserCodeInDev = false;\n  }\n\n  currentlyRenderingComponent = null;\n  currentlyRenderingTask = null;\n  currentlyRenderingRequest = null;\n  currentlyRenderingKeyPath = null;\n  didScheduleRenderPhaseUpdate = false;\n  firstWorkInProgressHook = null;\n  numberOfReRenders = 0;\n  renderPhaseUpdates = null;\n  workInProgressHook = null;\n}\n\nfunction readContext(context) {\n  {\n    if (isInHookUserCodeInDev) {\n      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n    }\n  }\n\n  return readContext$1(context);\n}\n\nfunction useContext(context) {\n  {\n    currentHookNameInDev = 'useContext';\n  }\n\n  resolveCurrentlyRenderingComponent();\n  return readContext$1(context);\n}\n\nfunction basicStateReducer(state, action) {\n  // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction useState(initialState) {\n  {\n    currentHookNameInDev = 'useState';\n  }\n\n  return useReducer(basicStateReducer, // useReducer has a special case to support lazy useState initializers\n  initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  {\n    if (reducer !== basicStateReducer) {\n      currentHookNameInDev = 'useReducer';\n    }\n  }\n\n  currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n  workInProgressHook = createWorkInProgressHook();\n\n  if (isReRender) {\n    // This is a re-render. Apply the new render phase updates to the previous\n    // current hook.\n    var queue = workInProgressHook.queue;\n    var dispatch = queue.dispatch;\n\n    if (renderPhaseUpdates !== null) {\n      // Render phase updates are stored in a map of queue -> linked list\n      var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n\n      if (firstRenderPhaseUpdate !== undefined) {\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        renderPhaseUpdates.delete(queue); // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n        var newState = workInProgressHook.memoizedState;\n        var update = firstRenderPhaseUpdate;\n\n        do {\n          // Process this render phase update. We don't have to check the\n          // priority because it will always be the same as the current\n          // render's.\n          var action = update.action;\n\n          {\n            isInHookUserCodeInDev = true;\n          }\n\n          newState = reducer(newState, action);\n\n          {\n            isInHookUserCodeInDev = false;\n          } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n          update = update.next;\n        } while (update !== null); // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n        workInProgressHook.memoizedState = newState;\n        return [newState, dispatch];\n      }\n    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n    return [workInProgressHook.memoizedState, dispatch];\n  } else {\n    {\n      isInHookUserCodeInDev = true;\n    }\n\n    var initialState;\n\n    if (reducer === basicStateReducer) {\n      // Special case for `useState`.\n      initialState = typeof initialArg === 'function' ? initialArg() : initialArg;\n    } else {\n      initialState = init !== undefined ? init(initialArg) : initialArg;\n    }\n\n    {\n      isInHookUserCodeInDev = false;\n    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n    workInProgressHook.memoizedState = initialState; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n    var _queue = workInProgressHook.queue = {\n      last: null,\n      dispatch: null\n    };\n\n    var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue); // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n    return [workInProgressHook.memoizedState, _dispatch];\n  }\n}\n\nfunction useMemo(nextCreate, deps) {\n  currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n  workInProgressHook = createWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n\n  if (workInProgressHook !== null) {\n    var prevState = workInProgressHook.memoizedState;\n\n    if (prevState !== null) {\n      if (nextDeps !== null) {\n        var prevDeps = prevState[1];\n\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\n          return prevState[0];\n        }\n      }\n    }\n  }\n\n  {\n    isInHookUserCodeInDev = true;\n  }\n\n  var nextValue = nextCreate();\n\n  {\n    isInHookUserCodeInDev = false;\n  } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n  workInProgressHook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction useRef(initialValue) {\n  currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n  workInProgressHook = createWorkInProgressHook();\n  var previousRef = workInProgressHook.memoizedState;\n\n  if (previousRef === null) {\n    var ref = {\n      current: initialValue\n    };\n\n    {\n      Object.seal(ref);\n    } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n\n    workInProgressHook.memoizedState = ref;\n    return ref;\n  } else {\n    return previousRef;\n  }\n}\n\nfunction dispatchAction(componentIdentity, queue, action) {\n  if (numberOfReRenders >= RE_RENDER_LIMIT) {\n    throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\n  }\n\n  if (componentIdentity === currentlyRenderingComponent) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdate = true;\n    var update = {\n      action: action,\n      next: null\n    };\n\n    if (renderPhaseUpdates === null) {\n      renderPhaseUpdates = new Map();\n    }\n\n    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n\n    if (firstRenderPhaseUpdate === undefined) {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      renderPhaseUpdates.set(queue, update);\n    } else {\n      // Append the update to the end of the list.\n      var lastRenderPhaseUpdate = firstRenderPhaseUpdate;\n\n      while (lastRenderPhaseUpdate.next !== null) {\n        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n      }\n\n      lastRenderPhaseUpdate.next = update;\n    }\n  }\n}\n\nfunction useCallback(callback, deps) {\n  return useMemo(function () {\n    return callback;\n  }, deps);\n}\n\nfunction useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  if (getServerSnapshot === undefined) {\n    throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');\n  }\n\n  return getServerSnapshot();\n}\n\nfunction useDeferredValue(value, initialValue) {\n  resolveCurrentlyRenderingComponent();\n\n  {\n    return value;\n  }\n}\n\nfunction unsupportedStartTransition() {\n  throw new Error('startTransition cannot be called during server rendering.');\n}\n\nfunction useTransition() {\n  resolveCurrentlyRenderingComponent();\n  return [false, unsupportedStartTransition];\n}\n\nfunction useHostTransitionStatus() {\n  resolveCurrentlyRenderingComponent();\n  return NotPendingTransition;\n}\n\nfunction unsupportedSetOptimisticState() {\n  throw new Error('Cannot update optimistic state while rendering.');\n}\n\nfunction useOptimistic(passthrough, reducer) {\n  resolveCurrentlyRenderingComponent();\n  return [passthrough, unsupportedSetOptimisticState];\n}\n\nfunction createPostbackFormStateKey(permalink, componentKeyPath, hookIndex) {\n  if (permalink !== undefined) {\n    // Don't bother to hash a permalink-based key since it's already short.\n    return 'p' + permalink;\n  } else {\n    // Append a node to the key path that represents the form state hook.\n    var keyPath = [componentKeyPath, null, hookIndex]; // Key paths are hashed to reduce the size. It does not need to be secure,\n    // and it's more important that it's fast than that it's completely\n    // collision-free.\n\n    var keyPathHash = createFastHash(JSON.stringify(keyPath));\n    return 'k' + keyPathHash;\n  }\n}\n\nfunction useFormState(action, initialState, permalink) {\n  resolveCurrentlyRenderingComponent(); // Count the number of useFormState hooks per component. We also use this to\n  // track the position of this useFormState hook relative to the other ones in\n  // this component, so we can generate a unique key for each one.\n\n  var formStateHookIndex = formStateCounter++;\n  var request = currentlyRenderingRequest; // $FlowIgnore[prop-missing]\n\n  var formAction = action.$$FORM_ACTION;\n\n  if (typeof formAction === 'function') {\n    // This is a server action. These have additional features to enable\n    // MPA-style form submissions with progressive enhancement.\n    // TODO: If the same permalink is passed to multiple useFormStates, and\n    // they all have the same action signature, Fizz will pass the postback\n    // state to all of them. We should probably only pass it to the first one,\n    // and/or warn.\n    // The key is lazily generated and deduped so the that the keypath doesn't\n    // get JSON.stringify-ed unnecessarily, and at most once.\n    var nextPostbackStateKey = null; // Determine the current form state. If we received state during an MPA form\n    // submission, then we will reuse that, if the action identity matches.\n    // Otherwise we'll use the initial state argument. We will emit a comment\n    // marker into the stream that indicates whether the state was reused.\n\n    var state = initialState;\n    var componentKeyPath = currentlyRenderingKeyPath;\n    var postbackFormState = getFormState(request); // $FlowIgnore[prop-missing]\n\n    var isSignatureEqual = action.$$IS_SIGNATURE_EQUAL;\n\n    if (postbackFormState !== null && typeof isSignatureEqual === 'function') {\n      var postbackKey = postbackFormState[1];\n      var postbackReferenceId = postbackFormState[2];\n      var postbackBoundArity = postbackFormState[3];\n\n      if (isSignatureEqual.call(action, postbackReferenceId, postbackBoundArity)) {\n        nextPostbackStateKey = createPostbackFormStateKey(permalink, componentKeyPath, formStateHookIndex);\n\n        if (postbackKey === nextPostbackStateKey) {\n          // This was a match\n          formStateMatchingIndex = formStateHookIndex; // Reuse the state that was submitted by the form.\n\n          state = postbackFormState[0];\n        }\n      }\n    } // Bind the state to the first argument of the action.\n\n\n    var boundAction = action.bind(null, state); // Wrap the action so the return value is void.\n\n    var dispatch = function (payload) {\n      boundAction(payload);\n    }; // $FlowIgnore[prop-missing]\n\n\n    if (typeof boundAction.$$FORM_ACTION === 'function') {\n      // $FlowIgnore[prop-missing]\n      dispatch.$$FORM_ACTION = function (prefix) {\n        var metadata = boundAction.$$FORM_ACTION(prefix); // Override the action URL\n\n        if (permalink !== undefined) {\n          {\n            checkAttributeStringCoercion(permalink, 'target');\n          }\n\n          permalink += '';\n          metadata.action = permalink;\n        }\n\n        var formData = metadata.data;\n\n        if (formData) {\n          if (nextPostbackStateKey === null) {\n            nextPostbackStateKey = createPostbackFormStateKey(permalink, componentKeyPath, formStateHookIndex);\n          }\n\n          formData.append('$ACTION_KEY', nextPostbackStateKey);\n        }\n\n        return metadata;\n      };\n    }\n\n    return [state, dispatch];\n  } else {\n    // This is not a server action, so the implementation is much simpler.\n    // Bind the state to the first argument of the action.\n    var _boundAction = action.bind(null, initialState); // Wrap the action so the return value is void.\n\n\n    var _dispatch2 = function (payload) {\n      _boundAction(payload);\n    };\n\n    return [initialState, _dispatch2];\n  }\n}\n\nfunction useId() {\n  var task = currentlyRenderingTask;\n  var treeId = getTreeId(task.treeContext);\n  var resumableState = currentResumableState;\n\n  if (resumableState === null) {\n    throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component.');\n  }\n\n  var localId = localIdCounter++;\n  return makeId(resumableState, treeId, localId);\n}\n\nfunction use(usable) {\n  if (usable !== null && typeof usable === 'object') {\n    // $FlowFixMe[method-unbinding]\n    if (typeof usable.then === 'function') {\n      // This is a thenable.\n      var thenable = usable;\n      return unwrapThenable(thenable);\n    } else if (usable.$$typeof === REACT_CONTEXT_TYPE) {\n      var context = usable;\n      return readContext(context);\n    }\n  } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n  throw new Error('An unsupported type was passed to use(): ' + String(usable));\n}\n\nfunction unwrapThenable(thenable) {\n  var index = thenableIndexCounter;\n  thenableIndexCounter += 1;\n\n  if (thenableState === null) {\n    thenableState = createThenableState();\n  }\n\n  return trackUsedThenable(thenableState, thenable, index);\n}\n\nfunction unsupportedRefresh() {\n  throw new Error('Cache cannot be refreshed during server rendering.');\n}\n\nfunction useCacheRefresh() {\n  return unsupportedRefresh;\n}\n\nfunction noop$1() {}\n\nvar HooksDispatcher = {\n  readContext: readContext,\n  use: use,\n  useContext: useContext,\n  useMemo: useMemo,\n  useReducer: useReducer,\n  useRef: useRef,\n  useState: useState,\n  useInsertionEffect: noop$1,\n  useLayoutEffect: noop$1,\n  useCallback: useCallback,\n  // useImperativeHandle is not run in the server environment\n  useImperativeHandle: noop$1,\n  // Effects are not run in the server environment.\n  useEffect: noop$1,\n  // Debugging effect\n  useDebugValue: noop$1,\n  useDeferredValue: useDeferredValue,\n  useTransition: useTransition,\n  useId: useId,\n  // Subscriptions are not setup in a server environment.\n  useSyncExternalStore: useSyncExternalStore\n};\n\n{\n  HooksDispatcher.useCacheRefresh = useCacheRefresh;\n}\n\n{\n  HooksDispatcher.useHostTransitionStatus = useHostTransitionStatus;\n}\n\n{\n  HooksDispatcher.useOptimistic = useOptimistic;\n  HooksDispatcher.useFormState = useFormState;\n}\n\nvar currentResumableState = null;\nfunction setCurrentResumableState(resumableState) {\n  currentResumableState = resumableState;\n}\n\nfunction getCacheSignal() {\n  throw new Error('Not implemented.');\n}\n\nfunction getCacheForType(resourceType) {\n  throw new Error('Not implemented.');\n}\n\nvar DefaultCacheDispatcher = {\n  getCacheSignal: getCacheSignal,\n  getCacheForType: getCacheForType\n};\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher$1.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher$1.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\n\nfunction describeClassComponentFrame(ctor, ownerFn) {\n  {\n    return describeNativeComponentFrame(ctor, true);\n  }\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction getStackByComponentStackNode(componentStack) {\n  try {\n    var info = '';\n    var node = componentStack;\n\n    do {\n      switch (node.tag) {\n        case 0:\n          info += describeBuiltInComponentFrame(node.type, null);\n          break;\n\n        case 1:\n          info += describeFunctionComponentFrame(node.type, null);\n          break;\n\n        case 2:\n          info += describeClassComponentFrame(node.type, null);\n          break;\n      } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n\n      node = node.parent;\n    } while (node);\n\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar ReactCurrentCache = ReactSharedInternals.ReactCurrentCache;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame; // Linked list representing the identity of a component given the component/tag name and key.\n// The name might be minified but we assume that it's going to be the same generated name. Typically\n// because it's just the same compiled output in practice.\n// resume with segmentID at the index\n\nvar CLIENT_RENDERED = 4; // if it errors or infinitely suspends\n\nvar PENDING = 0;\nvar COMPLETED = 1;\nvar FLUSHED = 2;\nvar ABORTED = 3;\nvar ERRORED = 4;\nvar POSTPONED = 5;\nvar OPEN = 0;\nvar CLOSING = 1;\nvar CLOSED = 2; // This is a default heuristic for how to split up the HTML content into progressive\n// loading. Our goal is to be able to display additional new content about every 500ms.\n// Faster than that is unnecessary and should be throttled on the client. It also\n// adds unnecessary overhead to do more splits. We don't know if it's a higher or lower\n// end device but higher end suffer less from the overhead than lower end does from\n// not getting small enough pieces. We error on the side of low end.\n// We base this on low end 3G speeds which is about 500kbits per second. We assume\n// that there can be a reasonable drop off from max bandwidth which leaves you with\n// as little as 80%. We can receive half of that each 500ms - at best. In practice,\n// a little bandwidth is lost to processing and contention - e.g. CSS and images that\n// are downloaded along with the main content. So we estimate about half of that to be\n// the lower end throughput. In other words, we expect that you can at least show\n// about 12.5kb of content per 500ms. Not counting starting latency for the first\n// paint.\n// 500 * 1024 / 8 * .8 * 0.5 / 2\n\nvar DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;\n\nfunction defaultErrorHandler(error) {\n  console['error'](error); // Don't transform to our wrapper\n\n  return null;\n}\n\nfunction noop() {}\n\nfunction createRequest(children, resumableState, renderState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError, onPostpone, formState) {\n  prepareHostDispatcher();\n  var pingedTasks = [];\n  var abortSet = new Set();\n  var request = {\n    destination: null,\n    flushScheduled: false,\n    resumableState: resumableState,\n    renderState: renderState,\n    rootFormatContext: rootFormatContext,\n    progressiveChunkSize: progressiveChunkSize === undefined ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,\n    status: OPEN,\n    fatalError: null,\n    nextSegmentId: 0,\n    allPendingTasks: 0,\n    pendingRootTasks: 0,\n    completedRootSegment: null,\n    abortableTasks: abortSet,\n    pingedTasks: pingedTasks,\n    clientRenderedBoundaries: [],\n    completedBoundaries: [],\n    partialBoundaries: [],\n    trackedPostpones: null,\n    onError: onError === undefined ? defaultErrorHandler : onError,\n    onPostpone: onPostpone === undefined ? noop : onPostpone,\n    onAllReady: onAllReady === undefined ? noop : onAllReady,\n    onShellReady: onShellReady === undefined ? noop : onShellReady,\n    onShellError: onShellError === undefined ? noop : onShellError,\n    onFatalError: onFatalError === undefined ? noop : onFatalError,\n    formState: formState === undefined ? null : formState\n  }; // This segment represents the root fallback.\n\n  var rootSegment = createPendingSegment(request, 0, null, rootFormatContext, // Root segments are never embedded in Text on either edge\n  false, false); // There is no parent so conceptually, we're unblocked to flush this segment.\n\n  rootSegment.parentFlushed = true;\n  var rootTask = createRenderTask(request, null, children, -1, null, rootSegment, null, abortSet, null, rootFormatContext, emptyContextObject, rootContextSnapshot, emptyTreeContext, null, false);\n  pingedTasks.push(rootTask);\n  return request;\n}\nvar currentRequest = null;\nfunction resolveRequest() {\n  if (currentRequest) return currentRequest;\n\n  {\n    var store = requestStorage.getStore();\n    if (store) return store;\n  }\n\n  return null;\n}\n\nfunction pingTask(request, task) {\n  var pingedTasks = request.pingedTasks;\n  pingedTasks.push(task);\n\n  if (request.pingedTasks.length === 1) {\n    request.flushScheduled = request.destination !== null;\n    scheduleWork(function () {\n      return performWork(request);\n    });\n  }\n}\n\nfunction createSuspenseBoundary(request, fallbackAbortableTasks) {\n  return {\n    status: PENDING,\n    rootSegmentID: -1,\n    parentFlushed: false,\n    pendingTasks: 0,\n    completedSegments: [],\n    byteSize: 0,\n    fallbackAbortableTasks: fallbackAbortableTasks,\n    errorDigest: null,\n    contentState: createHoistableState(),\n    fallbackState: createHoistableState(),\n    trackedContentKeyPath: null,\n    trackedFallbackNode: null\n  };\n}\n\nfunction createRenderTask(request, thenableState, node, childIndex, blockedBoundary, blockedSegment, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {\n  request.allPendingTasks++;\n\n  if (blockedBoundary === null) {\n    request.pendingRootTasks++;\n  } else {\n    blockedBoundary.pendingTasks++;\n  }\n\n  var task = {\n    replay: null,\n    node: node,\n    childIndex: childIndex,\n    ping: function () {\n      return pingTask(request, task);\n    },\n    blockedBoundary: blockedBoundary,\n    blockedSegment: blockedSegment,\n    hoistableState: hoistableState,\n    abortSet: abortSet,\n    keyPath: keyPath,\n    formatContext: formatContext,\n    legacyContext: legacyContext,\n    context: context,\n    treeContext: treeContext,\n    componentStack: componentStack,\n    thenableState: thenableState,\n    isFallback: isFallback\n  };\n  abortSet.add(task);\n  return task;\n}\n\nfunction createReplayTask(request, thenableState, replay, node, childIndex, blockedBoundary, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {\n  request.allPendingTasks++;\n\n  if (blockedBoundary === null) {\n    request.pendingRootTasks++;\n  } else {\n    blockedBoundary.pendingTasks++;\n  }\n\n  replay.pendingTasks++;\n  var task = {\n    replay: replay,\n    node: node,\n    childIndex: childIndex,\n    ping: function () {\n      return pingTask(request, task);\n    },\n    blockedBoundary: blockedBoundary,\n    blockedSegment: null,\n    hoistableState: hoistableState,\n    abortSet: abortSet,\n    keyPath: keyPath,\n    formatContext: formatContext,\n    legacyContext: legacyContext,\n    context: context,\n    treeContext: treeContext,\n    componentStack: componentStack,\n    thenableState: thenableState,\n    isFallback: isFallback\n  };\n  abortSet.add(task);\n  return task;\n}\n\nfunction createPendingSegment(request, index, boundary, parentFormatContext, lastPushedText, textEmbedded) {\n  return {\n    status: PENDING,\n    id: -1,\n    // lazily assigned later\n    index: index,\n    parentFlushed: false,\n    chunks: [],\n    children: [],\n    parentFormatContext: parentFormatContext,\n    boundary: boundary,\n    lastPushedText: lastPushedText,\n    textEmbedded: textEmbedded\n  };\n} // DEV-only global reference to the currently executing task\n\n\nvar currentTaskInDEV = null;\n\nfunction getCurrentStackInDEV() {\n  {\n    if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {\n      return '';\n    }\n\n    return getStackByComponentStackNode(currentTaskInDEV.componentStack);\n  }\n}\n\nfunction getStackFromNode(stackNode) {\n  return getStackByComponentStackNode(stackNode);\n}\n\nfunction createBuiltInComponentStack(task, type) {\n  return {\n    tag: 0,\n    parent: task.componentStack,\n    type: type\n  };\n}\n\nfunction createFunctionComponentStack(task, type) {\n  return {\n    tag: 1,\n    parent: task.componentStack,\n    type: type\n  };\n}\n\nfunction createClassComponentStack(task, type) {\n  return {\n    tag: 2,\n    parent: task.componentStack,\n    type: type\n  };\n} // While we track component stacks in prod all the time we only produce a reified stack in dev and\n// during prerender in Prod. The reason for this is that the stack is useful for prerender where the timeliness\n// of the request is less critical than the observability of the execution. For renders and resumes however we\n// prioritize speed of the request.\n\n\nfunction getThrownInfo(request, node) {\n  if (node && ( // Always produce a stack in dev\n  true )) {\n    return {\n      componentStack: getStackFromNode(node)\n    };\n  } else {\n    return {};\n  }\n}\n\nfunction encodeErrorForBoundary(boundary, digest, error, thrownInfo) {\n  boundary.errorDigest = digest;\n\n  {\n    var message; // In dev we additionally encode the error message and component stack on the boundary\n\n    if (error instanceof Error) {\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      message = String(error.message);\n    } else if (typeof error === 'object' && error !== null) {\n      message = describeObjectForErrorMessage(error);\n    } else {\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      message = String(error);\n    }\n\n    boundary.errorMessage = message;\n    boundary.errorComponentStack = thrownInfo.componentStack;\n  }\n}\n\nfunction logRecoverableError(request, error$1, errorInfo) {\n  // If this callback errors, we intentionally let that error bubble up to become a fatal error\n  // so that someone fixes the error reporting instead of hiding it.\n  var errorDigest = request.onError(error$1, errorInfo);\n\n  if (errorDigest != null && typeof errorDigest !== 'string') {\n    // We used to throw here but since this gets called from a variety of unprotected places it\n    // seems better to just warn and discard the returned value.\n    {\n      error('onError returned something with a type other than \"string\". onError should return a string and may return null or undefined but must not return anything else. It received something of type \"%s\" instead', typeof errorDigest);\n    }\n\n    return;\n  }\n\n  return errorDigest;\n}\n\nfunction fatalError(request, error) {\n  // This is called outside error handling code such as if the root errors outside\n  // a suspense boundary or if the root suspense boundary's fallback errors.\n  // It's also called if React itself or its host configs errors.\n  var onShellError = request.onShellError;\n  onShellError(error);\n  var onFatalError = request.onFatalError;\n  onFatalError(error);\n\n  if (request.destination !== null) {\n    request.status = CLOSED;\n    closeWithError(request.destination, error);\n  } else {\n    request.status = CLOSING;\n    request.fatalError = error;\n  }\n}\n\nfunction renderSuspenseBoundary(request, someTask, keyPath, props) {\n  if (someTask.replay !== null) {\n    // If we're replaying through this pass, it means we're replaying through\n    // an already completed Suspense boundary. It's too late to do anything about it\n    // so we can just render through it.\n    var _prevKeyPath = someTask.keyPath;\n    someTask.keyPath = keyPath;\n    var _content = props.children;\n\n    try {\n      renderNode(request, someTask, _content, -1);\n    } finally {\n      someTask.keyPath = _prevKeyPath;\n    }\n\n    return;\n  } // $FlowFixMe: Refined.\n\n\n  var task = someTask;\n  var previousComponentStack = task.componentStack; // If we end up creating the fallback task we need it to have the correct stack which is\n  // the stack for the boundary itself. We stash it here so we can use it if needed later\n\n  var suspenseComponentStack = task.componentStack = createBuiltInComponentStack(task, 'Suspense');\n  var prevKeyPath = task.keyPath;\n  var parentBoundary = task.blockedBoundary;\n  var parentHoistableState = task.hoistableState;\n  var parentSegment = task.blockedSegment; // Each time we enter a suspense boundary, we split out into a new segment for\n  // the fallback so that we can later replace that segment with the content.\n  // This also lets us split out the main content even if it doesn't suspend,\n  // in case it ends up generating a large subtree of content.\n\n  var fallback = props.fallback;\n  var content = props.children;\n  var fallbackAbortSet = new Set();\n  var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);\n\n  if (request.trackedPostpones !== null) {\n    newBoundary.trackedContentKeyPath = keyPath;\n  }\n\n  var insertionIndex = parentSegment.chunks.length; // The children of the boundary segment is actually the fallback.\n\n  var boundarySegment = createPendingSegment(request, insertionIndex, newBoundary, task.formatContext, // boundaries never require text embedding at their edges because comment nodes bound them\n  false, false);\n  parentSegment.children.push(boundarySegment); // The parentSegment has a child Segment at this index so we reset the lastPushedText marker on the parent\n\n  parentSegment.lastPushedText = false; // This segment is the actual child content. We can start rendering that immediately.\n\n  var contentRootSegment = createPendingSegment(request, 0, null, task.formatContext, // boundaries never require text embedding at their edges because comment nodes bound them\n  false, false); // We mark the root segment as having its parent flushed. It's not really flushed but there is\n  // no parent segment so there's nothing to wait on.\n\n  contentRootSegment.parentFlushed = true; // Currently this is running synchronously. We could instead schedule this to pingedTasks.\n  // I suspect that there might be some efficiency benefits from not creating the suspended task\n  // and instead just using the stack if possible.\n  // TODO: Call this directly instead of messing with saving and restoring contexts.\n  // We can reuse the current context and task to render the content immediately without\n  // context switching. We just need to temporarily switch which boundary and which segment\n  // we're writing to. If something suspends, it'll spawn new suspended task with that context.\n\n  task.blockedBoundary = newBoundary;\n  task.hoistableState = newBoundary.contentState;\n  task.blockedSegment = contentRootSegment;\n  task.keyPath = keyPath;\n\n  try {\n    // We use the safe form because we don't handle suspending here. Only error handling.\n    renderNode(request, task, content, -1);\n    pushSegmentFinale(contentRootSegment.chunks, request.renderState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);\n    contentRootSegment.status = COMPLETED;\n    queueCompletedSegment(newBoundary, contentRootSegment);\n\n    if (newBoundary.pendingTasks === 0 && newBoundary.status === PENDING) {\n      // This must have been the last segment we were waiting on. This boundary is now complete.\n      // Therefore we won't need the fallback. We early return so that we don't have to create\n      // the fallback.\n      newBoundary.status = COMPLETED; // We are returning early so we need to restore the\n\n      task.componentStack = previousComponentStack;\n      return;\n    }\n  } catch (error) {\n    contentRootSegment.status = ERRORED;\n    newBoundary.status = CLIENT_RENDERED;\n    var thrownInfo = getThrownInfo(request, task.componentStack);\n    var errorDigest;\n\n    {\n      errorDigest = logRecoverableError(request, error, thrownInfo);\n    }\n\n    encodeErrorForBoundary(newBoundary, errorDigest, error, thrownInfo);\n    untrackBoundary(request, newBoundary); // We don't need to decrement any task numbers because we didn't spawn any new task.\n    // We don't need to schedule any task because we know the parent has written yet.\n    // We do need to fallthrough to create the fallback though.\n  } finally {\n    task.blockedBoundary = parentBoundary;\n    task.hoistableState = parentHoistableState;\n    task.blockedSegment = parentSegment;\n    task.keyPath = prevKeyPath;\n    task.componentStack = previousComponentStack;\n  }\n\n  var fallbackKeyPath = [keyPath[0], 'Suspense Fallback', keyPath[2]];\n  var trackedPostpones = request.trackedPostpones;\n\n  if (trackedPostpones !== null) {\n    // We create a detached replay node to track any postpones inside the fallback.\n    var fallbackReplayNode = [fallbackKeyPath[1], fallbackKeyPath[2], [], null];\n    trackedPostpones.workingMap.set(fallbackKeyPath, fallbackReplayNode);\n\n    if (newBoundary.status === POSTPONED) {\n      // This must exist now.\n      var boundaryReplayNode = trackedPostpones.workingMap.get(keyPath);\n      boundaryReplayNode[4] = fallbackReplayNode;\n    } else {\n      // We might not inject it into the postponed tree, unless the content actually\n      // postpones too. We need to keep track of it until that happpens.\n      newBoundary.trackedFallbackNode = fallbackReplayNode;\n    }\n  } // We create suspended task for the fallback because we don't want to actually work\n  // on it yet in case we finish the main content, so we queue for later.\n\n\n  var suspendedFallbackTask = createRenderTask(request, null, fallback, -1, parentBoundary, boundarySegment, newBoundary.fallbackState, fallbackAbortSet, fallbackKeyPath, task.formatContext, task.legacyContext, task.context, task.treeContext, // This stack should be the Suspense boundary stack because while the fallback is actually a child segment\n  // of the parent boundary from a component standpoint the fallback is a child of the Suspense boundary itself\n  suspenseComponentStack, true); // TODO: This should be queued at a separate lower priority queue so that we only work\n  // on preparing fallbacks if we don't have any more main content to task on.\n\n  request.pingedTasks.push(suspendedFallbackTask);\n}\n\nfunction replaySuspenseBoundary(request, task, keyPath, props, id, childNodes, childSlots, fallbackNodes, fallbackSlots) {\n  var previousComponentStack = task.componentStack; // If we end up creating the fallback task we need it to have the correct stack which is\n  // the stack for the boundary itself. We stash it here so we can use it if needed later\n\n  var suspenseComponentStack = task.componentStack = createBuiltInComponentStack(task, 'Suspense');\n  var prevKeyPath = task.keyPath;\n  var previousReplaySet = task.replay;\n  var parentBoundary = task.blockedBoundary;\n  var parentHoistableState = task.hoistableState;\n  var content = props.children;\n  var fallback = props.fallback;\n  var fallbackAbortSet = new Set();\n  var resumedBoundary = createSuspenseBoundary(request, fallbackAbortSet);\n  resumedBoundary.parentFlushed = true; // We restore the same id of this boundary as was used during prerender.\n\n  resumedBoundary.rootSegmentID = id; // We can reuse the current context and task to render the content immediately without\n  // context switching. We just need to temporarily switch which boundary and replay node\n  // we're writing to. If something suspends, it'll spawn new suspended task with that context.\n\n  task.blockedBoundary = resumedBoundary;\n  task.hoistableState = resumedBoundary.contentState;\n  task.replay = {\n    nodes: childNodes,\n    slots: childSlots,\n    pendingTasks: 1\n  };\n\n  try {\n    // We use the safe form because we don't handle suspending here. Only error handling.\n    renderNode(request, task, content, -1);\n\n    if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {\n      throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n    }\n\n    task.replay.pendingTasks--;\n\n    if (resumedBoundary.pendingTasks === 0 && resumedBoundary.status === PENDING) {\n      // This must have been the last segment we were waiting on. This boundary is now complete.\n      // Therefore we won't need the fallback. We early return so that we don't have to create\n      // the fallback.\n      resumedBoundary.status = COMPLETED;\n      request.completedBoundaries.push(resumedBoundary); // We restore the parent componentStack. Semantically this is the same as\n      // popComponentStack(task) but we do this instead because it should be slightly\n      // faster\n\n      return;\n    }\n  } catch (error) {\n    resumedBoundary.status = CLIENT_RENDERED;\n    var thrownInfo = getThrownInfo(request, task.componentStack);\n    var errorDigest;\n\n    {\n      errorDigest = logRecoverableError(request, error, thrownInfo);\n    }\n\n    encodeErrorForBoundary(resumedBoundary, errorDigest, error, thrownInfo);\n    task.replay.pendingTasks--; // The parent already flushed in the prerender so we need to schedule this to be emitted.\n\n    request.clientRenderedBoundaries.push(resumedBoundary); // We don't need to decrement any task numbers because we didn't spawn any new task.\n    // We don't need to schedule any task because we know the parent has written yet.\n    // We do need to fallthrough to create the fallback though.\n  } finally {\n    task.blockedBoundary = parentBoundary;\n    task.hoistableState = parentHoistableState;\n    task.replay = previousReplaySet;\n    task.keyPath = prevKeyPath;\n    task.componentStack = previousComponentStack;\n  }\n\n  var fallbackKeyPath = [keyPath[0], 'Suspense Fallback', keyPath[2]]; // We create suspended task for the fallback because we don't want to actually work\n  // on it yet in case we finish the main content, so we queue for later.\n\n  var fallbackReplay = {\n    nodes: fallbackNodes,\n    slots: fallbackSlots,\n    pendingTasks: 0\n  };\n  var suspendedFallbackTask = createReplayTask(request, null, fallbackReplay, fallback, -1, parentBoundary, resumedBoundary.fallbackState, fallbackAbortSet, fallbackKeyPath, task.formatContext, task.legacyContext, task.context, task.treeContext, // This stack should be the Suspense boundary stack because while the fallback is actually a child segment\n  // of the parent boundary from a component standpoint the fallback is a child of the Suspense boundary itself\n  suspenseComponentStack, true); // TODO: This should be queued at a separate lower priority queue so that we only work\n  // on preparing fallbacks if we don't have any more main content to task on.\n\n  request.pingedTasks.push(suspendedFallbackTask);\n}\n\nfunction renderHostElement(request, task, keyPath, type, props) {\n  var previousComponentStack = task.componentStack;\n  task.componentStack = createBuiltInComponentStack(task, type);\n  var segment = task.blockedSegment;\n\n  if (segment === null) {\n    // Replay\n    var children = props.children; // TODO: Make this a Config for replaying.\n\n    var prevContext = task.formatContext;\n    var prevKeyPath = task.keyPath;\n    task.formatContext = getChildFormatContext(prevContext, type, props);\n    task.keyPath = keyPath; // We use the non-destructive form because if something suspends, we still\n    // need to pop back up and finish this subtree of HTML.\n\n    renderNode(request, task, children, -1); // We expect that errors will fatal the whole task and that we don't need\n    // the correct context. Therefore this is not in a finally.\n\n    task.formatContext = prevContext;\n    task.keyPath = prevKeyPath;\n  } else {\n    // Render\n    var _children = pushStartInstance(segment.chunks, type, props, request.resumableState, request.renderState, task.hoistableState, task.formatContext, segment.lastPushedText, task.isFallback);\n\n    segment.lastPushedText = false;\n    var _prevContext = task.formatContext;\n    var _prevKeyPath2 = task.keyPath;\n    task.formatContext = getChildFormatContext(_prevContext, type, props);\n    task.keyPath = keyPath; // We use the non-destructive form because if something suspends, we still\n    // need to pop back up and finish this subtree of HTML.\n\n    renderNode(request, task, _children, -1); // We expect that errors will fatal the whole task and that we don't need\n    // the correct context. Therefore this is not in a finally.\n\n    task.formatContext = _prevContext;\n    task.keyPath = _prevKeyPath2;\n    pushEndInstance(segment.chunks, type, props, request.resumableState, _prevContext);\n    segment.lastPushedText = false;\n  }\n\n  task.componentStack = previousComponentStack;\n}\n\nfunction shouldConstruct(Component) {\n  return Component.prototype && Component.prototype.isReactComponent;\n}\n\nfunction renderWithHooks(request, task, keyPath, Component, props, secondArg) {\n  // Reset the task's thenable state before continuing, so that if a later\n  // component suspends we can reuse the same task object. If the same\n  // component suspends again, the thenable state will be restored.\n  var prevThenableState = task.thenableState;\n  task.thenableState = null;\n  var componentIdentity = {};\n  prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState);\n  var result = Component(props, secondArg);\n  return finishHooks(Component, props, result, secondArg);\n}\n\nfunction finishClassComponent(request, task, keyPath, instance, Component, props) {\n  var nextChildren = instance.render();\n\n  {\n    if (instance.props !== props) {\n      if (!didWarnAboutReassigningProps) {\n        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromType(Component) || 'a component');\n      }\n\n      didWarnAboutReassigningProps = true;\n    }\n  }\n\n  {\n    var childContextTypes = Component.childContextTypes;\n\n    if (childContextTypes !== null && childContextTypes !== undefined) {\n      var previousContext = task.legacyContext;\n      var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);\n      task.legacyContext = mergedContext;\n      renderNodeDestructive(request, task, nextChildren, -1);\n      task.legacyContext = previousContext;\n      return;\n    }\n  }\n\n  var prevKeyPath = task.keyPath;\n  task.keyPath = keyPath;\n  renderNodeDestructive(request, task, nextChildren, -1);\n  task.keyPath = prevKeyPath;\n}\n\nfunction renderClassComponent(request, task, keyPath, Component, props) {\n  var previousComponentStack = task.componentStack;\n  task.componentStack = createClassComponentStack(task, Component);\n  var maskedContext = getMaskedContext(Component, task.legacyContext) ;\n  var instance = constructClassInstance(Component, props, maskedContext);\n  mountClassInstance(instance, Component, props, maskedContext);\n  finishClassComponent(request, task, keyPath, instance, Component, props);\n  task.componentStack = previousComponentStack;\n}\n\nvar didWarnAboutBadClass = {};\nvar didWarnAboutModulePatternComponent = {};\nvar didWarnAboutContextTypeOnFunctionComponent = {};\nvar didWarnAboutGetDerivedStateOnFunctionComponent = {};\nvar didWarnAboutReassigningProps = false;\nvar didWarnAboutDefaultPropsOnFunctionComponent = {};\nvar didWarnAboutGenerators = false;\nvar didWarnAboutMaps = false; // This would typically be a function component but we still support module pattern\n// components for some reason.\n\nfunction renderIndeterminateComponent(request, task, keyPath, Component, props) {\n  var legacyContext;\n\n  {\n    legacyContext = getMaskedContext(Component, task.legacyContext);\n  }\n\n  var previousComponentStack = task.componentStack;\n  task.componentStack = createFunctionComponentStack(task, Component);\n\n  {\n    if (Component.prototype && typeof Component.prototype.render === 'function') {\n      var componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n  }\n\n  var value = renderWithHooks(request, task, keyPath, Component, props, legacyContext);\n  var hasId = checkDidRenderIdHook();\n  var formStateCount = getFormStateCount();\n  var formStateMatchingIndex = getFormStateMatchingIndex();\n\n  {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n      var _componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\n\n        didWarnAboutModulePatternComponent[_componentName] = true;\n      }\n    }\n  }\n\n  if ( // Run these checks in production only if the flag is off.\n  // Eventually we'll delete this branch altogether.\n  typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n    {\n      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName2]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\n\n        didWarnAboutModulePatternComponent[_componentName2] = true;\n      }\n    }\n\n    mountClassInstance(value, Component, props, legacyContext);\n    finishClassComponent(request, task, keyPath, value, Component, props);\n  } else {\n\n    {\n      validateFunctionComponentInDev(Component);\n    }\n\n    finishFunctionComponent(request, task, keyPath, value, hasId, formStateCount, formStateMatchingIndex);\n  }\n\n  task.componentStack = previousComponentStack;\n}\n\nfunction finishFunctionComponent(request, task, keyPath, children, hasId, formStateCount, formStateMatchingIndex) {\n  var didEmitFormStateMarkers = false;\n\n  if (formStateCount !== 0 && request.formState !== null) {\n    // For each useFormState hook, emit a marker that indicates whether we\n    // rendered using the form state passed at the root. We only emit these\n    // markers if form state is passed at the root.\n    var segment = task.blockedSegment;\n\n    if (segment === null) ; else {\n      didEmitFormStateMarkers = true;\n      var target = segment.chunks;\n\n      for (var i = 0; i < formStateCount; i++) {\n        if (i === formStateMatchingIndex) {\n          pushFormStateMarkerIsMatching(target);\n        } else {\n          pushFormStateMarkerIsNotMatching(target);\n        }\n      }\n    }\n  }\n\n  var prevKeyPath = task.keyPath;\n  task.keyPath = keyPath;\n\n  if (hasId) {\n    // This component materialized an id. We treat this as its own level, with\n    // a single \"child\" slot.\n    var prevTreeContext = task.treeContext;\n    var totalChildren = 1;\n    var index = 0; // Modify the id context. Because we'll need to reset this if something\n    // suspends or errors, we'll use the non-destructive render path.\n\n    task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);\n    renderNode(request, task, children, -1); // Like the other contexts, this does not need to be in a finally block\n    // because renderNode takes care of unwinding the stack.\n\n    task.treeContext = prevTreeContext;\n  } else if (didEmitFormStateMarkers) {\n    // If there were formState hooks, we must use the non-destructive path\n    // because this component is not a pure indirection; we emitted markers\n    // to the stream.\n    renderNode(request, task, children, -1);\n  } else {\n    // We're now successfully past this task, and we haven't modified the\n    // context stack. We don't have to pop back to the previous task every\n    // again, so we can use the destructive recursive form.\n    renderNodeDestructive(request, task, children, -1);\n  }\n\n  task.keyPath = prevKeyPath;\n}\n\nfunction validateFunctionComponentInDev(Component) {\n  {\n    if (Component) {\n      if (Component.childContextTypes) {\n        error('childContextTypes cannot be defined on a function component.\\n' + '  %s.childContextTypes = ...', Component.displayName || Component.name || 'Component');\n      }\n    }\n\n    if (Component.defaultProps !== undefined) {\n      var componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        error('%s: Support for defaultProps will be removed from function components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);\n\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\n\n        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n      }\n    }\n\n    if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n        error('%s: Function components do not support contextType.', _componentName4);\n\n        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n      }\n    }\n  }\n}\n\nfunction resolveDefaultProps(Component, baseProps) {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    var props = assign({}, baseProps);\n    var defaultProps = Component.defaultProps;\n\n    for (var propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n\n    return props;\n  }\n\n  return baseProps;\n}\n\nfunction renderForwardRef(request, task, keyPath, type, props, ref) {\n  var previousComponentStack = task.componentStack;\n  task.componentStack = createFunctionComponentStack(task, type.render);\n  var propsWithoutRef;\n\n  {\n    propsWithoutRef = props;\n  }\n\n  var children = renderWithHooks(request, task, keyPath, type.render, propsWithoutRef, ref);\n  var hasId = checkDidRenderIdHook();\n  var formStateCount = getFormStateCount();\n  var formStateMatchingIndex = getFormStateMatchingIndex();\n  finishFunctionComponent(request, task, keyPath, children, hasId, formStateCount, formStateMatchingIndex);\n  task.componentStack = previousComponentStack;\n}\n\nfunction renderMemo(request, task, keyPath, type, props, ref) {\n  var innerType = type.type;\n  var resolvedProps = resolveDefaultProps(innerType, props);\n  renderElement(request, task, keyPath, innerType, resolvedProps, ref);\n}\n\nfunction renderContextConsumer(request, task, keyPath, context, props) {\n  var render = props.children;\n\n  {\n    if (typeof render !== 'function') {\n      error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n    }\n  }\n\n  var newValue = readContext$1(context);\n  var newChildren = render(newValue);\n  var prevKeyPath = task.keyPath;\n  task.keyPath = keyPath;\n  renderNodeDestructive(request, task, newChildren, -1);\n  task.keyPath = prevKeyPath;\n}\n\nfunction renderContextProvider(request, task, keyPath, context, props) {\n  var value = props.value;\n  var children = props.children;\n  var prevSnapshot;\n\n  {\n    prevSnapshot = task.context;\n  }\n\n  var prevKeyPath = task.keyPath;\n  task.context = pushProvider(context, value);\n  task.keyPath = keyPath;\n  renderNodeDestructive(request, task, children, -1);\n  task.context = popProvider(context);\n  task.keyPath = prevKeyPath;\n\n  {\n    if (prevSnapshot !== task.context) {\n      error('Popping the context provider did not return back to the original snapshot. This is a bug in React.');\n    }\n  }\n}\n\nfunction renderLazyComponent(request, task, keyPath, lazyComponent, props, ref) {\n  var previousComponentStack = task.componentStack;\n  task.componentStack = createBuiltInComponentStack(task, 'Lazy');\n  var payload = lazyComponent._payload;\n  var init = lazyComponent._init;\n  var Component = init(payload);\n  var resolvedProps = resolveDefaultProps(Component, props);\n  renderElement(request, task, keyPath, Component, resolvedProps, ref);\n  task.componentStack = previousComponentStack;\n}\n\nfunction renderOffscreen(request, task, keyPath, props) {\n  var mode = props.mode;\n\n  if (mode === 'hidden') ; else {\n    // A visible Offscreen boundary is treated exactly like a fragment: a\n    // pure indirection.\n    var prevKeyPath = task.keyPath;\n    task.keyPath = keyPath;\n    renderNodeDestructive(request, task, props.children, -1);\n    task.keyPath = prevKeyPath;\n  }\n}\n\nfunction renderElement(request, task, keyPath, type, props, ref) {\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      renderClassComponent(request, task, keyPath, type, props);\n      return;\n    } else {\n      renderIndeterminateComponent(request, task, keyPath, type, props);\n      return;\n    }\n  }\n\n  if (typeof type === 'string') {\n    renderHostElement(request, task, keyPath, type, props);\n    return;\n  }\n\n  switch (type) {\n    // LegacyHidden acts the same as a fragment. This only works because we\n    // currently assume that every instance of LegacyHidden is accompanied by a\n    // host component wrapper. In the hidden mode, the host component is given a\n    // `hidden` attribute, which ensures that the initial HTML is not visible.\n    // To support the use of LegacyHidden as a true fragment, without an extra\n    // DOM node, we would have to hide the initial HTML in some other way.\n    // TODO: Delete in LegacyHidden. It's an unstable API only used in the\n    // www build. As a migration step, we could add a special prop to Offscreen\n    // that simulates the old behavior (no hiding, no change to effects).\n    case REACT_LEGACY_HIDDEN_TYPE:\n    case REACT_DEBUG_TRACING_MODE_TYPE:\n    case REACT_STRICT_MODE_TYPE:\n    case REACT_PROFILER_TYPE:\n    case REACT_FRAGMENT_TYPE:\n      {\n        var prevKeyPath = task.keyPath;\n        task.keyPath = keyPath;\n        renderNodeDestructive(request, task, props.children, -1);\n        task.keyPath = prevKeyPath;\n        return;\n      }\n\n    case REACT_OFFSCREEN_TYPE:\n      {\n        renderOffscreen(request, task, keyPath, props);\n        return;\n      }\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      {\n        var preiousComponentStack = task.componentStack;\n        task.componentStack = createBuiltInComponentStack(task, 'SuspenseList'); // TODO: SuspenseList should control the boundaries.\n\n        var _prevKeyPath3 = task.keyPath;\n        task.keyPath = keyPath;\n        renderNodeDestructive(request, task, props.children, -1);\n        task.keyPath = _prevKeyPath3;\n        task.componentStack = preiousComponentStack;\n        return;\n      }\n\n    case REACT_SCOPE_TYPE:\n      {\n\n        throw new Error('ReactDOMServer does not yet support scope components.');\n      }\n\n    case REACT_SUSPENSE_TYPE:\n      {\n        {\n          renderSuspenseBoundary(request, task, keyPath, props);\n        }\n\n        return;\n      }\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        {\n          renderForwardRef(request, task, keyPath, type, props, ref);\n          return;\n        }\n\n      case REACT_MEMO_TYPE:\n        {\n          renderMemo(request, task, keyPath, type, props, ref);\n          return;\n        }\n\n      case REACT_PROVIDER_TYPE:\n        {\n          {\n            var context = type._context;\n            renderContextProvider(request, task, keyPath, context, props);\n            return;\n          } // Fall through\n\n        }\n\n      case REACT_CONTEXT_TYPE:\n        {\n          {\n            var _context2 = type;\n\n            {\n              if (_context2._context !== undefined) {\n                _context2 = _context2._context;\n              }\n            }\n\n            renderContextConsumer(request, task, keyPath, _context2, props);\n            return;\n          }\n        }\n\n      case REACT_CONSUMER_TYPE:\n\n      case REACT_LAZY_TYPE:\n        {\n          renderLazyComponent(request, task, keyPath, type, props);\n          return;\n        }\n    }\n  }\n\n  var info = '';\n\n  {\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n    }\n  }\n\n  throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n}\n\nfunction resumeNode(request, task, segmentId, node, childIndex) {\n  var prevReplay = task.replay;\n  var blockedBoundary = task.blockedBoundary;\n  var resumedSegment = createPendingSegment(request, 0, null, task.formatContext, false, false);\n  resumedSegment.id = segmentId;\n  resumedSegment.parentFlushed = true;\n\n  try {\n    // Convert the current ReplayTask to a RenderTask.\n    var renderTask = task;\n    renderTask.replay = null;\n    renderTask.blockedSegment = resumedSegment;\n    renderNode(request, task, node, childIndex);\n    resumedSegment.status = COMPLETED;\n\n    if (blockedBoundary === null) {\n      request.completedRootSegment = resumedSegment;\n    } else {\n      queueCompletedSegment(blockedBoundary, resumedSegment);\n\n      if (blockedBoundary.parentFlushed) {\n        request.partialBoundaries.push(blockedBoundary);\n      }\n    }\n  } finally {\n    // Restore to a ReplayTask.\n    task.replay = prevReplay;\n    task.blockedSegment = null;\n  }\n}\n\nfunction replayElement(request, task, keyPath, name, keyOrIndex, childIndex, type, props, ref, replay) {\n  // We're replaying. Find the path to follow.\n  var replayNodes = replay.nodes;\n\n  for (var i = 0; i < replayNodes.length; i++) {\n    // Flow doesn't support refinement on tuples so we do it manually here.\n    var node = replayNodes[i];\n\n    if (keyOrIndex !== node[1]) {\n      continue;\n    }\n\n    if (node.length === 4) {\n      // Matched a replayable path.\n      // Let's double check that the component name matches as a precaution.\n      if (name !== null && name !== node[0]) {\n        throw new Error('Expected the resume to render <' + node[0] + '> in this slot but instead it rendered <' + name + '>. ' + \"The tree doesn't match so React will fallback to client rendering.\");\n      }\n\n      var childNodes = node[2];\n      var childSlots = node[3];\n      var currentNode = task.node;\n      task.replay = {\n        nodes: childNodes,\n        slots: childSlots,\n        pendingTasks: 1\n      };\n\n      try {\n        renderElement(request, task, keyPath, type, props, ref);\n\n        if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0 // TODO check remaining slots\n        ) {\n            throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n          }\n\n        task.replay.pendingTasks--;\n      } catch (x) {\n        if (typeof x === 'object' && x !== null && (x === SuspenseException || typeof x.then === 'function')) {\n          // Suspend\n          if (task.node === currentNode) {\n            // This same element suspended so we need to pop the replay we just added.\n            task.replay = replay;\n          }\n\n          throw x;\n        }\n\n        task.replay.pendingTasks--; // Unlike regular render, we don't terminate the siblings if we error\n        // during a replay. That's because this component didn't actually error\n        // in the original prerender. What's unable to complete is the child\n        // replay nodes which might be Suspense boundaries which are able to\n        // absorb the error and we can still continue with siblings.\n\n        var thrownInfo = getThrownInfo(request, task.componentStack);\n        erroredReplay(request, task.blockedBoundary, x, thrownInfo, childNodes, childSlots);\n      }\n\n      task.replay = replay;\n    } else {\n      // Let's double check that the component type matches.\n      if (type !== REACT_SUSPENSE_TYPE) {\n        var expectedType = 'Suspense';\n        throw new Error('Expected the resume to render <' + expectedType + '> in this slot but instead it rendered <' + (getComponentNameFromType(type) || 'Unknown') + '>. ' + \"The tree doesn't match so React will fallback to client rendering.\");\n      } // Matched a replayable path.\n\n\n      replaySuspenseBoundary(request, task, keyPath, props, node[5], node[2], node[3], node[4] === null ? [] : node[4][2], node[4] === null ? null : node[4][3]);\n    } // We finished rendering this node, so now we can consume this\n    // slot. This must happen after in case we rerender this task.\n\n\n    replayNodes.splice(i, 1);\n    return;\n  } // We didn't find any matching nodes. We assume that this element was already\n  // rendered in the prelude and skip it.\n\n} // $FlowFixMe[missing-local-annot]\n\n\nfunction validateIterable(iterable, iteratorFn) {\n  {\n    // We don't support rendering Generators because it's a mutation.\n    // See https://github.com/facebook/react/issues/12995\n    if (typeof Symbol === 'function' && iterable[Symbol.toStringTag] === 'Generator') {\n      if (!didWarnAboutGenerators) {\n        error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\n      }\n\n      didWarnAboutGenerators = true;\n    } // Warn about using Maps as children\n\n\n    if (iterable.entries === iteratorFn) {\n      if (!didWarnAboutMaps) {\n        error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n      }\n\n      didWarnAboutMaps = true;\n    }\n  }\n}\n\nfunction warnOnFunctionType(invalidChild) {\n  {\n    var name = invalidChild.displayName || invalidChild.name || 'Component';\n\n    error('Functions are not valid as a React child. This may happen if ' + 'you return %s instead of <%s /> from render. ' + 'Or maybe you meant to call this function rather than return it.', name, name);\n  }\n}\n\nfunction warnOnSymbolType(invalidChild) {\n  {\n    // eslint-disable-next-line react-internal/safe-string-coercion\n    var name = String(invalidChild);\n\n    error('Symbols are not valid as a React child.\\n' + '  %s', name);\n  }\n} // This function by it self renders a node and consumes the task by mutating it\n// to update the current execution state.\n\n\nfunction renderNodeDestructive(request, task, node, childIndex) {\n  if (task.replay !== null && typeof task.replay.slots === 'number') {\n    // TODO: Figure out a cheaper place than this hot path to do this check.\n    var resumeSegmentID = task.replay.slots;\n    resumeNode(request, task, resumeSegmentID, node, childIndex);\n    return;\n  } // Stash the node we're working on. We'll pick up from this task in case\n  // something suspends.\n\n\n  task.node = node;\n  task.childIndex = childIndex;\n\n  if (node === null) {\n    return;\n  } // Handle object types\n\n\n  if (typeof node === 'object') {\n    switch (node.$$typeof) {\n      case REACT_ELEMENT_TYPE:\n        {\n          var element = node;\n          var type = element.type;\n          var key = element.key;\n          var props = element.props;\n          var ref;\n\n          {\n            ref = element.ref;\n          }\n\n          var name = getComponentNameFromType(type);\n          var keyOrIndex = key == null ? childIndex === -1 ? 0 : childIndex : key;\n          var keyPath = [task.keyPath, name, keyOrIndex];\n\n          if (task.replay !== null) {\n            replayElement(request, task, keyPath, name, keyOrIndex, childIndex, type, props, ref, task.replay); // No matches found for this node. We assume it's already emitted in the\n            // prelude and skip it during the replay.\n          } else {\n            // We're doing a plain render.\n            renderElement(request, task, keyPath, type, props, ref);\n          }\n\n          return;\n        }\n\n      case REACT_PORTAL_TYPE:\n        throw new Error('Portals are not currently supported by the server renderer. ' + 'Render them conditionally so that they only appear on the client render.');\n\n      case REACT_LAZY_TYPE:\n        {\n          var previousComponentStack = task.componentStack;\n          task.componentStack = createBuiltInComponentStack(task, 'Lazy');\n          var lazyNode = node;\n          var payload = lazyNode._payload;\n          var init = lazyNode._init;\n          var resolvedNode = init(payload); // We restore the stack before rendering the resolved node because once the Lazy\n          // has resolved any future errors\n\n          task.componentStack = previousComponentStack; // Now we render the resolved node\n\n          renderNodeDestructive(request, task, resolvedNode, childIndex);\n          return;\n        }\n    }\n\n    if (isArray(node)) {\n      renderChildrenArray(request, task, node, childIndex);\n      return;\n    }\n\n    var iteratorFn = getIteratorFn(node);\n\n    if (iteratorFn) {\n      {\n        validateIterable(node, iteratorFn);\n      }\n\n      var iterator = iteratorFn.call(node);\n\n      if (iterator) {\n        // We need to know how many total children are in this set, so that we\n        // can allocate enough id slots to acommodate them. So we must exhaust\n        // the iterator before we start recursively rendering the children.\n        // TODO: This is not great but I think it's inherent to the id\n        // generation algorithm.\n        var step = iterator.next(); // If there are not entries, we need to push an empty so we start by checking that.\n\n        if (!step.done) {\n          var children = [];\n\n          do {\n            children.push(step.value);\n            step = iterator.next();\n          } while (!step.done);\n\n          renderChildrenArray(request, task, children, childIndex);\n          return;\n        }\n\n        return;\n      }\n    } // Usables are a valid React node type. When React encounters a Usable in\n    // a child position, it unwraps it using the same algorithm as `use`. For\n    // example, for promises, React will throw an exception to unwind the\n    // stack, then replay the component once the promise resolves.\n    //\n    // A difference from `use` is that React will keep unwrapping the value\n    // until it reaches a non-Usable type.\n    //\n    // e.g. Usable<Usable<Usable<T>>> should resolve to T\n\n\n    var maybeUsable = node;\n\n    if (typeof maybeUsable.then === 'function') {\n      // Clear any previous thenable state that was created by the unwrapping.\n      task.thenableState = null;\n      var thenable = maybeUsable;\n      return renderNodeDestructive(request, task, unwrapThenable(thenable), childIndex);\n    }\n\n    if (maybeUsable.$$typeof === REACT_CONTEXT_TYPE) {\n      var context = maybeUsable;\n      return renderNodeDestructive(request, task, readContext$1(context), childIndex);\n    } // $FlowFixMe[method-unbinding]\n\n\n    var childString = Object.prototype.toString.call(node);\n    throw new Error(\"Objects are not valid as a React child (found: \" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(node).join(', ') + '}' : childString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n  }\n\n  if (typeof node === 'string') {\n    var segment = task.blockedSegment;\n\n    if (segment === null) ; else {\n      segment.lastPushedText = pushTextInstance(segment.chunks, node, request.renderState, segment.lastPushedText);\n    }\n\n    return;\n  }\n\n  if (typeof node === 'number') {\n    var _segment = task.blockedSegment;\n\n    if (_segment === null) ; else {\n      _segment.lastPushedText = pushTextInstance(_segment.chunks, '' + node, request.renderState, _segment.lastPushedText);\n    }\n\n    return;\n  }\n\n  {\n    if (typeof node === 'function') {\n      warnOnFunctionType(node);\n    }\n\n    if (typeof node === 'symbol') {\n      warnOnSymbolType(node);\n    }\n  }\n}\n\nfunction replayFragment(request, task, children, childIndex) {\n  // If we're supposed follow this array, we'd expect to see a ReplayNode matching\n  // this fragment.\n  var replay = task.replay;\n  var replayNodes = replay.nodes;\n\n  for (var j = 0; j < replayNodes.length; j++) {\n    var node = replayNodes[j];\n\n    if (node[1] !== childIndex) {\n      continue;\n    } // Matched a replayable path.\n\n\n    var childNodes = node[2];\n    var childSlots = node[3];\n    task.replay = {\n      nodes: childNodes,\n      slots: childSlots,\n      pendingTasks: 1\n    };\n\n    try {\n      renderChildrenArray(request, task, children, -1);\n\n      if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {\n        throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n      }\n\n      task.replay.pendingTasks--;\n    } catch (x) {\n      if (typeof x === 'object' && x !== null && (x === SuspenseException || typeof x.then === 'function')) {\n        // Suspend\n        throw x;\n      }\n\n      task.replay.pendingTasks--; // Unlike regular render, we don't terminate the siblings if we error\n      // during a replay. That's because this component didn't actually error\n      // in the original prerender. What's unable to complete is the child\n      // replay nodes which might be Suspense boundaries which are able to\n      // absorb the error and we can still continue with siblings.\n      // This is an error, stash the component stack if it is null.\n\n      var thrownInfo = getThrownInfo(request, task.componentStack);\n      erroredReplay(request, task.blockedBoundary, x, thrownInfo, childNodes, childSlots);\n    }\n\n    task.replay = replay; // We finished rendering this node, so now we can consume this\n    // slot. This must happen after in case we rerender this task.\n\n    replayNodes.splice(j, 1);\n    break;\n  }\n}\n\nfunction renderChildrenArray(request, task, children, childIndex) {\n  var prevKeyPath = task.keyPath;\n\n  if (childIndex !== -1) {\n    task.keyPath = [task.keyPath, 'Fragment', childIndex];\n\n    if (task.replay !== null) {\n      replayFragment(request, // $FlowFixMe: Refined.\n      task, children, childIndex);\n      task.keyPath = prevKeyPath;\n      return;\n    }\n  }\n\n  var prevTreeContext = task.treeContext;\n  var totalChildren = children.length;\n\n  if (task.replay !== null) {\n    // Replay\n    // First we need to check if we have any resume slots at this level.\n    var resumeSlots = task.replay.slots;\n\n    if (resumeSlots !== null && typeof resumeSlots === 'object') {\n      for (var i = 0; i < totalChildren; i++) {\n        var node = children[i];\n        task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i); // We need to use the non-destructive form so that we can safely pop back\n        // up and render the sibling if something suspends.\n\n        var resumeSegmentID = resumeSlots[i]; // TODO: If this errors we should still continue with the next sibling.\n\n        if (typeof resumeSegmentID === 'number') {\n          resumeNode(request, task, resumeSegmentID, node, i); // We finished rendering this node, so now we can consume this\n          // slot. This must happen after in case we rerender this task.\n\n          delete resumeSlots[i];\n        } else {\n          renderNode(request, task, node, i);\n        }\n      }\n\n      task.treeContext = prevTreeContext;\n      task.keyPath = prevKeyPath;\n      return;\n    }\n  }\n\n  for (var _i = 0; _i < totalChildren; _i++) {\n    var _node = children[_i];\n    task.treeContext = pushTreeContext(prevTreeContext, totalChildren, _i); // We need to use the non-destructive form so that we can safely pop back\n    // up and render the sibling if something suspends.\n\n    renderNode(request, task, _node, _i);\n  } // Because this context is always set right before rendering every child, we\n  // only need to reset it to the previous value at the very end.\n\n\n  task.treeContext = prevTreeContext;\n  task.keyPath = prevKeyPath;\n}\n// resume it.\n\n\nfunction untrackBoundary(request, boundary) {\n  var trackedPostpones = request.trackedPostpones;\n\n  if (trackedPostpones === null) {\n    return;\n  }\n\n  var boundaryKeyPath = boundary.trackedContentKeyPath;\n\n  if (boundaryKeyPath === null) {\n    return;\n  }\n\n  var boundaryNode = trackedPostpones.workingMap.get(boundaryKeyPath);\n\n  if (boundaryNode === undefined) {\n    return;\n  } // Downgrade to plain ReplayNode since we won't replay through it.\n  // $FlowFixMe[cannot-write]: We intentionally downgrade this to the other tuple.\n\n\n  boundaryNode.length = 4; // Remove any resumable slots.\n\n  boundaryNode[2] = [];\n  boundaryNode[3] = null; // TODO: We should really just remove the boundary from all parent paths too so\n  // we don't replay the path to it.\n}\n\nfunction spawnNewSuspendedReplayTask(request, task, thenableState, x) {\n  var newTask = createReplayTask(request, thenableState, task.replay, task.node, task.childIndex, task.blockedBoundary, task.hoistableState, task.abortSet, task.keyPath, task.formatContext, task.legacyContext, task.context, task.treeContext, // We pop one task off the stack because the node that suspended will be tried again,\n  // which will add it back onto the stack.\n  task.componentStack !== null ? task.componentStack.parent : null, task.isFallback);\n  var ping = newTask.ping;\n  x.then(ping, ping);\n}\n\nfunction spawnNewSuspendedRenderTask(request, task, thenableState, x) {\n  // Something suspended, we'll need to create a new segment and resolve it later.\n  var segment = task.blockedSegment;\n  var insertionIndex = segment.chunks.length;\n  var newSegment = createPendingSegment(request, insertionIndex, null, task.formatContext, // Adopt the parent segment's leading text embed\n  segment.lastPushedText, // Assume we are text embedded at the trailing edge\n  true);\n  segment.children.push(newSegment); // Reset lastPushedText for current Segment since the new Segment \"consumed\" it\n\n  segment.lastPushedText = false;\n  var newTask = createRenderTask(request, thenableState, task.node, task.childIndex, task.blockedBoundary, newSegment, task.hoistableState, task.abortSet, task.keyPath, task.formatContext, task.legacyContext, task.context, task.treeContext, // We pop one task off the stack because the node that suspended will be tried again,\n  // which will add it back onto the stack.\n  task.componentStack !== null ? task.componentStack.parent : null, task.isFallback);\n  var ping = newTask.ping;\n  x.then(ping, ping);\n} // This is a non-destructive form of rendering a node. If it suspends it spawns\n// a new task and restores the context of this task to what it was before.\n\n\nfunction renderNode(request, task, node, childIndex) {\n  // Snapshot the current context in case something throws to interrupt the\n  // process.\n  var previousFormatContext = task.formatContext;\n  var previousLegacyContext = task.legacyContext;\n  var previousContext = task.context;\n  var previousKeyPath = task.keyPath;\n  var previousTreeContext = task.treeContext;\n  var previousComponentStack = task.componentStack;\n  var x; // Store how much we've pushed at this point so we can reset it in case something\n  // suspended partially through writing something.\n\n  var segment = task.blockedSegment;\n\n  if (segment === null) {\n    // Replay\n    try {\n      return renderNodeDestructive(request, task, node, childIndex);\n    } catch (thrownValue) {\n      resetHooksState();\n      x = thrownValue === SuspenseException ? // This is a special type of exception used for Suspense. For historical\n      // reasons, the rest of the Suspense implementation expects the thrown\n      // value to be a thenable, because before `use` existed that was the\n      // (unstable) API for suspending. This implementation detail can change\n      // later, once we deprecate the old API in favor of `use`.\n      getSuspendedThenable() : thrownValue;\n\n      if (typeof x === 'object' && x !== null) {\n        // $FlowFixMe[method-unbinding]\n        if (typeof x.then === 'function') {\n          var wakeable = x;\n          var thenableState = getThenableStateAfterSuspending();\n          spawnNewSuspendedReplayTask(request, // $FlowFixMe: Refined.\n          task, thenableState, wakeable); // Restore the context. We assume that this will be restored by the inner\n          // functions in case nothing throws so we don't use \"finally\" here.\n\n          task.formatContext = previousFormatContext;\n          task.legacyContext = previousLegacyContext;\n          task.context = previousContext;\n          task.keyPath = previousKeyPath;\n          task.treeContext = previousTreeContext;\n          task.componentStack = previousComponentStack; // Restore all active ReactContexts to what they were before.\n\n          switchContext(previousContext);\n          return;\n        }\n      } // TODO: Abort any undiscovered Suspense boundaries in the ReplayNode.\n\n    }\n  } else {\n    // Render\n    var childrenLength = segment.children.length;\n    var chunkLength = segment.chunks.length;\n\n    try {\n      return renderNodeDestructive(request, task, node, childIndex);\n    } catch (thrownValue) {\n      resetHooksState(); // Reset the write pointers to where we started.\n\n      segment.children.length = childrenLength;\n      segment.chunks.length = chunkLength;\n      x = thrownValue === SuspenseException ? // This is a special type of exception used for Suspense. For historical\n      // reasons, the rest of the Suspense implementation expects the thrown\n      // value to be a thenable, because before `use` existed that was the\n      // (unstable) API for suspending. This implementation detail can change\n      // later, once we deprecate the old API in favor of `use`.\n      getSuspendedThenable() : thrownValue;\n\n      if (typeof x === 'object' && x !== null) {\n        // $FlowFixMe[method-unbinding]\n        if (typeof x.then === 'function') {\n          var _wakeable = x;\n\n          var _thenableState = getThenableStateAfterSuspending();\n\n          spawnNewSuspendedRenderTask(request, // $FlowFixMe: Refined.\n          task, _thenableState, _wakeable); // Restore the context. We assume that this will be restored by the inner\n          // functions in case nothing throws so we don't use \"finally\" here.\n\n          task.formatContext = previousFormatContext;\n          task.legacyContext = previousLegacyContext;\n          task.context = previousContext;\n          task.keyPath = previousKeyPath;\n          task.treeContext = previousTreeContext;\n          task.componentStack = previousComponentStack; // Restore all active ReactContexts to what they were before.\n\n          switchContext(previousContext);\n          return;\n        }\n      }\n    }\n  } // Restore the context. We assume that this will be restored by the inner\n  // functions in case nothing throws so we don't use \"finally\" here.\n\n\n  task.formatContext = previousFormatContext;\n  task.legacyContext = previousLegacyContext;\n  task.context = previousContext;\n  task.keyPath = previousKeyPath;\n  task.treeContext = previousTreeContext; // We intentionally do not restore the component stack on the error pathway\n  // Whatever handles the error needs to use this stack which is the location of the\n  // error. We must restore the stack wherever we handle this\n  // Restore all active ReactContexts to what they were before.\n\n  switchContext(previousContext);\n  throw x;\n}\n\nfunction erroredReplay(request, boundary, error, errorInfo, replayNodes, resumeSlots) {\n  // Erroring during a replay doesn't actually cause an error by itself because\n  // that component has already rendered. What causes the error is the resumable\n  // points that we did not yet finish which will be below the point of the reset.\n  // For example, if we're replaying a path to a Suspense boundary that is not done\n  // that doesn't error the parent Suspense boundary.\n  // This might be a bit strange that the error in a parent gets thrown at a child.\n  // We log it only once and reuse the digest.\n  var errorDigest;\n\n  {\n    errorDigest = logRecoverableError(request, error, errorInfo);\n  }\n\n  abortRemainingReplayNodes(request, boundary, replayNodes, resumeSlots, error, errorDigest, errorInfo);\n}\n\nfunction erroredTask(request, boundary, error, errorInfo) {\n  // Report the error to a global handler.\n  var errorDigest;\n\n  {\n    errorDigest = logRecoverableError(request, error, errorInfo);\n  }\n\n  if (boundary === null) {\n    fatalError(request, error);\n  } else {\n    boundary.pendingTasks--;\n\n    if (boundary.status !== CLIENT_RENDERED) {\n      boundary.status = CLIENT_RENDERED;\n      encodeErrorForBoundary(boundary, errorDigest, error, errorInfo);\n      untrackBoundary(request, boundary); // Regardless of what happens next, this boundary won't be displayed,\n      // so we can flush it, if the parent already flushed.\n\n      if (boundary.parentFlushed) {\n        // We don't have a preference where in the queue this goes since it's likely\n        // to error on the client anyway. However, intentionally client-rendered\n        // boundaries should be flushed earlier so that they can start on the client.\n        // We reuse the same queue for errors.\n        request.clientRenderedBoundaries.push(boundary);\n      }\n    }\n  }\n\n  request.allPendingTasks--;\n\n  if (request.allPendingTasks === 0) {\n    completeAll(request);\n  }\n}\n\nfunction abortTaskSoft(task) {\n  // This aborts task without aborting the parent boundary that it blocks.\n  // It's used for when we didn't need this task to complete the tree.\n  // If task was needed, then it should use abortTask instead.\n  var request = this;\n  var boundary = task.blockedBoundary;\n  var segment = task.blockedSegment;\n\n  if (segment !== null) {\n    segment.status = ABORTED;\n    finishedTask(request, boundary, segment);\n  }\n}\n\nfunction abortRemainingSuspenseBoundary(request, rootSegmentID, error, errorDigest, errorInfo) {\n  var resumedBoundary = createSuspenseBoundary(request, new Set());\n  resumedBoundary.parentFlushed = true; // We restore the same id of this boundary as was used during prerender.\n\n  resumedBoundary.rootSegmentID = rootSegmentID;\n  resumedBoundary.status = CLIENT_RENDERED;\n  var errorMessage = error;\n\n  {\n    var errorPrefix = 'The server did not finish this Suspense boundary: ';\n\n    if (error && typeof error.message === 'string') {\n      errorMessage = errorPrefix + error.message;\n    } else {\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      errorMessage = errorPrefix + String(error);\n    }\n  }\n\n  encodeErrorForBoundary(resumedBoundary, errorDigest, errorMessage, errorInfo);\n\n  if (resumedBoundary.parentFlushed) {\n    request.clientRenderedBoundaries.push(resumedBoundary);\n  }\n}\n\nfunction abortRemainingReplayNodes(request, boundary, nodes, slots, error, errorDigest, errorInfo) {\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n\n    if (node.length === 4) {\n      abortRemainingReplayNodes(request, boundary, node[2], node[3], error, errorDigest, errorInfo);\n    } else {\n      var boundaryNode = node;\n      var rootSegmentID = boundaryNode[5];\n      abortRemainingSuspenseBoundary(request, rootSegmentID, error, errorDigest, errorInfo);\n    }\n  } // Empty the set, since we've cleared it now.\n\n\n  nodes.length = 0;\n\n  if (slots !== null) {\n    // We had something still to resume in the parent boundary. We must trigger\n    // the error on the parent boundary since it's not able to complete.\n    if (boundary === null) {\n      throw new Error('We should not have any resumable nodes in the shell. ' + 'This is a bug in React.');\n    } else if (boundary.status !== CLIENT_RENDERED) {\n      boundary.status = CLIENT_RENDERED;\n      encodeErrorForBoundary(boundary, errorDigest, error, errorInfo);\n\n      if (boundary.parentFlushed) {\n        request.clientRenderedBoundaries.push(boundary);\n      }\n    } // Empty the set\n\n\n    if (typeof slots === 'object') {\n      for (var index in slots) {\n        delete slots[index];\n      }\n    }\n  }\n}\n\nfunction abortTask(task, request, error) {\n  // This aborts the task and aborts the parent that it blocks, putting it into\n  // client rendered mode.\n  var boundary = task.blockedBoundary;\n  var segment = task.blockedSegment;\n\n  if (segment !== null) {\n    segment.status = ABORTED;\n  }\n\n  if (boundary === null) {\n    var errorInfo = {};\n\n    if (request.status !== CLOSING && request.status !== CLOSED) {\n      var replay = task.replay;\n\n      if (replay === null) {\n        // We didn't complete the root so we have nothing to show. We can close\n        // the request;\n        {\n          logRecoverableError(request, error, errorInfo);\n          fatalError(request, error);\n        }\n\n        return;\n      } else {\n        // If the shell aborts during a replay, that's not a fatal error. Instead\n        // we should be able to recover by client rendering all the root boundaries in\n        // the ReplaySet.\n        replay.pendingTasks--;\n\n        if (replay.pendingTasks === 0 && replay.nodes.length > 0) {\n          var errorDigest;\n\n          {\n            errorDigest = logRecoverableError(request, error, errorInfo);\n          }\n\n          abortRemainingReplayNodes(request, null, replay.nodes, replay.slots, error, errorDigest, errorInfo);\n        }\n\n        request.pendingRootTasks--;\n\n        if (request.pendingRootTasks === 0) {\n          completeShell(request);\n        }\n      }\n    }\n  } else {\n    boundary.pendingTasks--;\n\n    if (boundary.status !== CLIENT_RENDERED) {\n      boundary.status = CLIENT_RENDERED; // We construct an errorInfo from the boundary's componentStack so the error in dev will indicate which\n      // boundary the message is referring to\n\n      var _errorInfo = getThrownInfo(request, task.componentStack);\n\n      var _errorDigest;\n\n      {\n        _errorDigest = logRecoverableError(request, error, _errorInfo);\n      }\n\n      var errorMessage = error;\n\n      {\n        var errorPrefix = 'The server did not finish this Suspense boundary: ';\n\n        if (error && typeof error.message === 'string') {\n          errorMessage = errorPrefix + error.message;\n        } else {\n          // eslint-disable-next-line react-internal/safe-string-coercion\n          errorMessage = errorPrefix + String(error);\n        }\n      }\n\n      encodeErrorForBoundary(boundary, _errorDigest, errorMessage, _errorInfo);\n      untrackBoundary(request, boundary);\n\n      if (boundary.parentFlushed) {\n        request.clientRenderedBoundaries.push(boundary);\n      }\n    } // If this boundary was still pending then we haven't already cancelled its fallbacks.\n    // We'll need to abort the fallbacks, which will also error that parent boundary.\n\n\n    boundary.fallbackAbortableTasks.forEach(function (fallbackTask) {\n      return abortTask(fallbackTask, request, error);\n    });\n    boundary.fallbackAbortableTasks.clear();\n  }\n\n  request.allPendingTasks--;\n\n  if (request.allPendingTasks === 0) {\n    completeAll(request);\n  }\n}\n\nfunction safelyEmitEarlyPreloads(request, shellComplete) {\n  try {\n    emitEarlyPreloads(request.renderState, request.resumableState, shellComplete);\n  } catch (error) {\n    // We assume preloads are optimistic and thus non-fatal if errored.\n    var errorInfo = {};\n    logRecoverableError(request, error, errorInfo);\n  }\n} // I extracted this function out because we want to ensure we consistently emit preloads before\n// transitioning to the next request stage and this transition can happen in multiple places in this\n// implementation.\n\n\nfunction completeShell(request) {\n  if (request.trackedPostpones === null) {\n    // We only emit early preloads on shell completion for renders. For prerenders\n    // we wait for the entire Request to finish because we are not responding to a\n    // live request and can wait for as much data as possible.\n    // we should only be calling completeShell when the shell is complete so we\n    // just use a literal here\n    var shellComplete = true;\n    safelyEmitEarlyPreloads(request, shellComplete);\n  } // We have completed the shell so the shell can't error anymore.\n\n\n  request.onShellError = noop;\n  var onShellReady = request.onShellReady;\n  onShellReady();\n} // I extracted this function out because we want to ensure we consistently emit preloads before\n// transitioning to the next request stage and this transition can happen in multiple places in this\n// implementation.\n\n\nfunction completeAll(request) {\n  // During a render the shell must be complete if the entire request is finished\n  // however during a Prerender it is possible that the shell is incomplete because\n  // it postponed. We cannot use rootPendingTasks in the prerender case because\n  // those hit zero even when the shell postpones. Instead we look at the completedRootSegment\n  var shellComplete = request.trackedPostpones === null ? // Render, we assume it is completed\n  true : // Prerender Request, we use the state of the root segment\n  request.completedRootSegment === null || request.completedRootSegment.status !== POSTPONED;\n  safelyEmitEarlyPreloads(request, shellComplete);\n  var onAllReady = request.onAllReady;\n  onAllReady();\n}\n\nfunction queueCompletedSegment(boundary, segment) {\n  if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null && segment.children[0].id === -1) {\n    // This is an empty segment. There's nothing to write, so we can instead transfer the ID\n    // to the child. That way any existing references point to the child.\n    var childSegment = segment.children[0];\n    childSegment.id = segment.id;\n    childSegment.parentFlushed = true;\n\n    if (childSegment.status === COMPLETED) {\n      queueCompletedSegment(boundary, childSegment);\n    }\n  } else {\n    var completedSegments = boundary.completedSegments;\n    completedSegments.push(segment);\n  }\n}\n\nfunction finishedTask(request, boundary, segment) {\n  if (boundary === null) {\n    if (segment !== null && segment.parentFlushed) {\n      if (request.completedRootSegment !== null) {\n        throw new Error('There can only be one root segment. This is a bug in React.');\n      }\n\n      request.completedRootSegment = segment;\n    }\n\n    request.pendingRootTasks--;\n\n    if (request.pendingRootTasks === 0) {\n      completeShell(request);\n    }\n  } else {\n    boundary.pendingTasks--;\n\n    if (boundary.status === CLIENT_RENDERED) ; else if (boundary.pendingTasks === 0) {\n      if (boundary.status === PENDING) {\n        boundary.status = COMPLETED;\n      } // This must have been the last segment we were waiting on. This boundary is now complete.\n\n\n      if (segment !== null && segment.parentFlushed) {\n        // Our parent segment already flushed, so we need to schedule this segment to be emitted.\n        // If it is a segment that was aborted, we'll write other content instead so we don't need\n        // to emit it.\n        if (segment.status === COMPLETED) {\n          queueCompletedSegment(boundary, segment);\n        }\n      }\n\n      if (boundary.parentFlushed) {\n        // The segment might be part of a segment that didn't flush yet, but if the boundary's\n        // parent flushed, we need to schedule the boundary to be emitted.\n        request.completedBoundaries.push(boundary);\n      } // We can now cancel any pending task on the fallback since we won't need to show it anymore.\n      // This needs to happen after we read the parentFlushed flags because aborting can finish\n      // work which can trigger user code, which can start flushing, which can change those flags.\n      // If the boundary was POSTPONED, we still need to finish the fallback first.\n\n\n      if (boundary.status === COMPLETED) {\n        boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);\n        boundary.fallbackAbortableTasks.clear();\n      }\n    } else {\n      if (segment !== null && segment.parentFlushed) {\n        // Our parent already flushed, so we need to schedule this segment to be emitted.\n        // If it is a segment that was aborted, we'll write other content instead so we don't need\n        // to emit it.\n        if (segment.status === COMPLETED) {\n          queueCompletedSegment(boundary, segment);\n          var completedSegments = boundary.completedSegments;\n\n          if (completedSegments.length === 1) {\n            // This is the first time since we last flushed that we completed anything.\n            // We can schedule this boundary to emit its partially completed segments early\n            // in case the parent has already been flushed.\n            if (boundary.parentFlushed) {\n              request.partialBoundaries.push(boundary);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  request.allPendingTasks--;\n\n  if (request.allPendingTasks === 0) {\n    completeAll(request);\n  }\n}\n\nfunction retryTask(request, task) {\n  var segment = task.blockedSegment;\n\n  if (segment === null) {\n    retryReplayTask(request, // $FlowFixMe: Refined.\n    task);\n  } else {\n    retryRenderTask(request, // $FlowFixMe: Refined.\n    task, segment);\n  }\n}\n\nfunction retryRenderTask(request, task, segment) {\n  if (segment.status !== PENDING) {\n    // We completed this by other means before we had a chance to retry it.\n    return;\n  } // We restore the context to what it was when we suspended.\n  // We don't restore it after we leave because it's likely that we'll end up\n  // needing a very similar context soon again.\n\n\n  switchContext(task.context);\n  var prevTaskInDEV = null;\n\n  {\n    prevTaskInDEV = currentTaskInDEV;\n    currentTaskInDEV = task;\n  }\n\n  var childrenLength = segment.children.length;\n  var chunkLength = segment.chunks.length;\n\n  try {\n    // We call the destructive form that mutates this task. That way if something\n    // suspends again, we can reuse the same task instead of spawning a new one.\n    renderNodeDestructive(request, task, task.node, task.childIndex);\n    pushSegmentFinale(segment.chunks, request.renderState, segment.lastPushedText, segment.textEmbedded);\n    task.abortSet.delete(task);\n    segment.status = COMPLETED;\n    finishedTask(request, task.blockedBoundary, segment);\n  } catch (thrownValue) {\n    resetHooksState(); // Reset the write pointers to where we started.\n\n    segment.children.length = childrenLength;\n    segment.chunks.length = chunkLength;\n    var x = thrownValue === SuspenseException ? // This is a special type of exception used for Suspense. For historical\n    // reasons, the rest of the Suspense implementation expects the thrown\n    // value to be a thenable, because before `use` existed that was the\n    // (unstable) API for suspending. This implementation detail can change\n    // later, once we deprecate the old API in favor of `use`.\n    getSuspendedThenable() : thrownValue;\n\n    if (typeof x === 'object' && x !== null) {\n      // $FlowFixMe[method-unbinding]\n      if (typeof x.then === 'function') {\n        // Something suspended again, let's pick it back up later.\n        var ping = task.ping;\n        x.then(ping, ping);\n        task.thenableState = getThenableStateAfterSuspending();\n        return;\n      }\n    }\n\n    var errorInfo = getThrownInfo(request, task.componentStack);\n    task.abortSet.delete(task);\n    segment.status = ERRORED;\n    erroredTask(request, task.blockedBoundary, x, errorInfo);\n    return;\n  } finally {\n    {\n      currentTaskInDEV = prevTaskInDEV;\n    }\n  }\n}\n\nfunction retryReplayTask(request, task) {\n  if (task.replay.pendingTasks === 0) {\n    // There are no pending tasks working on this set, so we must have aborted.\n    return;\n  } // We restore the context to what it was when we suspended.\n  // We don't restore it after we leave because it's likely that we'll end up\n  // needing a very similar context soon again.\n\n\n  switchContext(task.context);\n  var prevTaskInDEV = null;\n\n  {\n    prevTaskInDEV = currentTaskInDEV;\n    currentTaskInDEV = task;\n  }\n\n  try {\n    // We call the destructive form that mutates this task. That way if something\n    // suspends again, we can reuse the same task instead of spawning a new one.\n    renderNodeDestructive(request, task, task.node, task.childIndex);\n\n    if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {\n      throw new Error(\"Couldn't find all resumable slots by key/index during replaying. \" + \"The tree doesn't match so React will fallback to client rendering.\");\n    }\n\n    task.replay.pendingTasks--;\n    task.abortSet.delete(task);\n    finishedTask(request, task.blockedBoundary, null);\n  } catch (thrownValue) {\n    resetHooksState();\n    var x = thrownValue === SuspenseException ? // This is a special type of exception used for Suspense. For historical\n    // reasons, the rest of the Suspense implementation expects the thrown\n    // value to be a thenable, because before `use` existed that was the\n    // (unstable) API for suspending. This implementation detail can change\n    // later, once we deprecate the old API in favor of `use`.\n    getSuspendedThenable() : thrownValue;\n\n    if (typeof x === 'object' && x !== null) {\n      // $FlowFixMe[method-unbinding]\n      if (typeof x.then === 'function') {\n        // Something suspended again, let's pick it back up later.\n        var ping = task.ping;\n        x.then(ping, ping);\n        task.thenableState = getThenableStateAfterSuspending();\n        return;\n      }\n    }\n\n    task.replay.pendingTasks--;\n    task.abortSet.delete(task);\n    var errorInfo = getThrownInfo(request, task.componentStack);\n    erroredReplay(request, task.blockedBoundary, x, errorInfo, task.replay.nodes, task.replay.slots);\n    request.pendingRootTasks--;\n\n    if (request.pendingRootTasks === 0) {\n      completeShell(request);\n    }\n\n    request.allPendingTasks--;\n\n    if (request.allPendingTasks === 0) {\n      completeAll(request);\n    }\n\n    return;\n  } finally {\n    {\n      currentTaskInDEV = prevTaskInDEV;\n    }\n  }\n}\n\nfunction performWork(request) {\n  if (request.status === CLOSED) {\n    return;\n  }\n\n  var prevContext = getActiveContext();\n  var prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = HooksDispatcher;\n  var prevCacheDispatcher;\n\n  {\n    prevCacheDispatcher = ReactCurrentCache.current;\n    ReactCurrentCache.current = DefaultCacheDispatcher;\n  }\n\n  var prevRequest = currentRequest;\n  currentRequest = request;\n  var prevGetCurrentStackImpl;\n\n  {\n    prevGetCurrentStackImpl = ReactDebugCurrentFrame.getCurrentStack;\n    ReactDebugCurrentFrame.getCurrentStack = getCurrentStackInDEV;\n  }\n\n  var prevResumableState = currentResumableState;\n  setCurrentResumableState(request.resumableState);\n\n  try {\n    var pingedTasks = request.pingedTasks;\n    var i;\n\n    for (i = 0; i < pingedTasks.length; i++) {\n      var task = pingedTasks[i];\n      retryTask(request, task);\n    }\n\n    pingedTasks.splice(0, i);\n\n    if (request.destination !== null) {\n      flushCompletedQueues(request, request.destination);\n    }\n  } catch (error) {\n    var errorInfo = {};\n    logRecoverableError(request, error, errorInfo);\n    fatalError(request, error);\n  } finally {\n    setCurrentResumableState(prevResumableState);\n    ReactCurrentDispatcher.current = prevDispatcher;\n\n    {\n      ReactCurrentCache.current = prevCacheDispatcher;\n    }\n\n    {\n      ReactDebugCurrentFrame.getCurrentStack = prevGetCurrentStackImpl;\n    }\n\n    if (prevDispatcher === HooksDispatcher) {\n      // This means that we were in a reentrant work loop. This could happen\n      // in a renderer that supports synchronous work like renderToString,\n      // when it's called from within another renderer.\n      // Normally we don't bother switching the contexts to their root/default\n      // values when leaving because we'll likely need the same or similar\n      // context again. However, when we're inside a synchronous loop like this\n      // we'll to restore the context to what it was before returning.\n      switchContext(prevContext);\n    }\n\n    currentRequest = prevRequest;\n  }\n}\n\nfunction flushPreamble(request, destination, rootSegment) {\n  var willFlushAllSegments = request.allPendingTasks === 0 && request.trackedPostpones === null;\n  writePreamble(destination, request.resumableState, request.renderState, willFlushAllSegments);\n}\n\nfunction flushSubtree(request, destination, segment, hoistableState) {\n  segment.parentFlushed = true;\n\n  switch (segment.status) {\n    case PENDING:\n      {\n        // We're emitting a placeholder for this segment to be filled in later.\n        // Therefore we'll need to assign it an ID - to refer to it by.\n        segment.id = request.nextSegmentId++; // Fallthrough\n      }\n\n    case POSTPONED:\n      {\n        var segmentID = segment.id; // When this segment finally completes it won't be embedded in text since it will flush separately\n\n        segment.lastPushedText = false;\n        segment.textEmbedded = false;\n        return writePlaceholder(destination, request.renderState, segmentID);\n      }\n\n    case COMPLETED:\n      {\n        segment.status = FLUSHED;\n        var r = true;\n        var chunks = segment.chunks;\n        var chunkIdx = 0;\n        var children = segment.children;\n\n        for (var childIdx = 0; childIdx < children.length; childIdx++) {\n          var nextChild = children[childIdx]; // Write all the chunks up until the next child.\n\n          for (; chunkIdx < nextChild.index; chunkIdx++) {\n            writeChunk(destination, chunks[chunkIdx]);\n          }\n\n          r = flushSegment(request, destination, nextChild, hoistableState);\n        } // Finally just write all the remaining chunks\n\n\n        for (; chunkIdx < chunks.length - 1; chunkIdx++) {\n          writeChunk(destination, chunks[chunkIdx]);\n        }\n\n        if (chunkIdx < chunks.length) {\n          r = writeChunkAndReturn(destination, chunks[chunkIdx]);\n        }\n\n        return r;\n      }\n\n    default:\n      {\n        throw new Error('Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.');\n      }\n  }\n}\n\nfunction flushSegment(request, destination, segment, hoistableState) {\n  var boundary = segment.boundary;\n\n  if (boundary === null) {\n    // Not a suspense boundary.\n    return flushSubtree(request, destination, segment, hoistableState);\n  }\n\n  boundary.parentFlushed = true; // This segment is a Suspense boundary. We need to decide whether to\n  // emit the content or the fallback now.\n\n  if (boundary.status === CLIENT_RENDERED) {\n    // Emit a client rendered suspense boundary wrapper.\n    // We never queue the inner boundary so we'll never emit its content or partial segments.\n    writeStartClientRenderedSuspenseBoundary(destination, request.renderState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack); // Flush the fallback.\n\n    flushSubtree(request, destination, segment, hoistableState);\n    return writeEndClientRenderedSuspenseBoundary(destination);\n  } else if (boundary.status !== COMPLETED) {\n    if (boundary.status === PENDING) {\n      // For pending boundaries we lazily assign an ID to the boundary\n      // and root segment.\n      boundary.rootSegmentID = request.nextSegmentId++;\n    }\n\n    if (boundary.completedSegments.length > 0) {\n      // If this is at least partially complete, we can queue it to be partially emitted early.\n      request.partialBoundaries.push(boundary);\n    } // This boundary is still loading. Emit a pending suspense boundary wrapper.\n\n\n    var id = boundary.rootSegmentID;\n    writeStartPendingSuspenseBoundary(destination, request.renderState, id); // We are going to flush the fallback so we need to hoist the fallback\n    // state to the parent boundary\n\n    {\n      if (hoistableState) {\n        hoistHoistables(hoistableState, boundary.fallbackState);\n      }\n    } // Flush the fallback.\n\n\n    flushSubtree(request, destination, segment, hoistableState);\n    return writeEndPendingSuspenseBoundary(destination);\n  } else if (boundary.byteSize > request.progressiveChunkSize) {\n    // This boundary is large and will be emitted separately so that we can progressively show\n    // other content. We add it to the queue during the flush because we have to ensure that\n    // the parent flushes first so that there's something to inject it into.\n    // We also have to make sure that it's emitted into the queue in a deterministic slot.\n    // I.e. we can't insert it here when it completes.\n    // Assign an ID to refer to the future content by.\n    boundary.rootSegmentID = request.nextSegmentId++;\n    request.completedBoundaries.push(boundary); // Emit a pending rendered suspense boundary wrapper.\n\n    writeStartPendingSuspenseBoundary(destination, request.renderState, boundary.rootSegmentID); // While we are going to flush the fallback we are going to follow it up with\n    // the completed boundary immediately so we make the choice to omit fallback\n    // boundary state from the parent since it will be replaced when the boundary\n    // flushes later in this pass or in a future flush\n    // Flush the fallback.\n\n    flushSubtree(request, destination, segment, hoistableState);\n    return writeEndPendingSuspenseBoundary(destination);\n  } else {\n    {\n      if (hoistableState) {\n        hoistHoistables(hoistableState, boundary.contentState);\n      }\n    } // We can inline this boundary's content as a complete boundary.\n\n\n    writeStartCompletedSuspenseBoundary(destination);\n    var completedSegments = boundary.completedSegments;\n\n    if (completedSegments.length !== 1) {\n      throw new Error('A previously unvisited boundary must have exactly one root segment. This is a bug in React.');\n    }\n\n    var contentSegment = completedSegments[0];\n    flushSegment(request, destination, contentSegment, hoistableState);\n    return writeEndCompletedSuspenseBoundary(destination);\n  }\n}\n\nfunction flushClientRenderedBoundary(request, destination, boundary) {\n  return writeClientRenderBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);\n}\n\nfunction flushSegmentContainer(request, destination, segment, hoistableState) {\n  writeStartSegment(destination, request.renderState, segment.parentFormatContext, segment.id);\n  flushSegment(request, destination, segment, hoistableState);\n  return writeEndSegment(destination, segment.parentFormatContext);\n}\n\nfunction flushCompletedBoundary(request, destination, boundary) {\n  var completedSegments = boundary.completedSegments;\n  var i = 0;\n\n  for (; i < completedSegments.length; i++) {\n    var segment = completedSegments[i];\n    flushPartiallyCompletedSegment(request, destination, boundary, segment);\n  }\n\n  completedSegments.length = 0;\n\n  {\n    writeHoistablesForBoundary(destination, boundary.contentState, request.renderState);\n  }\n\n  return writeCompletedBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.contentState);\n}\n\nfunction flushPartialBoundary(request, destination, boundary) {\n  var completedSegments = boundary.completedSegments;\n  var i = 0;\n\n  for (; i < completedSegments.length; i++) {\n    var segment = completedSegments[i];\n\n    if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {\n      i++;\n      completedSegments.splice(0, i); // Only write as much as the buffer wants. Something higher priority\n      // might want to write later.\n\n      return false;\n    }\n  }\n\n  completedSegments.splice(0, i);\n\n  {\n    return writeHoistablesForBoundary(destination, boundary.contentState, request.renderState);\n  }\n}\n\nfunction flushPartiallyCompletedSegment(request, destination, boundary, segment) {\n  if (segment.status === FLUSHED) {\n    // We've already flushed this inline.\n    return true;\n  }\n\n  var hoistableState = boundary.contentState;\n  var segmentID = segment.id;\n\n  if (segmentID === -1) {\n    // This segment wasn't previously referred to. This happens at the root of\n    // a boundary. We make kind of a leap here and assume this is the root.\n    var rootSegmentID = segment.id = boundary.rootSegmentID;\n\n    if (rootSegmentID === -1) {\n      throw new Error('A root segment ID must have been assigned by now. This is a bug in React.');\n    }\n\n    return flushSegmentContainer(request, destination, segment, hoistableState);\n  } else if (segmentID === boundary.rootSegmentID) {\n    // When we emit postponed boundaries, we might have assigned the ID already\n    // but it's still the root segment so we can't inject it into the parent yet.\n    return flushSegmentContainer(request, destination, segment, hoistableState);\n  } else {\n    flushSegmentContainer(request, destination, segment, hoistableState);\n    return writeCompletedSegmentInstruction(destination, request.resumableState, request.renderState, segmentID);\n  }\n}\n\nfunction flushCompletedQueues(request, destination) {\n  beginWriting();\n\n  try {\n    // The structure of this is to go through each queue one by one and write\n    // until the sink tells us to stop. When we should stop, we still finish writing\n    // that item fully and then yield. At that point we remove the already completed\n    // items up until the point we completed them.\n    var i;\n    var completedRootSegment = request.completedRootSegment;\n\n    if (completedRootSegment !== null) {\n      if (completedRootSegment.status === POSTPONED) {\n        // We postponed the root, so we write nothing.\n        return;\n      } else if (request.pendingRootTasks === 0) {\n        if (enableFloat) {\n          flushPreamble(request, destination, completedRootSegment);\n        }\n\n        flushSegment(request, destination, completedRootSegment, null);\n        request.completedRootSegment = null;\n        writeCompletedRoot(destination, request.renderState);\n      } else {\n        // We haven't flushed the root yet so we don't need to check any other branches further down\n        return;\n      }\n    }\n\n    if (enableFloat) {\n      writeHoistables(destination, request.resumableState, request.renderState);\n    } // We emit client rendering instructions for already emitted boundaries first.\n    // This is so that we can signal to the client to start client rendering them as\n    // soon as possible.\n\n\n    var clientRenderedBoundaries = request.clientRenderedBoundaries;\n\n    for (i = 0; i < clientRenderedBoundaries.length; i++) {\n      var boundary = clientRenderedBoundaries[i];\n\n      if (!flushClientRenderedBoundary(request, destination, boundary)) {\n        request.destination = null;\n        i++;\n        clientRenderedBoundaries.splice(0, i);\n        return;\n      }\n    }\n\n    clientRenderedBoundaries.splice(0, i); // Next we emit any complete boundaries. It's better to favor boundaries\n    // that are completely done since we can actually show them, than it is to emit\n    // any individual segments from a partially complete boundary.\n\n    var completedBoundaries = request.completedBoundaries;\n\n    for (i = 0; i < completedBoundaries.length; i++) {\n      var _boundary = completedBoundaries[i];\n\n      if (!flushCompletedBoundary(request, destination, _boundary)) {\n        request.destination = null;\n        i++;\n        completedBoundaries.splice(0, i);\n        return;\n      }\n    }\n\n    completedBoundaries.splice(0, i); // Allow anything written so far to flush to the underlying sink before\n    // we continue with lower priorities.\n\n    completeWriting(destination);\n    beginWriting(destination); // TODO: Here we'll emit data used by hydration.\n    // Next we emit any segments of any boundaries that are partially complete\n    // but not deeply complete.\n\n    var partialBoundaries = request.partialBoundaries;\n\n    for (i = 0; i < partialBoundaries.length; i++) {\n      var _boundary2 = partialBoundaries[i];\n\n      if (!flushPartialBoundary(request, destination, _boundary2)) {\n        request.destination = null;\n        i++;\n        partialBoundaries.splice(0, i);\n        return;\n      }\n    }\n\n    partialBoundaries.splice(0, i); // Next we check the completed boundaries again. This may have had\n    // boundaries added to it in case they were too larged to be inlined.\n    // New ones might be added in this loop.\n\n    var largeBoundaries = request.completedBoundaries;\n\n    for (i = 0; i < largeBoundaries.length; i++) {\n      var _boundary3 = largeBoundaries[i];\n\n      if (!flushCompletedBoundary(request, destination, _boundary3)) {\n        request.destination = null;\n        i++;\n        largeBoundaries.splice(0, i);\n        return;\n      }\n    }\n\n    largeBoundaries.splice(0, i);\n  } finally {\n    if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 // We don't need to check any partially completed segments because\n    // either they have pending task or they're complete.\n    ) {\n        request.flushScheduled = false;\n\n        {\n          // We write the trailing tags but only if don't have any data to resume.\n          // If we need to resume we'll write the postamble in the resume instead.\n          {\n            writePostamble(destination, request.resumableState);\n          }\n        }\n\n        completeWriting(destination);\n        flushBuffered(destination);\n\n        {\n          if (request.abortableTasks.size !== 0) {\n            error('There was still abortable task at the root when we closed. This is a bug in React.');\n          }\n        } // We're done.\n\n\n        close(destination); // We need to stop flowing now because we do not want any async contexts which might call\n        // float methods to initiate any flushes after this point\n\n        stopFlowing(request);\n      } else {\n      completeWriting(destination);\n      flushBuffered(destination);\n    }\n  }\n}\n\nfunction startWork(request) {\n  request.flushScheduled = request.destination !== null;\n\n  {\n    scheduleWork(function () {\n      return requestStorage.run(request, performWork, request);\n    });\n  }\n\n  if (request.trackedPostpones === null) {\n    // this is either a regular render or a resume. For regular render we want\n    // to call emitEarlyPreloads after the first performWork because we want\n    // are responding to a live request and need to balance sending something early\n    // (i.e. don't want for the shell to finish) but we need something to send.\n    // The only implementation of this is for DOM at the moment and during resumes nothing\n    // actually emits but the code paths here are the same.\n    // During a prerender we don't want to be too aggressive in emitting early preloads\n    // because we aren't responding to a live request and we can wait for the prerender to\n    // postpone before we emit anything.\n    {\n      scheduleWork(function () {\n        return requestStorage.run(request, enqueueEarlyPreloadsAfterInitialWork, request);\n      });\n    }\n  }\n}\n\nfunction enqueueEarlyPreloadsAfterInitialWork(request) {\n  var shellComplete = request.pendingRootTasks === 0;\n  safelyEmitEarlyPreloads(request, shellComplete);\n}\n\nfunction enqueueFlush(request) {\n  if (request.flushScheduled === false && // If there are pinged tasks we are going to flush anyway after work completes\n  request.pingedTasks.length === 0 && // If there is no destination there is nothing we can flush to. A flush will\n  // happen when we start flowing again\n  request.destination !== null) {\n    request.flushScheduled = true;\n    scheduleWork(function () {\n      // We need to existence check destination again here because it might go away\n      // in between the enqueueFlush call and the work execution\n      var destination = request.destination;\n\n      if (destination) {\n        flushCompletedQueues(request, destination);\n      } else {\n        request.flushScheduled = false;\n      }\n    });\n  }\n} // This function is intented to only be called during the pipe function for the Node builds.\n// The reason we need this is because `renderToPipeableStream` is the only API which allows\n// you to start flowing before the shell is complete and we've had a chance to emit early\n// preloads already. This is really just defensive programming to ensure that we give hosts an\n// opportunity to flush early preloads before streaming begins in case they are in an environment\n// that only supports a single call to emitEarlyPreloads like the DOM renderers. It's unfortunate\n// to put this Node only function directly in ReactFizzServer but it'd be more ackward to factor it\n// by moving the implementation into ReactServerStreamConfigNode and even then we may not be able to\n// eliminate all the wasted branching.\n\n\nfunction prepareForStartFlowingIfBeforeAllReady(request) {\n  var shellComplete = request.trackedPostpones === null ? // Render Request, we define shell complete by the pending root tasks\n  request.pendingRootTasks === 0 : // Prerender Request, we define shell complete by completedRootSegemtn\n  request.completedRootSegment === null ? request.pendingRootTasks === 0 : request.completedRootSegment.status !== POSTPONED;\n  safelyEmitEarlyPreloads(request, shellComplete);\n}\nfunction startFlowing(request, destination) {\n  if (request.status === CLOSING) {\n    request.status = CLOSED;\n    closeWithError(destination, request.fatalError);\n    return;\n  }\n\n  if (request.status === CLOSED) {\n    return;\n  }\n\n  if (request.destination !== null) {\n    // We're already flowing.\n    return;\n  }\n\n  request.destination = destination;\n\n  try {\n    flushCompletedQueues(request, destination);\n  } catch (error) {\n    var errorInfo = {};\n    logRecoverableError(request, error, errorInfo);\n    fatalError(request, error);\n  }\n}\nfunction stopFlowing(request) {\n  request.destination = null;\n} // This is called to early terminate a request. It puts all pending boundaries in client rendered state.\n\nfunction abort(request, reason) {\n  try {\n    var abortableTasks = request.abortableTasks;\n\n    if (abortableTasks.size > 0) {\n      var error = reason === undefined ? new Error('The render was aborted by the server without a reason.') : reason;\n      abortableTasks.forEach(function (task) {\n        return abortTask(task, request, error);\n      });\n      abortableTasks.clear();\n    }\n\n    if (request.destination !== null) {\n      flushCompletedQueues(request, request.destination);\n    }\n  } catch (error) {\n    var errorInfo = {};\n    logRecoverableError(request, error, errorInfo);\n    fatalError(request, error);\n  }\n}\nfunction flushResources(request) {\n  enqueueFlush(request);\n}\nfunction getFormState(request) {\n  return request.formState;\n}\nfunction getResumableState(request) {\n  return request.resumableState;\n}\nfunction getRenderState(request) {\n  return request.renderState;\n}\n\nfunction createDrainHandler(destination, request) {\n  return function () {\n    return startFlowing(request, destination);\n  };\n}\n\nfunction createCancelHandler(request, reason) {\n  return function () {\n    stopFlowing(request); // eslint-disable-next-line react-internal/prod-error-codes\n\n    abort(request, new Error(reason));\n  };\n}\n\nfunction createRequestImpl(children, options) {\n  var resumableState = createResumableState(options ? options.identifierPrefix : undefined, options ? options.unstable_externalRuntimeSrc : undefined, options ? options.bootstrapScriptContent : undefined, options ? options.bootstrapScripts : undefined, options ? options.bootstrapModules : undefined);\n  return createRequest(children, resumableState, createRenderState(resumableState, options ? options.nonce : undefined, options ? options.unstable_externalRuntimeSrc : undefined, options ? options.importMap : undefined, options ? options.onHeaders : undefined, options ? options.maxHeadersLength : undefined), createRootFormatContext(options ? options.namespaceURI : undefined), options ? options.progressiveChunkSize : undefined, options ? options.onError : undefined, options ? options.onAllReady : undefined, options ? options.onShellReady : undefined, options ? options.onShellError : undefined, undefined, options ? options.onPostpone : undefined, options ? options.formState : undefined);\n}\n\nfunction renderToPipeableStream(children, options) {\n  var request = createRequestImpl(children, options);\n  var hasStartedFlowing = false;\n  startWork(request);\n  return {\n    pipe: function (destination) {\n      if (hasStartedFlowing) {\n        throw new Error('React currently only supports piping to one writable stream.');\n      }\n\n      hasStartedFlowing = true;\n      prepareForStartFlowingIfBeforeAllReady(request);\n      startFlowing(request, destination);\n      destination.on('drain', createDrainHandler(destination, request));\n      destination.on('error', createCancelHandler(request, 'The destination stream errored while writing data.'));\n      destination.on('close', createCancelHandler(request, 'The destination stream closed early.'));\n      return destination;\n    },\n    abort: function (reason) {\n      abort(request, reason);\n    }\n  };\n}\n\nexports.renderToPipeableStream = renderToPipeableStream;\nexports.version = ReactVersion;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.node.development.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react-dom/server.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/server.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports = __webpack_require__(/*! ./server.node */ \"(rsc)/./node_modules/next/dist/compiled/react-dom/server.node.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LWRvbS9zZXJ2ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsNkhBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlzdGVyeW1lc3NhZ2UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LWRvbS9zZXJ2ZXIuanM/ODY4NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zZXJ2ZXIubm9kZScpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react-dom/server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react-dom/server.node.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/server.node.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar l, s;\nif (false) {} else {\n  l = __webpack_require__(/*! ./cjs/react-dom-server-legacy.node.development.js */ \"(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-legacy.node.development.js\");\n  s = __webpack_require__(/*! ./cjs/react-dom-server.node.development.js */ \"(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.node.development.js\");\n}\n\nexports.version = l.version;\nexports.renderToString = l.renderToString;\nexports.renderToStaticMarkup = l.renderToStaticMarkup;\nexports.renderToNodeStream = l.renderToNodeStream;\nexports.renderToStaticNodeStream = l.renderToStaticNodeStream;\nexports.renderToPipeableStream = s.renderToPipeableStream;\nif (s.resumeToPipeableStream) {\n  exports.resumeToPipeableStream = s.resumeToPipeableStream;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LWRvbS9zZXJ2ZXIubm9kZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLElBQUksS0FBcUMsRUFBRSxFQUcxQyxDQUFDO0FBQ0YsTUFBTSxtQkFBTyxDQUFDLDRKQUFtRDtBQUNqRSxNQUFNLG1CQUFPLENBQUMsOElBQTRDO0FBQzFEOztBQUVBLGVBQWU7QUFDZixzQkFBc0I7QUFDdEIsNEJBQTRCO0FBQzVCLDBCQUEwQjtBQUMxQixnQ0FBZ0M7QUFDaEMsOEJBQThCO0FBQzlCO0FBQ0EsRUFBRSw4QkFBOEI7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teXN0ZXJ5bWVzc2FnZS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QtZG9tL3NlcnZlci5ub2RlLmpzPzc1ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbCwgcztcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGwgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20tc2VydmVyLWxlZ2FjeS5ub2RlLnByb2R1Y3Rpb24ubWluLmpzJyk7XG4gIHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20tc2VydmVyLm5vZGUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIGwgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20tc2VydmVyLWxlZ2FjeS5ub2RlLmRldmVsb3BtZW50LmpzJyk7XG4gIHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20tc2VydmVyLm5vZGUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cblxuZXhwb3J0cy52ZXJzaW9uID0gbC52ZXJzaW9uO1xuZXhwb3J0cy5yZW5kZXJUb1N0cmluZyA9IGwucmVuZGVyVG9TdHJpbmc7XG5leHBvcnRzLnJlbmRlclRvU3RhdGljTWFya3VwID0gbC5yZW5kZXJUb1N0YXRpY01hcmt1cDtcbmV4cG9ydHMucmVuZGVyVG9Ob2RlU3RyZWFtID0gbC5yZW5kZXJUb05vZGVTdHJlYW07XG5leHBvcnRzLnJlbmRlclRvU3RhdGljTm9kZVN0cmVhbSA9IGwucmVuZGVyVG9TdGF0aWNOb2RlU3RyZWFtO1xuZXhwb3J0cy5yZW5kZXJUb1BpcGVhYmxlU3RyZWFtID0gcy5yZW5kZXJUb1BpcGVhYmxlU3RyZWFtO1xuaWYgKHMucmVzdW1lVG9QaXBlYWJsZVN0cmVhbSkge1xuICBleHBvcnRzLnJlc3VtZVRvUGlwZWFibGVTdHJlYW0gPSBzLnJlc3VtZVRvUGlwZWFibGVTdHJlYW07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react-dom/server.node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react/cjs/react.development.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react.development.js ***!
  \************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * @license React\n * react.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var ReactVersion = '18.3.0-canary-14898b6a9-20240318';\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\n/**\n * Keeps track of the current dispatcher.\n */\nvar ReactCurrentDispatcher$1 = {\n  current: null\n};\n\n/**\n * Keeps track of the current Cache dispatcher.\n */\nvar ReactCurrentCache = {\n  current: null\n};\n\n/**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */\nvar ReactCurrentBatchConfig = {\n  transition: null\n};\n\nvar ReactCurrentActQueue = {\n  current: null,\n  // Used to reproduce behavior of `batchedUpdates` in legacy mode.\n  isBatchingLegacy: false,\n  didScheduleLegacyUpdate: false,\n  // Tracks whether something called `use` during the current batch of work.\n  // Determines whether we should yield to microtasks to unwrap already resolved\n  // promises without suspending.\n  didUsePromise: false\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner$1 = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar ReactDebugCurrentFrame$1 = {};\nvar currentExtraStackFrame = null;\n\n{\n  ReactDebugCurrentFrame$1.setExtraStackFrame = function (stack) {\n    {\n      currentExtraStackFrame = stack;\n    }\n  }; // Stack implementation injected by the current renderer.\n\n\n  ReactDebugCurrentFrame$1.getCurrentStack = null;\n\n  ReactDebugCurrentFrame$1.getStackAddendum = function () {\n    var stack = ''; // Add an extra top frame while an element is being validated\n\n    if (currentExtraStackFrame) {\n      stack += currentExtraStackFrame;\n    } // Delegate to the injected renderer-specific implementation\n\n\n    var impl = ReactDebugCurrentFrame$1.getCurrentStack;\n\n    if (impl) {\n      stack += impl() || '';\n    }\n\n    return stack;\n  };\n}\n\nvar ReactSharedInternals = {\n  ReactCurrentDispatcher: ReactCurrentDispatcher$1,\n  ReactCurrentCache: ReactCurrentCache,\n  ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n  ReactCurrentOwner: ReactCurrentOwner$1\n};\n\n{\n  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame$1;\n  ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;\n}\n\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      printWarning('warn', format, args);\n    }\n  }\n}\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\nvar didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey = componentName + \".\" + callerName;\n\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n\n    error(\"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n/**\n * This is the abstract API for an update queue.\n */\n\n\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nvar assign = Object.assign;\n\nvar emptyObject = {};\n\n{\n  Object.freeze(emptyObject);\n}\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {\n    throw new Error('takes an object of state variables to update or a ' + 'function which returns an object of state variables.');\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n\n\n{\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  var defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n\n        return undefined;\n      }\n    });\n  };\n\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = Component.prototype;\n/**\n * Convenience component with default shallow equality check for sCU.\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\nassign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject = {\n    current: null\n  };\n\n  {\n    Object.seal(refObject);\n  }\n\n  return refObject;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nvar enableRenderableContext = false;\n// Ready for next major.\n//\n// Alias __NEXT_MAJOR__ to false for easier skimming.\n// -----------------------------------------------------------------------------\n\nvar __NEXT_MAJOR__ = false; // Not ready to break experimental yet.\n// as a normal prop instead of stripping it from the props object.\n// Passes `ref` as a normal prop instead of stripping it from the props object\n// during element creation.\n\nvar enableRefAsProp = __NEXT_MAJOR__; // Not ready to break experimental yet.\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || enableRenderableContext  || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n\n          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  var ref;\n\n  {\n    ref = _ref;\n  }\n\n  var element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // debugInfo contains Server Component debug information.\n\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\n\nfunction createElement(type, config, children) {\n  {\n    if (!isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    } else {\n      // This is a valid element type.\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      for (var i = 2; i < arguments.length; i++) {\n        validateChildKeys(arguments[i], type);\n      }\n    } // Unlike the jsx() runtime, createElement() doesn't warn about key spread.\n\n  }\n\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n\n      {\n        warnIfStringRefCannotBeAutoConverted(config, config.__self);\n      }\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref') && // Even though we don't use these anymore in the runtime, we don't want\n      // them to appear as props, so in createElement we filter them out.\n      // We don't have to do this in the jsx() runtime because the jsx()\n      // transform never passed these as props; it used separate arguments.\n      propName !== '__self' && propName !== '__source') {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var _i = 0; _i < childrenLength; _i++) {\n      childArray[_i] = arguments[_i + 2];\n    }\n\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  {\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n\n  var element = ReactElement(type, key, ref, undefined, undefined, ReactCurrentOwner.current, props);\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  }\n\n  return element;\n}\nvar didWarnAboutDeprecatedCreateFactory = false;\n/**\n * Return a function that produces ReactElements of a given type.\n * See https://reactjs.org/docs/react-api.html#createfactory\n */\n\nfunction createFactory(type) {\n  var factory = createElement.bind(null, type); // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.\n  // This should not be named `constructor` since this may not be the function\n  // that created the element, and it may not even be a constructor.\n  // Legacy hook: remove it\n\n  factory.type = type;\n\n  {\n    if (!didWarnAboutDeprecatedCreateFactory) {\n      didWarnAboutDeprecatedCreateFactory = true;\n\n      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');\n    } // Legacy hook: remove it\n\n\n    Object.defineProperty(factory, 'type', {\n      enumerable: false,\n      get: function () {\n        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return factory;\n}\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  return ReactElement(oldElement.type, newKey, // When enableRefAsProp is on, this argument is ignored. This check only\n  // exists to avoid the `ref` access warning.\n  oldElement.ref, undefined, undefined, oldElement._owner, oldElement.props);\n}\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\n\nfunction cloneElement(element, config, children) {\n  if (element === null || element === undefined) {\n    throw new Error(\"The argument must be a React element, but you passed \" + element + \".\");\n  }\n\n  var propName; // Original props are copied\n\n  var props = assign({}, element.props); // Reserved names are extracted\n\n  var key = element.key;\n  var ref = element.ref; // Owner will be preserved, unless ref is overridden\n\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      {\n        // Silently steal the ref from the parent.\n        ref = config.ref;\n      }\n\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    var defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref') && // ...and maybe these, too, though we currently rely on them for\n      // warnings and debug information in dev. Need to decide if we're OK\n      // with dropping them. In the jsx() runtime it's not an issue because\n      // the data gets passed as separate arguments instead of props, but\n      // it would be nice to stop relying on them entirely so we can drop\n      // them from the internal Fiber field.\n      propName !== '__self' && propName !== '__source' && // Undefined `ref` is ignored by cloneElement. We treat it the same as\n      // if the property were missing. This is mostly for\n      // backwards compatibility.\n      !(enableRefAsProp  )) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  var clonedElement = ReactElement(element.type, key, ref, undefined, undefined, owner, props);\n\n  for (var _i2 = 2; _i2 < arguments.length; _i2++) {\n    validateChildKeys(arguments[_i2], clonedElement.type);\n  }\n\n  return clonedElement;\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nvar ownerHasKeyUseWarning = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = getComponentNameFromType(parentType);\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  // TODO: Move this to render phase instead of at element creation.\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = key.replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n  return '$' + escapedString;\n}\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\n\nvar didWarnAboutMaps = false;\nvar userProvidedKeyEscapeRegex = /\\/+/g;\n\nfunction escapeUserProvidedKey(text) {\n  return text.replace(userProvidedKeyEscapeRegex, '$&/');\n}\n/**\n * Generate a key string that identifies a element within a set.\n *\n * @param {*} element A element that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\n\n\nfunction getElementKey(element, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof element === 'object' && element !== null && element.key != null) {\n    // Explicit key\n    {\n      checkKeyStringCoercion(element.key);\n    }\n\n    return escape('' + element.key);\n  } // Implicit key determined by the index in the set\n\n\n  return index.toString(36);\n}\n\nfunction noop$1() {}\n\nfunction resolveThenable(thenable) {\n  switch (thenable.status) {\n    case 'fulfilled':\n      {\n        var fulfilledValue = thenable.value;\n        return fulfilledValue;\n      }\n\n    case 'rejected':\n      {\n        var rejectedError = thenable.reason;\n        throw rejectedError;\n      }\n\n    default:\n      {\n        if (typeof thenable.status === 'string') {\n          // Only instrument the thenable if the status if not defined. If\n          // it's defined, but an unknown value, assume it's been instrumented by\n          // some custom userspace implementation. We treat it as \"pending\".\n          // Attach a dummy listener, to ensure that any lazy initialization can\n          // happen. Flight lazily parses JSON when the value is actually awaited.\n          thenable.then(noop$1, noop$1);\n        } else {\n          // This is an uncached thenable that we haven't seen before.\n          // TODO: Detect infinite ping loops caused by uncached promises.\n          var pendingThenable = thenable;\n          pendingThenable.status = 'pending';\n          pendingThenable.then(function (fulfilledValue) {\n            if (thenable.status === 'pending') {\n              var fulfilledThenable = thenable;\n              fulfilledThenable.status = 'fulfilled';\n              fulfilledThenable.value = fulfilledValue;\n            }\n          }, function (error) {\n            if (thenable.status === 'pending') {\n              var rejectedThenable = thenable;\n              rejectedThenable.status = 'rejected';\n              rejectedThenable.reason = error;\n            }\n          });\n        } // Check one more time in case the thenable resolved synchronously.\n\n\n        switch (thenable.status) {\n          case 'fulfilled':\n            {\n              var fulfilledThenable = thenable;\n              return fulfilledThenable.value;\n            }\n\n          case 'rejected':\n            {\n              var rejectedThenable = thenable;\n              var _rejectedError = rejectedThenable.reason;\n              throw _rejectedError;\n            }\n        }\n      }\n  }\n\n  throw thenable;\n}\n\nfunction mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  var invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n            break;\n\n          case REACT_LAZY_TYPE:\n            var payload = children._payload;\n            var init = children._init;\n            return mapIntoArray(init(payload), array, escapedPrefix, nameSoFar, callback);\n        }\n\n    }\n  }\n\n  if (invokeCallback) {\n    var _child = children;\n    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows:\n\n    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n\n    if (isArray(mappedChild)) {\n      var escapedChildKey = '';\n\n      if (childKey != null) {\n        escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n      }\n\n      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {\n        return c;\n      });\n    } else if (mappedChild != null) {\n      if (isValidElement(mappedChild)) {\n        {\n          // The `if` statement here prevents auto-disabling of the safe\n          // coercion ESLint rule, so we must manually disable it below.\n          // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key\n          if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {\n            checkKeyStringCoercion(mappedChild.key);\n          }\n        }\n\n        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n        // traverseAllChildren used to do for objects as children\n        escapedPrefix + ( // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key\n        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey( // $FlowFixMe[unsafe-addition]\n        '' + mappedChild.key // eslint-disable-line react-internal/safe-string-coercion\n        ) + '/' : '') + childKey);\n      }\n\n      array.push(mappedChild);\n    }\n\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getElementKey(child, i);\n      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n\n    if (typeof iteratorFn === 'function') {\n      var iterableChildren = children;\n\n      {\n        // Warn about using Maps as children\n        if (iteratorFn === iterableChildren.entries) {\n          if (!didWarnAboutMaps) {\n            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n          }\n\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(iterableChildren);\n      var step;\n      var ii = 0; // $FlowFixMe[incompatible-use] `iteratorFn` might return null according to typing.\n\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getElementKey(child, ii++);\n        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n      }\n    } else if (type === 'object') {\n      if (typeof children.then === 'function') {\n        return mapIntoArray(resolveThenable(children), array, escapedPrefix, nameSoFar, callback);\n      } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n      var childrenString = String(children);\n      throw new Error(\"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n    }\n  }\n\n  return subtreeCount;\n}\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\n\n\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    // $FlowFixMe limitation refining abstract types in Flow\n    return children;\n  }\n\n  var result = [];\n  var count = 0;\n  mapIntoArray(children, result, '', '', function (child) {\n    return func.call(context, child, count++);\n  });\n  return result;\n}\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\n\n\nfunction countChildren(children) {\n  var n = 0;\n  mapChildren(children, function () {\n    n++; // Don't return anything\n  });\n  return n;\n}\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\n\n\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  mapChildren(children, // $FlowFixMe[missing-this-annot]\n  function () {\n    forEachFunc.apply(this, arguments); // Don't return anything.\n  }, forEachContext);\n}\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\n\n\nfunction toArray(children) {\n  return mapChildren(children, function (child) {\n    return child;\n  }) || [];\n}\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\n\n\nfunction onlyChild(children) {\n  if (!isValidElement(children)) {\n    throw new Error('React.Children.only expected to receive a single React element child.');\n  }\n\n  return children;\n}\n\nfunction createContext(defaultValue) {\n  // TODO: Second argument used to be an optional `calculateChangedBits`\n  // function. Warn to reserve for future use?\n  var context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n\n  {\n    context.Provider = {\n      $$typeof: REACT_PROVIDER_TYPE,\n      _context: context\n    };\n\n    {\n      var Consumer = {\n        $$typeof: REACT_CONTEXT_TYPE,\n        _context: context\n      };\n      Object.defineProperties(Consumer, {\n        Provider: {\n          get: function () {\n            return context.Provider;\n          },\n          set: function (_Provider) {\n            context.Provider = _Provider;\n          }\n        },\n        _currentValue: {\n          get: function () {\n            return context._currentValue;\n          },\n          set: function (_currentValue) {\n            context._currentValue = _currentValue;\n          }\n        },\n        _currentValue2: {\n          get: function () {\n            return context._currentValue2;\n          },\n          set: function (_currentValue2) {\n            context._currentValue2 = _currentValue2;\n          }\n        },\n        _threadCount: {\n          get: function () {\n            return context._threadCount;\n          },\n          set: function (_threadCount) {\n            context._threadCount = _threadCount;\n          }\n        },\n        Consumer: {\n          get: function () {\n            return context.Consumer;\n          }\n        },\n        displayName: {\n          get: function () {\n            return context.displayName;\n          },\n          set: function (displayName) {}\n        }\n      });\n      context.Consumer = Consumer;\n    }\n  }\n\n  {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n\nvar Uninitialized = -1;\nvar Pending = 0;\nvar Resolved = 1;\nvar Rejected = 2;\n\nfunction lazyInitializer(payload) {\n  if (payload._status === Uninitialized) {\n    var ctor = payload._result;\n    var thenable = ctor(); // Transition to the next state.\n    // This might throw either because it's missing or throws. If so, we treat it\n    // as still uninitialized and try again next time. Which is the same as what\n    // happens if the ctor or any wrappers processing the ctor throws. This might\n    // end up fixing it if the resolution was a concurrency bug.\n\n    thenable.then(function (moduleObject) {\n      if (payload._status === Pending || payload._status === Uninitialized) {\n        // Transition to the next state.\n        var resolved = payload;\n        resolved._status = Resolved;\n        resolved._result = moduleObject;\n      }\n    }, function (error) {\n      if (payload._status === Pending || payload._status === Uninitialized) {\n        // Transition to the next state.\n        var rejected = payload;\n        rejected._status = Rejected;\n        rejected._result = error;\n      }\n    });\n\n    if (payload._status === Uninitialized) {\n      // In case, we're still uninitialized, then we're waiting for the thenable\n      // to resolve. Set it as pending in the meantime.\n      var pending = payload;\n      pending._status = Pending;\n      pending._result = thenable;\n    }\n  }\n\n  if (payload._status === Resolved) {\n    var moduleObject = payload._result;\n\n    {\n      if (moduleObject === undefined) {\n        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n        'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\\n\\n\" + 'Did you accidentally put curly braces around the import?', moduleObject);\n      }\n    }\n\n    {\n      if (!('default' in moduleObject)) {\n        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n        'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\", moduleObject);\n      }\n    }\n\n    return moduleObject.default;\n  } else {\n    throw payload._result;\n  }\n}\n\nfunction lazy(ctor) {\n  var payload = {\n    // We use these fields to store the result.\n    _status: Uninitialized,\n    _result: ctor\n  };\n  var lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _payload: payload,\n    _init: lazyInitializer\n  };\n\n  {\n    // In production, this would just set it on the object.\n    var defaultProps;\n    var propTypes; // $FlowFixMe[prop-missing]\n\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get: function () {\n          return defaultProps;\n        },\n        // $FlowFixMe[missing-local-annot]\n        set: function (newDefaultProps) {\n          error('It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          defaultProps = newDefaultProps; // Match production behavior more closely:\n          // $FlowFixMe[prop-missing]\n\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true\n          });\n        }\n      },\n      propTypes: {\n        configurable: true,\n        get: function () {\n          return propTypes;\n        },\n        // $FlowFixMe[missing-local-annot]\n        set: function (newPropTypes) {\n          error('It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          propTypes = newPropTypes; // Match production behavior more closely:\n          // $FlowFixMe[prop-missing]\n\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true\n          });\n        }\n      }\n    });\n  }\n\n  return lazyType;\n}\n\nfunction forwardRef(render) {\n  {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n    } else if (typeof render !== 'function') {\n      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n    } else {\n      if (render.length !== 0 && render.length !== 2) {\n        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');\n      }\n    }\n\n    if (render != null) {\n      if (render.defaultProps != null) {\n        error('forwardRef render functions do not support defaultProps. ' + 'Did you accidentally pass a React component?');\n      }\n    }\n  }\n\n  var elementType = {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n\n  {\n    var ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n        // because the component may be used elsewhere.\n        // But it's nice for anonymous functions to inherit the name,\n        // so that our component-stack generation logic will display their frames.\n        // An anonymous function generally suggests a pattern like:\n        //   React.forwardRef((props, ref) => {...});\n        // This kind of inner function is not used elsewhere so the side effect is okay.\n\n        if (!render.name && !render.displayName) {\n          render.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}\n\nfunction memo(type, compare) {\n  {\n    if (!isValidElementType(type)) {\n      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n    }\n  }\n\n  var elementType = {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: compare === undefined ? null : compare\n  };\n\n  {\n    var ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n        // because the component may be used elsewhere.\n        // But it's nice for anonymous functions to inherit the name,\n        // so that our component-stack generation logic will display their frames.\n        // An anonymous function generally suggests a pattern like:\n        //   React.memo((props) => {...});\n        // This kind of inner function is not used elsewhere so the side effect is okay.\n\n        if (!type.name && !type.displayName) {\n          type.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}\n\nvar UNTERMINATED = 0;\nvar TERMINATED = 1;\nvar ERRORED = 2;\n\nfunction createCacheRoot() {\n  return new WeakMap();\n}\n\nfunction createCacheNode() {\n  return {\n    s: UNTERMINATED,\n    // status, represents whether the cached computation returned a value or threw an error\n    v: undefined,\n    // value, either the cached result or an error, depending on s\n    o: null,\n    // object cache, a WeakMap where non-primitive arguments are stored\n    p: null // primitive cache, a regular Map where primitive arguments are stored.\n\n  };\n}\n\nfunction cache$1(fn) {\n  return function () {\n    var dispatcher = ReactCurrentCache.current;\n\n    if (!dispatcher) {\n      // If there is no dispatcher, then we treat this as not being cached.\n      // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n      return fn.apply(null, arguments);\n    }\n\n    var fnMap = dispatcher.getCacheForType(createCacheRoot);\n    var fnNode = fnMap.get(fn);\n    var cacheNode;\n\n    if (fnNode === undefined) {\n      cacheNode = createCacheNode();\n      fnMap.set(fn, cacheNode);\n    } else {\n      cacheNode = fnNode;\n    }\n\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      var arg = arguments[i];\n\n      if (typeof arg === 'function' || typeof arg === 'object' && arg !== null) {\n        // Objects go into a WeakMap\n        var objectCache = cacheNode.o;\n\n        if (objectCache === null) {\n          cacheNode.o = objectCache = new WeakMap();\n        }\n\n        var objectNode = objectCache.get(arg);\n\n        if (objectNode === undefined) {\n          cacheNode = createCacheNode();\n          objectCache.set(arg, cacheNode);\n        } else {\n          cacheNode = objectNode;\n        }\n      } else {\n        // Primitives go into a regular Map\n        var primitiveCache = cacheNode.p;\n\n        if (primitiveCache === null) {\n          cacheNode.p = primitiveCache = new Map();\n        }\n\n        var primitiveNode = primitiveCache.get(arg);\n\n        if (primitiveNode === undefined) {\n          cacheNode = createCacheNode();\n          primitiveCache.set(arg, cacheNode);\n        } else {\n          cacheNode = primitiveNode;\n        }\n      }\n    }\n\n    if (cacheNode.s === TERMINATED) {\n      return cacheNode.v;\n    }\n\n    if (cacheNode.s === ERRORED) {\n      throw cacheNode.v;\n    }\n\n    try {\n      // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n      var result = fn.apply(null, arguments);\n      var terminatedNode = cacheNode;\n      terminatedNode.s = TERMINATED;\n      terminatedNode.v = result;\n      return result;\n    } catch (error) {\n      // We store the first error that's thrown and rethrow it.\n      var erroredNode = cacheNode;\n      erroredNode.s = ERRORED;\n      erroredNode.v = error;\n      throw error;\n    }\n  };\n}\n\nvar cache = cache$1;\n\nfunction resolveDispatcher() {\n  var dispatcher = ReactCurrentDispatcher$1.current;\n\n  {\n    if (dispatcher === null) {\n      error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n    }\n  } // Will result in a null access error if accessed outside render phase. We\n  // intentionally don't throw our own error because this is in a hot path.\n  // Also helps ensure this is inlined.\n\n\n  return dispatcher;\n}\nfunction useContext(Context) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    if (Context.$$typeof === REACT_CONSUMER_TYPE) {\n      error('Calling useContext(Context.Consumer) is not supported and will cause bugs. ' + 'Did you mean to call useContext(Context) instead?');\n    }\n  }\n\n  return dispatcher.useContext(Context);\n}\nfunction useState(initialState) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\nfunction useRef(initialValue) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\nfunction useEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, deps);\n}\nfunction useInsertionEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useInsertionEffect(create, deps);\n}\nfunction useLayoutEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, deps);\n}\nfunction useCallback(callback, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, deps);\n}\nfunction useMemo(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, deps);\n}\nfunction useImperativeHandle(ref, create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, deps);\n}\nfunction useDebugValue(value, formatterFn) {\n  {\n    var dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\nfunction useTransition() {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useTransition();\n}\nfunction useDeferredValue(value, initialValue) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useDeferredValue(value, initialValue);\n}\nfunction useId() {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useId();\n}\nfunction useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n}\nfunction useCacheRefresh() {\n  var dispatcher = resolveDispatcher(); // $FlowFixMe[not-a-function] This is unstable, thus optional\n\n  return dispatcher.useCacheRefresh();\n}\nfunction use(usable) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.use(usable);\n}\nfunction useOptimistic(passthrough, reducer) {\n  var dispatcher = resolveDispatcher(); // $FlowFixMe[not-a-function] This is unstable, thus optional\n\n  return dispatcher.useOptimistic(passthrough, reducer);\n}\n\nfunction startTransition(scope, options) {\n  var prevTransition = ReactCurrentBatchConfig.transition; // Each renderer registers a callback to receive the return value of\n  // the scope function. This is used to implement async actions.\n\n  var callbacks = new Set();\n  var transition = {\n    _callbacks: callbacks\n  };\n  ReactCurrentBatchConfig.transition = transition;\n  var currentTransition = ReactCurrentBatchConfig.transition;\n\n  {\n    ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n  }\n\n  {\n    try {\n      var returnValue = scope();\n\n      if (typeof returnValue === 'object' && returnValue !== null && typeof returnValue.then === 'function') {\n        callbacks.forEach(function (callback) {\n          return callback(currentTransition, returnValue);\n        });\n        returnValue.then(noop, onError);\n      }\n    } catch (error) {\n      onError(error);\n    } finally {\n      warnAboutTransitionSubscriptions(prevTransition, currentTransition);\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }\n}\n\nfunction warnAboutTransitionSubscriptions(prevTransition, currentTransition) {\n  {\n    if (prevTransition === null && currentTransition._updatedFibers) {\n      var updatedFibersCount = currentTransition._updatedFibers.size;\n\n      currentTransition._updatedFibers.clear();\n\n      if (updatedFibersCount > 10) {\n        warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n      }\n    }\n  }\n}\n\nfunction noop() {} // Use reportError, if it exists. Otherwise console.error. This is the same as\n// the default for onRecoverableError.\n\n\nvar onError = typeof reportError === 'function' ? // In modern browsers, reportError will dispatch an error event,\n// emulating an uncaught JavaScript error.\nreportError : function (error) {\n  // In older browsers and test environments, fallback to console.error.\n  // eslint-disable-next-line react-internal/no-production-logging\n  console['error'](error);\n};\n\nvar didWarnAboutMessageChannel = false;\nvar enqueueTaskImpl = null;\nfunction enqueueTask(task) {\n  if (enqueueTaskImpl === null) {\n    try {\n      // read require off the module object to get around the bundlers.\n      // we don't want them to detect a require and bundle a Node polyfill.\n      var requireString = ('require' + Math.random()).slice(0, 7);\n      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's\n      // version of setImmediate, bypassing fake timers if any.\n\n      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;\n    } catch (_err) {\n      // we're in a browser\n      // we can't use regular timers because they may still be faked\n      // so we try MessageChannel+postMessage instead\n      enqueueTaskImpl = function (callback) {\n        {\n          if (didWarnAboutMessageChannel === false) {\n            didWarnAboutMessageChannel = true;\n\n            if (typeof MessageChannel === 'undefined') {\n              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');\n            }\n          }\n        }\n\n        var channel = new MessageChannel();\n        channel.port1.onmessage = callback;\n        channel.port2.postMessage(undefined);\n      };\n    }\n  }\n\n  return enqueueTaskImpl(task);\n}\n\n// number of `act` scopes on the stack.\n\nvar actScopeDepth = 0; // We only warn the first time you neglect to await an async `act` scope.\n\nvar didWarnNoAwaitAct = false;\nfunction act(callback) {\n  {\n    // When ReactCurrentActQueue.current is not null, it signals to React that\n    // we're currently inside an `act` scope. React will push all its tasks to\n    // this queue instead of scheduling them with platform APIs.\n    //\n    // We set this to an empty array when we first enter an `act` scope, and\n    // only unset it once we've left the outermost `act` scope — remember that\n    // `act` calls can be nested.\n    //\n    // If we're already inside an `act` scope, reuse the existing queue.\n    var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;\n    var prevActQueue = ReactCurrentActQueue.current;\n    var prevActScopeDepth = actScopeDepth;\n    actScopeDepth++;\n    var queue = ReactCurrentActQueue.current = prevActQueue !== null ? prevActQueue : []; // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only\n    // set to `true` while the given callback is executed, not for updates\n    // triggered during an async event, because this is how the legacy\n    // implementation of `act` behaved.\n\n    ReactCurrentActQueue.isBatchingLegacy = true;\n    var result; // This tracks whether the `act` call is awaited. In certain cases, not\n    // awaiting it is a mistake, so we will detect that and warn.\n\n    var didAwaitActCall = false;\n\n    try {\n      // Reset this to `false` right before entering the React work loop. The\n      // only place we ever read this fields is just below, right after running\n      // the callback. So we don't need to reset after the callback runs.\n      ReactCurrentActQueue.didScheduleLegacyUpdate = false;\n      result = callback();\n      var didScheduleLegacyUpdate = ReactCurrentActQueue.didScheduleLegacyUpdate; // Replicate behavior of original `act` implementation in legacy mode,\n      // which flushed updates immediately after the scope function exits, even\n      // if it's an async function.\n\n      if (!prevIsBatchingLegacy && didScheduleLegacyUpdate) {\n        flushActQueue(queue);\n      } // `isBatchingLegacy` gets reset using the regular stack, not the async\n      // one used to track `act` scopes. Why, you may be wondering? Because\n      // that's how it worked before version 18. Yes, it's confusing! We should\n      // delete legacy mode!!\n\n\n      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;\n    } catch (error) {\n      // `isBatchingLegacy` gets reset using the regular stack, not the async\n      // one used to track `act` scopes. Why, you may be wondering? Because\n      // that's how it worked before version 18. Yes, it's confusing! We should\n      // delete legacy mode!!\n      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;\n      popActScope(prevActQueue, prevActScopeDepth);\n      throw error;\n    }\n\n    if (result !== null && typeof result === 'object' && // $FlowFixMe[method-unbinding]\n    typeof result.then === 'function') {\n      // A promise/thenable was returned from the callback. Wait for it to\n      // resolve before flushing the queue.\n      //\n      // If `act` were implemented as an async function, this whole block could\n      // be a single `await` call. That's really the only difference between\n      // this branch and the next one.\n      var thenable = result; // Warn if the an `act` call with an async scope is not awaited. In a\n      // future release, consider making this an error.\n\n      queueSeveralMicrotasks(function () {\n        if (!didAwaitActCall && !didWarnNoAwaitAct) {\n          didWarnNoAwaitAct = true;\n\n          error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');\n        }\n      });\n      return {\n        then: function (resolve, reject) {\n          didAwaitActCall = true;\n          thenable.then(function (returnValue) {\n            popActScope(prevActQueue, prevActScopeDepth);\n\n            if (prevActScopeDepth === 0) {\n              // We're exiting the outermost `act` scope. Flush the queue.\n              try {\n                flushActQueue(queue);\n                enqueueTask(function () {\n                  return (// Recursively flush tasks scheduled by a microtask.\n                    recursivelyFlushAsyncActWork(returnValue, resolve, reject)\n                  );\n                });\n              } catch (error) {\n                // `thenable` might not be a real promise, and `flushActQueue`\n                // might throw, so we need to wrap `flushActQueue` in a\n                // try/catch.\n                reject(error);\n              }\n            } else {\n              resolve(returnValue);\n            }\n          }, function (error) {\n            popActScope(prevActQueue, prevActScopeDepth);\n            reject(error);\n          });\n        }\n      };\n    } else {\n      var returnValue = result; // The callback is not an async function. Exit the current\n      // scope immediately.\n\n      popActScope(prevActQueue, prevActScopeDepth);\n\n      if (prevActScopeDepth === 0) {\n        // We're exiting the outermost `act` scope. Flush the queue.\n        flushActQueue(queue); // If the queue is not empty, it implies that we intentionally yielded\n        // to the main thread, because something suspended. We will continue\n        // in an asynchronous task.\n        //\n        // Warn if something suspends but the `act` call is not awaited.\n        // In a future release, consider making this an error.\n\n        if (queue.length !== 0) {\n          queueSeveralMicrotasks(function () {\n            if (!didAwaitActCall && !didWarnNoAwaitAct) {\n              didWarnNoAwaitAct = true;\n\n              error('A component suspended inside an `act` scope, but the ' + '`act` call was not awaited. When testing React ' + 'components that depend on asynchronous data, you must ' + 'await the result:\\n\\n' + 'await act(() => ...)');\n            }\n          });\n        } // Like many things in this module, this is next part is confusing.\n        //\n        // We do not currently require every `act` call that is passed a\n        // callback to be awaited, through arguably we should. Since this\n        // callback was synchronous, we need to exit the current scope before\n        // returning.\n        //\n        // However, if thenable we're about to return *is* awaited, we'll\n        // immediately restore the current scope. So it shouldn't observable.\n        //\n        // This doesn't affect the case where the scope callback is async,\n        // because we always require those calls to be awaited.\n        //\n        // TODO: In a future version, consider always requiring all `act` calls\n        // to be awaited, regardless of whether the callback is sync or async.\n\n\n        ReactCurrentActQueue.current = null;\n      }\n\n      return {\n        then: function (resolve, reject) {\n          didAwaitActCall = true;\n\n          if (prevActScopeDepth === 0) {\n            // If the `act` call is awaited, restore the queue we were\n            // using before (see long comment above) so we can flush it.\n            ReactCurrentActQueue.current = queue;\n            enqueueTask(function () {\n              return (// Recursively flush tasks scheduled by a microtask.\n                recursivelyFlushAsyncActWork(returnValue, resolve, reject)\n              );\n            });\n          } else {\n            resolve(returnValue);\n          }\n        }\n      };\n    }\n  }\n}\n\nfunction popActScope(prevActQueue, prevActScopeDepth) {\n  {\n    if (prevActScopeDepth !== actScopeDepth - 1) {\n      error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');\n    }\n\n    actScopeDepth = prevActScopeDepth;\n  }\n}\n\nfunction recursivelyFlushAsyncActWork(returnValue, resolve, reject) {\n  {\n    // Check if any tasks were scheduled asynchronously.\n    var queue = ReactCurrentActQueue.current;\n\n    if (queue !== null) {\n      if (queue.length !== 0) {\n        // Async tasks were scheduled, mostly likely in a microtask.\n        // Keep flushing until there are no more.\n        try {\n          flushActQueue(queue); // The work we just performed may have schedule additional async\n          // tasks. Wait a macrotask and check again.\n\n          enqueueTask(function () {\n            return recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n          });\n        } catch (error) {\n          // Leave remaining tasks on the queue if something throws.\n          reject(error);\n        }\n      } else {\n        // The queue is empty. We can finish.\n        ReactCurrentActQueue.current = null;\n        resolve(returnValue);\n      }\n    } else {\n      resolve(returnValue);\n    }\n  }\n}\n\nvar isFlushing = false;\n\nfunction flushActQueue(queue) {\n  {\n    if (!isFlushing) {\n      // Prevent re-entrance.\n      isFlushing = true;\n      var i = 0;\n\n      try {\n        for (; i < queue.length; i++) {\n          var callback = queue[i];\n\n          do {\n            ReactCurrentActQueue.didUsePromise = false;\n            var continuation = callback(false);\n\n            if (continuation !== null) {\n              if (ReactCurrentActQueue.didUsePromise) {\n                // The component just suspended. Yield to the main thread in\n                // case the promise is already resolved. If so, it will ping in\n                // a microtask and we can resume without unwinding the stack.\n                queue[i] = callback;\n                queue.splice(0, i);\n                return;\n              }\n\n              callback = continuation;\n            } else {\n              break;\n            }\n          } while (true);\n        } // We flushed the entire queue.\n\n\n        queue.length = 0;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        queue.splice(0, i + 1);\n        throw error;\n      } finally {\n        isFlushing = false;\n      }\n    }\n  }\n} // Some of our warnings attempt to detect if the `act` call is awaited by\n// checking in an asynchronous task. Wait a few microtasks before checking. The\n// only reason one isn't sufficient is we want to accommodate the case where an\n// `act` call is returned from an async function without first being awaited,\n// since that's a somewhat common pattern. If you do this too many times in a\n// nested sequence, you might get a warning, but you can always fix by awaiting\n// the call.\n//\n// A macrotask would also work (and is the fallback) but depending on the test\n// environment it may cause the warning to fire too late.\n\n\nvar queueSeveralMicrotasks = typeof queueMicrotask === 'function' ? function (callback) {\n  queueMicrotask(function () {\n    return queueMicrotask(callback);\n  });\n} : enqueueTask;\n\nvar Children = {\n  map: mapChildren,\n  forEach: forEachChildren,\n  count: countChildren,\n  toArray: toArray,\n  only: onlyChild\n};\n\nexports.Children = Children;\nexports.Component = Component;\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.Profiler = REACT_PROFILER_TYPE;\nexports.PureComponent = PureComponent;\nexports.StrictMode = REACT_STRICT_MODE_TYPE;\nexports.Suspense = REACT_SUSPENSE_TYPE;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\nexports.act = act;\nexports.cache = cache;\nexports.cloneElement = cloneElement;\nexports.createContext = createContext;\nexports.createElement = createElement;\nexports.createFactory = createFactory;\nexports.createRef = createRef;\nexports.forwardRef = forwardRef;\nexports.isValidElement = isValidElement;\nexports.lazy = lazy;\nexports.memo = memo;\nexports.startTransition = startTransition;\nexports.unstable_useCacheRefresh = useCacheRefresh;\nexports.use = use;\nexports.useCallback = useCallback;\nexports.useContext = useContext;\nexports.useDebugValue = useDebugValue;\nexports.useDeferredValue = useDeferredValue;\nexports.useEffect = useEffect;\nexports.useId = useId;\nexports.useImperativeHandle = useImperativeHandle;\nexports.useInsertionEffect = useInsertionEffect;\nexports.useLayoutEffect = useLayoutEffect;\nexports.useMemo = useMemo;\nexports.useOptimistic = useOptimistic;\nexports.useReducer = useReducer;\nexports.useRef = useRef;\nexports.useState = useState;\nexports.useSyncExternalStore = useSyncExternalStore;\nexports.useTransition = useTransition;\nexports.version = ReactVersion;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react/cjs/react.development.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react/index.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ \"(rsc)/./node_modules/next/dist/compiled/react/cjs/react.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSxnSkFBc0Q7QUFDeEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teXN0ZXJ5bWVzc2FnZS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvaW5kZXguanM/YjA2YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/lib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/lib/constants.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    ACTION_SUFFIX: function() {\n        return ACTION_SUFFIX;\n    },\n    APP_DIR_ALIAS: function() {\n        return APP_DIR_ALIAS;\n    },\n    CACHE_ONE_YEAR: function() {\n        return CACHE_ONE_YEAR;\n    },\n    DOT_NEXT_ALIAS: function() {\n        return DOT_NEXT_ALIAS;\n    },\n    ESLINT_DEFAULT_DIRS: function() {\n        return ESLINT_DEFAULT_DIRS;\n    },\n    ESLINT_PROMPT_VALUES: function() {\n        return ESLINT_PROMPT_VALUES;\n    },\n    GSP_NO_RETURNED_VALUE: function() {\n        return GSP_NO_RETURNED_VALUE;\n    },\n    GSSP_COMPONENT_MEMBER_ERROR: function() {\n        return GSSP_COMPONENT_MEMBER_ERROR;\n    },\n    GSSP_NO_RETURNED_VALUE: function() {\n        return GSSP_NO_RETURNED_VALUE;\n    },\n    INSTRUMENTATION_HOOK_FILENAME: function() {\n        return INSTRUMENTATION_HOOK_FILENAME;\n    },\n    MIDDLEWARE_FILENAME: function() {\n        return MIDDLEWARE_FILENAME;\n    },\n    MIDDLEWARE_LOCATION_REGEXP: function() {\n        return MIDDLEWARE_LOCATION_REGEXP;\n    },\n    NEXT_BODY_SUFFIX: function() {\n        return NEXT_BODY_SUFFIX;\n    },\n    NEXT_CACHE_IMPLICIT_TAG_ID: function() {\n        return NEXT_CACHE_IMPLICIT_TAG_ID;\n    },\n    NEXT_CACHE_REVALIDATED_TAGS_HEADER: function() {\n        return NEXT_CACHE_REVALIDATED_TAGS_HEADER;\n    },\n    NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER: function() {\n        return NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER;\n    },\n    NEXT_CACHE_SOFT_TAGS_HEADER: function() {\n        return NEXT_CACHE_SOFT_TAGS_HEADER;\n    },\n    NEXT_CACHE_SOFT_TAG_MAX_LENGTH: function() {\n        return NEXT_CACHE_SOFT_TAG_MAX_LENGTH;\n    },\n    NEXT_CACHE_TAGS_HEADER: function() {\n        return NEXT_CACHE_TAGS_HEADER;\n    },\n    NEXT_CACHE_TAG_MAX_ITEMS: function() {\n        return NEXT_CACHE_TAG_MAX_ITEMS;\n    },\n    NEXT_CACHE_TAG_MAX_LENGTH: function() {\n        return NEXT_CACHE_TAG_MAX_LENGTH;\n    },\n    NEXT_DATA_SUFFIX: function() {\n        return NEXT_DATA_SUFFIX;\n    },\n    NEXT_META_SUFFIX: function() {\n        return NEXT_META_SUFFIX;\n    },\n    NEXT_QUERY_PARAM_PREFIX: function() {\n        return NEXT_QUERY_PARAM_PREFIX;\n    },\n    NON_STANDARD_NODE_ENV: function() {\n        return NON_STANDARD_NODE_ENV;\n    },\n    PAGES_DIR_ALIAS: function() {\n        return PAGES_DIR_ALIAS;\n    },\n    PRERENDER_REVALIDATE_HEADER: function() {\n        return PRERENDER_REVALIDATE_HEADER;\n    },\n    PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER: function() {\n        return PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER;\n    },\n    PUBLIC_DIR_MIDDLEWARE_CONFLICT: function() {\n        return PUBLIC_DIR_MIDDLEWARE_CONFLICT;\n    },\n    ROOT_DIR_ALIAS: function() {\n        return ROOT_DIR_ALIAS;\n    },\n    RSC_ACTION_CLIENT_WRAPPER_ALIAS: function() {\n        return RSC_ACTION_CLIENT_WRAPPER_ALIAS;\n    },\n    RSC_ACTION_ENCRYPTION_ALIAS: function() {\n        return RSC_ACTION_ENCRYPTION_ALIAS;\n    },\n    RSC_ACTION_PROXY_ALIAS: function() {\n        return RSC_ACTION_PROXY_ALIAS;\n    },\n    RSC_ACTION_VALIDATE_ALIAS: function() {\n        return RSC_ACTION_VALIDATE_ALIAS;\n    },\n    RSC_MOD_REF_PROXY_ALIAS: function() {\n        return RSC_MOD_REF_PROXY_ALIAS;\n    },\n    RSC_PREFETCH_SUFFIX: function() {\n        return RSC_PREFETCH_SUFFIX;\n    },\n    RSC_SUFFIX: function() {\n        return RSC_SUFFIX;\n    },\n    SERVER_PROPS_EXPORT_ERROR: function() {\n        return SERVER_PROPS_EXPORT_ERROR;\n    },\n    SERVER_PROPS_GET_INIT_PROPS_CONFLICT: function() {\n        return SERVER_PROPS_GET_INIT_PROPS_CONFLICT;\n    },\n    SERVER_PROPS_SSG_CONFLICT: function() {\n        return SERVER_PROPS_SSG_CONFLICT;\n    },\n    SERVER_RUNTIME: function() {\n        return SERVER_RUNTIME;\n    },\n    SSG_FALLBACK_EXPORT_ERROR: function() {\n        return SSG_FALLBACK_EXPORT_ERROR;\n    },\n    SSG_GET_INITIAL_PROPS_CONFLICT: function() {\n        return SSG_GET_INITIAL_PROPS_CONFLICT;\n    },\n    STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR: function() {\n        return STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR;\n    },\n    UNSTABLE_REVALIDATE_RENAME_ERROR: function() {\n        return UNSTABLE_REVALIDATE_RENAME_ERROR;\n    },\n    WEBPACK_LAYERS: function() {\n        return WEBPACK_LAYERS;\n    },\n    WEBPACK_RESOURCE_QUERIES: function() {\n        return WEBPACK_RESOURCE_QUERIES;\n    }\n});\nconst NEXT_QUERY_PARAM_PREFIX = \"nxtP\";\nconst PRERENDER_REVALIDATE_HEADER = \"x-prerender-revalidate\";\nconst PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER = \"x-prerender-revalidate-if-generated\";\nconst RSC_PREFETCH_SUFFIX = \".prefetch.rsc\";\nconst RSC_SUFFIX = \".rsc\";\nconst ACTION_SUFFIX = \".action\";\nconst NEXT_DATA_SUFFIX = \".json\";\nconst NEXT_META_SUFFIX = \".meta\";\nconst NEXT_BODY_SUFFIX = \".body\";\nconst NEXT_CACHE_TAGS_HEADER = \"x-next-cache-tags\";\nconst NEXT_CACHE_SOFT_TAGS_HEADER = \"x-next-cache-soft-tags\";\nconst NEXT_CACHE_REVALIDATED_TAGS_HEADER = \"x-next-revalidated-tags\";\nconst NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER = \"x-next-revalidate-tag-token\";\nconst NEXT_CACHE_TAG_MAX_ITEMS = 64;\nconst NEXT_CACHE_TAG_MAX_LENGTH = 256;\nconst NEXT_CACHE_SOFT_TAG_MAX_LENGTH = 1024;\nconst NEXT_CACHE_IMPLICIT_TAG_ID = \"_N_T_\";\nconst CACHE_ONE_YEAR = 31536000;\nconst MIDDLEWARE_FILENAME = \"middleware\";\nconst MIDDLEWARE_LOCATION_REGEXP = `(?:src/)?${MIDDLEWARE_FILENAME}`;\nconst INSTRUMENTATION_HOOK_FILENAME = \"instrumentation\";\nconst PAGES_DIR_ALIAS = \"private-next-pages\";\nconst DOT_NEXT_ALIAS = \"private-dot-next\";\nconst ROOT_DIR_ALIAS = \"private-next-root-dir\";\nconst APP_DIR_ALIAS = \"private-next-app-dir\";\nconst RSC_MOD_REF_PROXY_ALIAS = \"next/dist/build/webpack/loaders/next-flight-loader/module-proxy\";\nconst RSC_ACTION_VALIDATE_ALIAS = \"private-next-rsc-action-validate\";\nconst RSC_ACTION_PROXY_ALIAS = \"private-next-rsc-server-reference\";\nconst RSC_ACTION_ENCRYPTION_ALIAS = \"private-next-rsc-action-encryption\";\nconst RSC_ACTION_CLIENT_WRAPPER_ALIAS = \"private-next-rsc-action-client-wrapper\";\nconst PUBLIC_DIR_MIDDLEWARE_CONFLICT = `You can not have a '_next' folder inside of your public folder. This conflicts with the internal '/_next' route. https://nextjs.org/docs/messages/public-next-folder-conflict`;\nconst SSG_GET_INITIAL_PROPS_CONFLICT = `You can not use getInitialProps with getStaticProps. To use SSG, please remove your getInitialProps`;\nconst SERVER_PROPS_GET_INIT_PROPS_CONFLICT = `You can not use getInitialProps with getServerSideProps. Please remove getInitialProps.`;\nconst SERVER_PROPS_SSG_CONFLICT = `You can not use getStaticProps or getStaticPaths with getServerSideProps. To use SSG, please remove getServerSideProps`;\nconst STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR = `can not have getInitialProps/getServerSideProps, https://nextjs.org/docs/messages/404-get-initial-props`;\nconst SERVER_PROPS_EXPORT_ERROR = `pages with \\`getServerSideProps\\` can not be exported. See more info here: https://nextjs.org/docs/messages/gssp-export`;\nconst GSP_NO_RETURNED_VALUE = \"Your `getStaticProps` function did not return an object. Did you forget to add a `return`?\";\nconst GSSP_NO_RETURNED_VALUE = \"Your `getServerSideProps` function did not return an object. Did you forget to add a `return`?\";\nconst UNSTABLE_REVALIDATE_RENAME_ERROR = \"The `unstable_revalidate` property is available for general use.\\n\" + \"Please use `revalidate` instead.\";\nconst GSSP_COMPONENT_MEMBER_ERROR = `can not be attached to a page's component and must be exported from the page. See more info here: https://nextjs.org/docs/messages/gssp-component-member`;\nconst NON_STANDARD_NODE_ENV = `You are using a non-standard \"NODE_ENV\" value in your environment. This creates inconsistencies in the project and is strongly advised against. Read more: https://nextjs.org/docs/messages/non-standard-node-env`;\nconst SSG_FALLBACK_EXPORT_ERROR = `Pages with \\`fallback\\` enabled in \\`getStaticPaths\\` can not be exported. See more info here: https://nextjs.org/docs/messages/ssg-fallback-true-export`;\nconst ESLINT_DEFAULT_DIRS = [\n    \"app\",\n    \"pages\",\n    \"components\",\n    \"lib\",\n    \"src\"\n];\nconst ESLINT_PROMPT_VALUES = [\n    {\n        title: \"Strict\",\n        recommended: true,\n        config: {\n            extends: \"next/core-web-vitals\"\n        }\n    },\n    {\n        title: \"Base\",\n        config: {\n            extends: \"next\"\n        }\n    },\n    {\n        title: \"Cancel\",\n        config: null\n    }\n];\nconst SERVER_RUNTIME = {\n    edge: \"edge\",\n    experimentalEdge: \"experimental-edge\",\n    nodejs: \"nodejs\"\n};\n/**\n * The names of the webpack layers. These layers are the primitives for the\n * webpack chunks.\n */ const WEBPACK_LAYERS_NAMES = {\n    /**\n   * The layer for the shared code between the client and server bundles.\n   */ shared: \"shared\",\n    /**\n   * React Server Components layer (rsc).\n   */ reactServerComponents: \"rsc\",\n    /**\n   * Server Side Rendering layer for app (ssr).\n   */ serverSideRendering: \"ssr\",\n    /**\n   * The browser client bundle layer for actions.\n   */ actionBrowser: \"action-browser\",\n    /**\n   * The layer for the API routes.\n   */ api: \"api\",\n    /**\n   * The layer for the middleware code.\n   */ middleware: \"middleware\",\n    /**\n   * The layer for the instrumentation hooks.\n   */ instrument: \"instrument\",\n    /**\n   * The layer for assets on the edge.\n   */ edgeAsset: \"edge-asset\",\n    /**\n   * The browser client bundle layer for App directory.\n   */ appPagesBrowser: \"app-pages-browser\",\n    /**\n   * The server bundle layer for metadata routes.\n   */ appMetadataRoute: \"app-metadata-route\",\n    /**\n   * The layer for the server bundle for App Route handlers.\n   */ appRouteHandler: \"app-route-handler\"\n};\nconst WEBPACK_LAYERS = {\n    ...WEBPACK_LAYERS_NAMES,\n    GROUP: {\n        serverOnly: [\n            WEBPACK_LAYERS_NAMES.reactServerComponents,\n            WEBPACK_LAYERS_NAMES.actionBrowser,\n            WEBPACK_LAYERS_NAMES.appMetadataRoute,\n            WEBPACK_LAYERS_NAMES.appRouteHandler,\n            WEBPACK_LAYERS_NAMES.instrument\n        ],\n        clientOnly: [\n            WEBPACK_LAYERS_NAMES.serverSideRendering,\n            WEBPACK_LAYERS_NAMES.appPagesBrowser\n        ],\n        nonClientServerTarget: [\n            // middleware and pages api\n            WEBPACK_LAYERS_NAMES.middleware,\n            WEBPACK_LAYERS_NAMES.api\n        ],\n        app: [\n            WEBPACK_LAYERS_NAMES.reactServerComponents,\n            WEBPACK_LAYERS_NAMES.actionBrowser,\n            WEBPACK_LAYERS_NAMES.appMetadataRoute,\n            WEBPACK_LAYERS_NAMES.appRouteHandler,\n            WEBPACK_LAYERS_NAMES.serverSideRendering,\n            WEBPACK_LAYERS_NAMES.appPagesBrowser,\n            WEBPACK_LAYERS_NAMES.shared,\n            WEBPACK_LAYERS_NAMES.instrument\n        ]\n    }\n};\nconst WEBPACK_RESOURCE_QUERIES = {\n    edgeSSREntry: \"__next_edge_ssr_entry__\",\n    metadata: \"__next_metadata__\",\n    metadataRoute: \"__next_metadata_route__\",\n    metadataImageMeta: \"__next_metadata_image_meta__\"\n};\n\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/lib/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/lib/picocolors.js":
/*!**************************************************!*\
  !*** ./node_modules/next/dist/lib/picocolors.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("// ISC License\n// Copyright (c) 2021 Alexey Raspopov, Kostiantyn Denysov, Anton Verinov\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n//\n// https://github.com/alexeyraspopov/picocolors/blob/b6261487e7b81aaab2440e397a356732cad9e342/picocolors.js#L1\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    bgBlack: function() {\n        return bgBlack;\n    },\n    bgBlue: function() {\n        return bgBlue;\n    },\n    bgCyan: function() {\n        return bgCyan;\n    },\n    bgGreen: function() {\n        return bgGreen;\n    },\n    bgMagenta: function() {\n        return bgMagenta;\n    },\n    bgRed: function() {\n        return bgRed;\n    },\n    bgWhite: function() {\n        return bgWhite;\n    },\n    bgYellow: function() {\n        return bgYellow;\n    },\n    black: function() {\n        return black;\n    },\n    blue: function() {\n        return blue;\n    },\n    bold: function() {\n        return bold;\n    },\n    cyan: function() {\n        return cyan;\n    },\n    dim: function() {\n        return dim;\n    },\n    gray: function() {\n        return gray;\n    },\n    green: function() {\n        return green;\n    },\n    hidden: function() {\n        return hidden;\n    },\n    inverse: function() {\n        return inverse;\n    },\n    italic: function() {\n        return italic;\n    },\n    magenta: function() {\n        return magenta;\n    },\n    purple: function() {\n        return purple;\n    },\n    red: function() {\n        return red;\n    },\n    reset: function() {\n        return reset;\n    },\n    strikethrough: function() {\n        return strikethrough;\n    },\n    underline: function() {\n        return underline;\n    },\n    white: function() {\n        return white;\n    },\n    yellow: function() {\n        return yellow;\n    }\n});\nvar _globalThis;\nconst { env, stdout } = ((_globalThis = globalThis) == null ? void 0 : _globalThis.process) ?? {};\nconst enabled = env && !env.NO_COLOR && (env.FORCE_COLOR || (stdout == null ? void 0 : stdout.isTTY) && !env.CI && env.TERM !== \"dumb\");\nconst replaceClose = (str, close, replace, index)=>{\n    const start = str.substring(0, index) + replace;\n    const end = str.substring(index + close.length);\n    const nextIndex = end.indexOf(close);\n    return ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end;\n};\nconst formatter = (open, close, replace = open)=>{\n    if (!enabled) return String;\n    return (input)=>{\n        const string = \"\" + input;\n        const index = string.indexOf(close, open.length);\n        return ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close;\n    };\n};\nconst reset = enabled ? (s)=>`\\x1b[0m${s}\\x1b[0m` : String;\nconst bold = formatter(\"\\x1b[1m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[1m\");\nconst dim = formatter(\"\\x1b[2m\", \"\\x1b[22m\", \"\\x1b[22m\\x1b[2m\");\nconst italic = formatter(\"\\x1b[3m\", \"\\x1b[23m\");\nconst underline = formatter(\"\\x1b[4m\", \"\\x1b[24m\");\nconst inverse = formatter(\"\\x1b[7m\", \"\\x1b[27m\");\nconst hidden = formatter(\"\\x1b[8m\", \"\\x1b[28m\");\nconst strikethrough = formatter(\"\\x1b[9m\", \"\\x1b[29m\");\nconst black = formatter(\"\\x1b[30m\", \"\\x1b[39m\");\nconst red = formatter(\"\\x1b[31m\", \"\\x1b[39m\");\nconst green = formatter(\"\\x1b[32m\", \"\\x1b[39m\");\nconst yellow = formatter(\"\\x1b[33m\", \"\\x1b[39m\");\nconst blue = formatter(\"\\x1b[34m\", \"\\x1b[39m\");\nconst magenta = formatter(\"\\x1b[35m\", \"\\x1b[39m\");\nconst purple = formatter(\"\\x1b[38;2;173;127;168m\", \"\\x1b[39m\");\nconst cyan = formatter(\"\\x1b[36m\", \"\\x1b[39m\");\nconst white = formatter(\"\\x1b[37m\", \"\\x1b[39m\");\nconst gray = formatter(\"\\x1b[90m\", \"\\x1b[39m\");\nconst bgBlack = formatter(\"\\x1b[40m\", \"\\x1b[49m\");\nconst bgRed = formatter(\"\\x1b[41m\", \"\\x1b[49m\");\nconst bgGreen = formatter(\"\\x1b[42m\", \"\\x1b[49m\");\nconst bgYellow = formatter(\"\\x1b[43m\", \"\\x1b[49m\");\nconst bgBlue = formatter(\"\\x1b[44m\", \"\\x1b[49m\");\nconst bgMagenta = formatter(\"\\x1b[45m\", \"\\x1b[49m\");\nconst bgCyan = formatter(\"\\x1b[46m\", \"\\x1b[49m\");\nconst bgWhite = formatter(\"\\x1b[47m\", \"\\x1b[49m\");\n\n//# sourceMappingURL=picocolors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/lib/picocolors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/lib/url.js":
/*!*******************************************!*\
  !*** ./node_modules/next/dist/lib/url.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getPathname: function() {\n        return getPathname;\n    },\n    isFullStringUrl: function() {\n        return isFullStringUrl;\n    }\n});\nconst DUMMY_ORIGIN = \"http://n\";\nfunction getUrlWithoutHost(url) {\n    return new URL(url, DUMMY_ORIGIN);\n}\nfunction getPathname(url) {\n    return getUrlWithoutHost(url).pathname;\n}\nfunction isFullStringUrl(url) {\n    return /https?:\\/\\//.test(url);\n}\n\n//# sourceMappingURL=url.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi91cmwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixNQUFNLENBR0w7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teXN0ZXJ5bWVzc2FnZS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvbGliL3VybC5qcz82M2M5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZ2V0UGF0aG5hbWU6IG51bGwsXG4gICAgaXNGdWxsU3RyaW5nVXJsOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIGdldFBhdGhuYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldFBhdGhuYW1lO1xuICAgIH0sXG4gICAgaXNGdWxsU3RyaW5nVXJsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGlzRnVsbFN0cmluZ1VybDtcbiAgICB9XG59KTtcbmNvbnN0IERVTU1ZX09SSUdJTiA9IFwiaHR0cDovL25cIjtcbmZ1bmN0aW9uIGdldFVybFdpdGhvdXRIb3N0KHVybCkge1xuICAgIHJldHVybiBuZXcgVVJMKHVybCwgRFVNTVlfT1JJR0lOKTtcbn1cbmZ1bmN0aW9uIGdldFBhdGhuYW1lKHVybCkge1xuICAgIHJldHVybiBnZXRVcmxXaXRob3V0SG9zdCh1cmwpLnBhdGhuYW1lO1xufVxuZnVuY3Rpb24gaXNGdWxsU3RyaW5nVXJsKHVybCkge1xuICAgIHJldHVybiAvaHR0cHM/OlxcL1xcLy8udGVzdCh1cmwpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/lib/url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/app-render/dynamic-rendering.js":
/*!***********************************************************************!*\
  !*** ./node_modules/next/dist/server/app-render/dynamic-rendering.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * The functions provided by this module are used to communicate certain properties\n * about the currently running code so that Next.js can make decisions on how to handle\n * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.\n *\n * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.\n * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts\n * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of\n * Dynamic indications.\n *\n * The first is simply an intention to be dynamic. unstable_noStore is an example of this where\n * the currently executing code simply declares that the current scope is dynamic but if you use it\n * inside unstable_cache it can still be cached. This type of indication can be removed if we ever\n * make the default dynamic to begin with because the only way you would ever be static is inside\n * a cache scope which this indication does not affect.\n *\n * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic\n * because it means that it is inappropriate to cache this at all. using a dynamic data source inside\n * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should\n * read that data outside the cache and pass it in as an argument to the cached function.\n */ // Once postpone is in stable we should switch to importing the postpone export directly\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    Postpone: function() {\n        return Postpone;\n    },\n    createPostponedAbortSignal: function() {\n        return createPostponedAbortSignal;\n    },\n    createPrerenderState: function() {\n        return createPrerenderState;\n    },\n    formatDynamicAPIAccesses: function() {\n        return formatDynamicAPIAccesses;\n    },\n    markCurrentScopeAsDynamic: function() {\n        return markCurrentScopeAsDynamic;\n    },\n    trackDynamicDataAccessed: function() {\n        return trackDynamicDataAccessed;\n    },\n    trackDynamicFetch: function() {\n        return trackDynamicFetch;\n    },\n    usedDynamicAPIs: function() {\n        return usedDynamicAPIs;\n    }\n});\nconst _react = /*#__PURE__*/ _interop_require_default(__webpack_require__(/*! react */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react.js\"));\nconst _hooksservercontext = __webpack_require__(/*! ../../client/components/hooks-server-context */ \"(rsc)/./node_modules/next/dist/client/components/hooks-server-context.js\");\nconst _staticgenerationbailout = __webpack_require__(/*! ../../client/components/static-generation-bailout */ \"(rsc)/./node_modules/next/dist/client/components/static-generation-bailout.js\");\nconst _url = __webpack_require__(/*! ../../lib/url */ \"(rsc)/./node_modules/next/dist/lib/url.js\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst hasPostpone = typeof _react.default.unstable_postpone === \"function\";\nfunction createPrerenderState(isDebugSkeleton) {\n    return {\n        isDebugSkeleton,\n        dynamicAccesses: []\n    };\n}\nfunction markCurrentScopeAsDynamic(store, expression) {\n    const pathname = (0, _url.getPathname)(store.urlPathname);\n    if (store.isUnstableCacheCallback) {\n        // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope\n        // creates a cache boundary. This is subtly different from reading a dynamic data source which is\n        // forbidden inside a cache scope.\n        return;\n    } else if (store.dynamicShouldError) {\n        throw new _staticgenerationbailout.StaticGenBailoutError(`Route ${pathname} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);\n    } else if (// We are in a prerender (PPR enabled, during build)\n    store.prerenderState) {\n        // We track that we had a dynamic scope that postponed.\n        // This will be used by the renderer to decide whether\n        // the prerender requires a resume\n        postponeWithTracking(store.prerenderState, expression, pathname);\n    } else {\n        store.revalidate = 0;\n        if (store.isStaticGeneration) {\n            // We aren't prerendering but we are generating a static page. We need to bail out of static generation\n            const err = new _hooksservercontext.DynamicServerError(`Route ${pathname} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`);\n            store.dynamicUsageDescription = expression;\n            store.dynamicUsageStack = err.stack;\n            throw err;\n        }\n    }\n}\nfunction trackDynamicDataAccessed(store, expression) {\n    const pathname = (0, _url.getPathname)(store.urlPathname);\n    if (store.isUnstableCacheCallback) {\n        throw new Error(`Route ${pathname} used \"${expression}\" inside a function cached with \"unstable_cache(...)\". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use \"${expression}\" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`);\n    } else if (store.dynamicShouldError) {\n        throw new _staticgenerationbailout.StaticGenBailoutError(`Route ${pathname} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);\n    } else if (// We are in a prerender (PPR enabled, during build)\n    store.prerenderState) {\n        // We track that we had a dynamic scope that postponed.\n        // This will be used by the renderer to decide whether\n        // the prerender requires a resume\n        postponeWithTracking(store.prerenderState, expression, pathname);\n    } else {\n        store.revalidate = 0;\n        if (store.isStaticGeneration) {\n            // We aren't prerendering but we are generating a static page. We need to bail out of static generation\n            const err = new _hooksservercontext.DynamicServerError(`Route ${pathname} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`);\n            store.dynamicUsageDescription = expression;\n            store.dynamicUsageStack = err.stack;\n            throw err;\n        }\n    }\n}\nfunction Postpone({ reason, prerenderState, pathname }) {\n    postponeWithTracking(prerenderState, reason, pathname);\n}\nfunction trackDynamicFetch(store, expression) {\n    if (store.prerenderState) {\n        postponeWithTracking(store.prerenderState, expression, store.urlPathname);\n    }\n}\nfunction postponeWithTracking(prerenderState, expression, pathname) {\n    assertPostpone();\n    const reason = `Route ${pathname} needs to bail out of prerendering at this point because it used ${expression}. ` + `React throws this special object to indicate where. It should not be caught by ` + `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`;\n    prerenderState.dynamicAccesses.push({\n        // When we aren't debugging, we don't need to create another error for the\n        // stack trace.\n        stack: prerenderState.isDebugSkeleton ? new Error().stack : undefined,\n        expression\n    });\n    _react.default.unstable_postpone(reason);\n}\nfunction usedDynamicAPIs(prerenderState) {\n    return prerenderState.dynamicAccesses.length > 0;\n}\nfunction formatDynamicAPIAccesses(prerenderState) {\n    return prerenderState.dynamicAccesses.filter((access)=>typeof access.stack === \"string\" && access.stack.length > 0).map(({ expression, stack })=>{\n        stack = stack.split(\"\\n\")// Remove the \"Error: \" prefix from the first line of the stack trace as\n        // well as the first 4 lines of the stack trace which is the distance\n        // from the user code and the `new Error().stack` call.\n        .slice(4).filter((line)=>{\n            // Exclude Next.js internals from the stack trace.\n            if (line.includes(\"node_modules/next/\")) {\n                return false;\n            }\n            // Exclude anonymous functions from the stack trace.\n            if (line.includes(\" (<anonymous>)\")) {\n                return false;\n            }\n            // Exclude Node.js internals from the stack trace.\n            if (line.includes(\" (node:\")) {\n                return false;\n            }\n            return true;\n        }).join(\"\\n\");\n        return `Dynamic API Usage Debug - ${expression}:\\n${stack}`;\n    });\n}\nfunction assertPostpone() {\n    if (!hasPostpone) {\n        throw new Error(`Invariant: React.unstable_postpone is not defined. This suggests the wrong version of React was loaded. This is a bug in Next.js`);\n    }\n}\nfunction createPostponedAbortSignal(reason) {\n    assertPostpone();\n    const controller = new AbortController();\n    // We get our hands on a postpone instance by calling postpone and catching the throw\n    try {\n        _react.default.unstable_postpone(reason);\n    } catch (x) {\n        controller.abort(x);\n    }\n    return controller.signal;\n}\n\n//# sourceMappingURL=dynamic-rendering.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9hcHAtcmVuZGVyL2R5bmFtaWMtcmVuZGVyaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNhO0FBQ2IsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsTUFBTSxDQVNMO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHNEQUFzRCxtQkFBTyxDQUFDLHdHQUFPO0FBQ3JFLDRCQUE0QixtQkFBTyxDQUFDLDhIQUE4QztBQUNsRixpQ0FBaUMsbUJBQU8sQ0FBQyx3SUFBbUQ7QUFDNUYsYUFBYSxtQkFBTyxDQUFDLGdFQUFlO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLDBFQUEwRSxVQUFVLCtFQUErRSxXQUFXO0FBQzlLLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSxVQUFVLGtEQUFrRCxXQUFXO0FBQ25KO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxVQUFVLFFBQVEsV0FBVyxtTEFBbUwsV0FBVztBQUM1UCxNQUFNO0FBQ04sMEVBQTBFLFVBQVUsK0VBQStFLFdBQVc7QUFDOUssTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLFVBQVUsa0RBQWtELFdBQVc7QUFDbko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtDQUFrQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsVUFBVSxrRUFBa0UsV0FBVztBQUNuSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtIQUErSCxtQkFBbUI7QUFDbEo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCw0Q0FBNEMsV0FBVyxLQUFLLE1BQU07QUFDbEUsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL215c3RlcnltZXNzYWdlLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvYXBwLXJlbmRlci9keW5hbWljLXJlbmRlcmluZy5qcz81YWI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGZ1bmN0aW9ucyBwcm92aWRlZCBieSB0aGlzIG1vZHVsZSBhcmUgdXNlZCB0byBjb21tdW5pY2F0ZSBjZXJ0YWluIHByb3BlcnRpZXNcbiAqIGFib3V0IHRoZSBjdXJyZW50bHkgcnVubmluZyBjb2RlIHNvIHRoYXQgTmV4dC5qcyBjYW4gbWFrZSBkZWNpc2lvbnMgb24gaG93IHRvIGhhbmRsZVxuICogdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGluIGRpZmZlcmVudCByZW5kZXJpbmcgbW9kZXMgc3VjaCBhcyBwcmUtcmVuZGVyaW5nLCByZXN1bWluZywgYW5kIFNTUi5cbiAqXG4gKiBUb2RheSBOZXh0LmpzIHRyZWF0cyBhbGwgY29kZSBhcyBwb3RlbnRpYWxseSBzdGF0aWMuIENlcnRhaW4gQVBJcyBtYXkgb25seSBtYWtlIHNlbnNlIHdoZW4gZHluYW1pY2FsbHkgcmVuZGVyaW5nLlxuICogVHJhZGl0aW9uYWxseSB0aGlzIG1lYW50IGRlb3B0aW5nIHRoZSBlbnRpcmUgcmVuZGVyIHRvIGR5bmFtaWMgaG93ZXZlciB3aXRoIFBQUiB3ZSBjYW4gbm93IGRlb3B0IHBhcnRzXG4gKiBvZiBhIFJlYWN0IHRyZWUgYXMgZHluYW1pYyB3aGlsZSBzdGlsbCBrZWVwaW5nIG90aGVyIHBhcnRzIHN0YXRpYy4gVGhlcmUgYXJlIHJlYWxseSB0d28gZGlmZmVyZW50IGtpbmRzIG9mXG4gKiBEeW5hbWljIGluZGljYXRpb25zLlxuICpcbiAqIFRoZSBmaXJzdCBpcyBzaW1wbHkgYW4gaW50ZW50aW9uIHRvIGJlIGR5bmFtaWMuIHVuc3RhYmxlX25vU3RvcmUgaXMgYW4gZXhhbXBsZSBvZiB0aGlzIHdoZXJlXG4gKiB0aGUgY3VycmVudGx5IGV4ZWN1dGluZyBjb2RlIHNpbXBseSBkZWNsYXJlcyB0aGF0IHRoZSBjdXJyZW50IHNjb3BlIGlzIGR5bmFtaWMgYnV0IGlmIHlvdSB1c2UgaXRcbiAqIGluc2lkZSB1bnN0YWJsZV9jYWNoZSBpdCBjYW4gc3RpbGwgYmUgY2FjaGVkLiBUaGlzIHR5cGUgb2YgaW5kaWNhdGlvbiBjYW4gYmUgcmVtb3ZlZCBpZiB3ZSBldmVyXG4gKiBtYWtlIHRoZSBkZWZhdWx0IGR5bmFtaWMgdG8gYmVnaW4gd2l0aCBiZWNhdXNlIHRoZSBvbmx5IHdheSB5b3Ugd291bGQgZXZlciBiZSBzdGF0aWMgaXMgaW5zaWRlXG4gKiBhIGNhY2hlIHNjb3BlIHdoaWNoIHRoaXMgaW5kaWNhdGlvbiBkb2VzIG5vdCBhZmZlY3QuXG4gKlxuICogVGhlIHNlY29uZCBpcyBhbiBpbmRpY2F0aW9uIHRoYXQgYSBkeW5hbWljIGRhdGEgc291cmNlIHdhcyByZWFkLiBUaGlzIGlzIGEgc3Ryb25nZXIgZm9ybSBvZiBkeW5hbWljXG4gKiBiZWNhdXNlIGl0IG1lYW5zIHRoYXQgaXQgaXMgaW5hcHByb3ByaWF0ZSB0byBjYWNoZSB0aGlzIGF0IGFsbC4gdXNpbmcgYSBkeW5hbWljIGRhdGEgc291cmNlIGluc2lkZVxuICogdW5zdGFibGVfY2FjaGUgc2hvdWxkIGVycm9yLiBJZiB5b3Ugd2FudCB0byB1c2Ugc29tZSBkeW5hbWljIGRhdGEgaW5zaWRlIHVuc3RhYmxlX2NhY2hlIHlvdSBzaG91bGRcbiAqIHJlYWQgdGhhdCBkYXRhIG91dHNpZGUgdGhlIGNhY2hlIGFuZCBwYXNzIGl0IGluIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBjYWNoZWQgZnVuY3Rpb24uXG4gKi8gLy8gT25jZSBwb3N0cG9uZSBpcyBpbiBzdGFibGUgd2Ugc2hvdWxkIHN3aXRjaCB0byBpbXBvcnRpbmcgdGhlIHBvc3Rwb25lIGV4cG9ydCBkaXJlY3RseVxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBQb3N0cG9uZTogbnVsbCxcbiAgICBjcmVhdGVQb3N0cG9uZWRBYm9ydFNpZ25hbDogbnVsbCxcbiAgICBjcmVhdGVQcmVyZW5kZXJTdGF0ZTogbnVsbCxcbiAgICBmb3JtYXREeW5hbWljQVBJQWNjZXNzZXM6IG51bGwsXG4gICAgbWFya0N1cnJlbnRTY29wZUFzRHluYW1pYzogbnVsbCxcbiAgICB0cmFja0R5bmFtaWNEYXRhQWNjZXNzZWQ6IG51bGwsXG4gICAgdHJhY2tEeW5hbWljRmV0Y2g6IG51bGwsXG4gICAgdXNlZER5bmFtaWNBUElzOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIFBvc3Rwb25lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFBvc3Rwb25lO1xuICAgIH0sXG4gICAgY3JlYXRlUG9zdHBvbmVkQWJvcnRTaWduYWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlUG9zdHBvbmVkQWJvcnRTaWduYWw7XG4gICAgfSxcbiAgICBjcmVhdGVQcmVyZW5kZXJTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVQcmVyZW5kZXJTdGF0ZTtcbiAgICB9LFxuICAgIGZvcm1hdER5bmFtaWNBUElBY2Nlc3NlczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXREeW5hbWljQVBJQWNjZXNzZXM7XG4gICAgfSxcbiAgICBtYXJrQ3VycmVudFNjb3BlQXNEeW5hbWljOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtDdXJyZW50U2NvcGVBc0R5bmFtaWM7XG4gICAgfSxcbiAgICB0cmFja0R5bmFtaWNEYXRhQWNjZXNzZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdHJhY2tEeW5hbWljRGF0YUFjY2Vzc2VkO1xuICAgIH0sXG4gICAgdHJhY2tEeW5hbWljRmV0Y2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdHJhY2tEeW5hbWljRmV0Y2g7XG4gICAgfSxcbiAgICB1c2VkRHluYW1pY0FQSXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdXNlZER5bmFtaWNBUElzO1xuICAgIH1cbn0pO1xuY29uc3QgX3JlYWN0ID0gLyojX19QVVJFX18qLyBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbmNvbnN0IF9ob29rc3NlcnZlcmNvbnRleHQgPSByZXF1aXJlKFwiLi4vLi4vY2xpZW50L2NvbXBvbmVudHMvaG9va3Mtc2VydmVyLWNvbnRleHRcIik7XG5jb25zdCBfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQgPSByZXF1aXJlKFwiLi4vLi4vY2xpZW50L2NvbXBvbmVudHMvc3RhdGljLWdlbmVyYXRpb24tYmFpbG91dFwiKTtcbmNvbnN0IF91cmwgPSByZXF1aXJlKFwiLi4vLi4vbGliL3VybFwiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xufVxuY29uc3QgaGFzUG9zdHBvbmUgPSB0eXBlb2YgX3JlYWN0LmRlZmF1bHQudW5zdGFibGVfcG9zdHBvbmUgPT09IFwiZnVuY3Rpb25cIjtcbmZ1bmN0aW9uIGNyZWF0ZVByZXJlbmRlclN0YXRlKGlzRGVidWdTa2VsZXRvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlzRGVidWdTa2VsZXRvbixcbiAgICAgICAgZHluYW1pY0FjY2Vzc2VzOiBbXVxuICAgIH07XG59XG5mdW5jdGlvbiBtYXJrQ3VycmVudFNjb3BlQXNEeW5hbWljKHN0b3JlLCBleHByZXNzaW9uKSB7XG4gICAgY29uc3QgcGF0aG5hbWUgPSAoMCwgX3VybC5nZXRQYXRobmFtZSkoc3RvcmUudXJsUGF0aG5hbWUpO1xuICAgIGlmIChzdG9yZS5pc1Vuc3RhYmxlQ2FjaGVDYWxsYmFjaykge1xuICAgICAgICAvLyBpbnNpZGUgY2FjaGUgc2NvcGVzIG1hcmtpbmcgYSBzY29wZSBhcyBkeW5hbWljIGhhcyBubyBlZmZlY3QgYmVjYXVzZSB0aGUgb3V0ZXIgY2FjaGUgc2NvcGVcbiAgICAgICAgLy8gY3JlYXRlcyBhIGNhY2hlIGJvdW5kYXJ5LiBUaGlzIGlzIHN1YnRseSBkaWZmZXJlbnQgZnJvbSByZWFkaW5nIGEgZHluYW1pYyBkYXRhIHNvdXJjZSB3aGljaCBpc1xuICAgICAgICAvLyBmb3JiaWRkZW4gaW5zaWRlIGEgY2FjaGUgc2NvcGUuXG4gICAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKHN0b3JlLmR5bmFtaWNTaG91bGRFcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgX3N0YXRpY2dlbmVyYXRpb25iYWlsb3V0LlN0YXRpY0dlbkJhaWxvdXRFcnJvcihgUm91dGUgJHtwYXRobmFtZX0gd2l0aCBcXGBkeW5hbWljID0gXCJlcnJvclwiXFxgIGNvdWxkbid0IGJlIHJlbmRlcmVkIHN0YXRpY2FsbHkgYmVjYXVzZSBpdCB1c2VkIFxcYCR7ZXhwcmVzc2lvbn1cXGAuIFNlZSBtb3JlIGluZm8gaGVyZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vcmVuZGVyaW5nL3N0YXRpYy1hbmQtZHluYW1pYyNkeW5hbWljLXJlbmRlcmluZ2ApO1xuICAgIH0gZWxzZSBpZiAoLy8gV2UgYXJlIGluIGEgcHJlcmVuZGVyIChQUFIgZW5hYmxlZCwgZHVyaW5nIGJ1aWxkKVxuICAgIHN0b3JlLnByZXJlbmRlclN0YXRlKSB7XG4gICAgICAgIC8vIFdlIHRyYWNrIHRoYXQgd2UgaGFkIGEgZHluYW1pYyBzY29wZSB0aGF0IHBvc3Rwb25lZC5cbiAgICAgICAgLy8gVGhpcyB3aWxsIGJlIHVzZWQgYnkgdGhlIHJlbmRlcmVyIHRvIGRlY2lkZSB3aGV0aGVyXG4gICAgICAgIC8vIHRoZSBwcmVyZW5kZXIgcmVxdWlyZXMgYSByZXN1bWVcbiAgICAgICAgcG9zdHBvbmVXaXRoVHJhY2tpbmcoc3RvcmUucHJlcmVuZGVyU3RhdGUsIGV4cHJlc3Npb24sIHBhdGhuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdG9yZS5yZXZhbGlkYXRlID0gMDtcbiAgICAgICAgaWYgKHN0b3JlLmlzU3RhdGljR2VuZXJhdGlvbikge1xuICAgICAgICAgICAgLy8gV2UgYXJlbid0IHByZXJlbmRlcmluZyBidXQgd2UgYXJlIGdlbmVyYXRpbmcgYSBzdGF0aWMgcGFnZS4gV2UgbmVlZCB0byBiYWlsIG91dCBvZiBzdGF0aWMgZ2VuZXJhdGlvblxuICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IF9ob29rc3NlcnZlcmNvbnRleHQuRHluYW1pY1NlcnZlckVycm9yKGBSb3V0ZSAke3BhdGhuYW1lfSBjb3VsZG4ndCBiZSByZW5kZXJlZCBzdGF0aWNhbGx5IGJlY2F1c2UgaXQgdXNlZCAke2V4cHJlc3Npb259LiBTZWUgbW9yZSBpbmZvIGhlcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL2R5bmFtaWMtc2VydmVyLWVycm9yYCk7XG4gICAgICAgICAgICBzdG9yZS5keW5hbWljVXNhZ2VEZXNjcmlwdGlvbiA9IGV4cHJlc3Npb247XG4gICAgICAgICAgICBzdG9yZS5keW5hbWljVXNhZ2VTdGFjayA9IGVyci5zdGFjaztcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYWNrRHluYW1pY0RhdGFBY2Nlc3NlZChzdG9yZSwgZXhwcmVzc2lvbikge1xuICAgIGNvbnN0IHBhdGhuYW1lID0gKDAsIF91cmwuZ2V0UGF0aG5hbWUpKHN0b3JlLnVybFBhdGhuYW1lKTtcbiAgICBpZiAoc3RvcmUuaXNVbnN0YWJsZUNhY2hlQ2FsbGJhY2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSb3V0ZSAke3BhdGhuYW1lfSB1c2VkIFwiJHtleHByZXNzaW9ufVwiIGluc2lkZSBhIGZ1bmN0aW9uIGNhY2hlZCB3aXRoIFwidW5zdGFibGVfY2FjaGUoLi4uKVwiLiBBY2Nlc3NpbmcgRHluYW1pYyBkYXRhIHNvdXJjZXMgaW5zaWRlIGEgY2FjaGUgc2NvcGUgaXMgbm90IHN1cHBvcnRlZC4gSWYgeW91IG5lZWQgdGhpcyBkYXRhIGluc2lkZSBhIGNhY2hlZCBmdW5jdGlvbiB1c2UgXCIke2V4cHJlc3Npb259XCIgb3V0c2lkZSBvZiB0aGUgY2FjaGVkIGZ1bmN0aW9uIGFuZCBwYXNzIHRoZSByZXF1aXJlZCBkeW5hbWljIGRhdGEgaW4gYXMgYW4gYXJndW1lbnQuIFNlZSBtb3JlIGluZm8gaGVyZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvZnVuY3Rpb25zL3Vuc3RhYmxlX2NhY2hlYCk7XG4gICAgfSBlbHNlIGlmIChzdG9yZS5keW5hbWljU2hvdWxkRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IF9zdGF0aWNnZW5lcmF0aW9uYmFpbG91dC5TdGF0aWNHZW5CYWlsb3V0RXJyb3IoYFJvdXRlICR7cGF0aG5hbWV9IHdpdGggXFxgZHluYW1pYyA9IFwiZXJyb3JcIlxcYCBjb3VsZG4ndCBiZSByZW5kZXJlZCBzdGF0aWNhbGx5IGJlY2F1c2UgaXQgdXNlZCBcXGAke2V4cHJlc3Npb259XFxgLiBTZWUgbW9yZSBpbmZvIGhlcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwcC9idWlsZGluZy15b3VyLWFwcGxpY2F0aW9uL3JlbmRlcmluZy9zdGF0aWMtYW5kLWR5bmFtaWMjZHluYW1pYy1yZW5kZXJpbmdgKTtcbiAgICB9IGVsc2UgaWYgKC8vIFdlIGFyZSBpbiBhIHByZXJlbmRlciAoUFBSIGVuYWJsZWQsIGR1cmluZyBidWlsZClcbiAgICBzdG9yZS5wcmVyZW5kZXJTdGF0ZSkge1xuICAgICAgICAvLyBXZSB0cmFjayB0aGF0IHdlIGhhZCBhIGR5bmFtaWMgc2NvcGUgdGhhdCBwb3N0cG9uZWQuXG4gICAgICAgIC8vIFRoaXMgd2lsbCBiZSB1c2VkIGJ5IHRoZSByZW5kZXJlciB0byBkZWNpZGUgd2hldGhlclxuICAgICAgICAvLyB0aGUgcHJlcmVuZGVyIHJlcXVpcmVzIGEgcmVzdW1lXG4gICAgICAgIHBvc3Rwb25lV2l0aFRyYWNraW5nKHN0b3JlLnByZXJlbmRlclN0YXRlLCBleHByZXNzaW9uLCBwYXRobmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3RvcmUucmV2YWxpZGF0ZSA9IDA7XG4gICAgICAgIGlmIChzdG9yZS5pc1N0YXRpY0dlbmVyYXRpb24pIHtcbiAgICAgICAgICAgIC8vIFdlIGFyZW4ndCBwcmVyZW5kZXJpbmcgYnV0IHdlIGFyZSBnZW5lcmF0aW5nIGEgc3RhdGljIHBhZ2UuIFdlIG5lZWQgdG8gYmFpbCBvdXQgb2Ygc3RhdGljIGdlbmVyYXRpb25cbiAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBfaG9va3NzZXJ2ZXJjb250ZXh0LkR5bmFtaWNTZXJ2ZXJFcnJvcihgUm91dGUgJHtwYXRobmFtZX0gY291bGRuJ3QgYmUgcmVuZGVyZWQgc3RhdGljYWxseSBiZWNhdXNlIGl0IHVzZWQgJHtleHByZXNzaW9ufS4gU2VlIG1vcmUgaW5mbyBoZXJlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9keW5hbWljLXNlcnZlci1lcnJvcmApO1xuICAgICAgICAgICAgc3RvcmUuZHluYW1pY1VzYWdlRGVzY3JpcHRpb24gPSBleHByZXNzaW9uO1xuICAgICAgICAgICAgc3RvcmUuZHluYW1pY1VzYWdlU3RhY2sgPSBlcnIuc3RhY2s7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBQb3N0cG9uZSh7IHJlYXNvbiwgcHJlcmVuZGVyU3RhdGUsIHBhdGhuYW1lIH0pIHtcbiAgICBwb3N0cG9uZVdpdGhUcmFja2luZyhwcmVyZW5kZXJTdGF0ZSwgcmVhc29uLCBwYXRobmFtZSk7XG59XG5mdW5jdGlvbiB0cmFja0R5bmFtaWNGZXRjaChzdG9yZSwgZXhwcmVzc2lvbikge1xuICAgIGlmIChzdG9yZS5wcmVyZW5kZXJTdGF0ZSkge1xuICAgICAgICBwb3N0cG9uZVdpdGhUcmFja2luZyhzdG9yZS5wcmVyZW5kZXJTdGF0ZSwgZXhwcmVzc2lvbiwgc3RvcmUudXJsUGF0aG5hbWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBvc3Rwb25lV2l0aFRyYWNraW5nKHByZXJlbmRlclN0YXRlLCBleHByZXNzaW9uLCBwYXRobmFtZSkge1xuICAgIGFzc2VydFBvc3Rwb25lKCk7XG4gICAgY29uc3QgcmVhc29uID0gYFJvdXRlICR7cGF0aG5hbWV9IG5lZWRzIHRvIGJhaWwgb3V0IG9mIHByZXJlbmRlcmluZyBhdCB0aGlzIHBvaW50IGJlY2F1c2UgaXQgdXNlZCAke2V4cHJlc3Npb259LiBgICsgYFJlYWN0IHRocm93cyB0aGlzIHNwZWNpYWwgb2JqZWN0IHRvIGluZGljYXRlIHdoZXJlLiBJdCBzaG91bGQgbm90IGJlIGNhdWdodCBieSBgICsgYHlvdXIgb3duIHRyeS9jYXRjaC4gTGVhcm4gbW9yZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvcHByLWNhdWdodC1lcnJvcmA7XG4gICAgcHJlcmVuZGVyU3RhdGUuZHluYW1pY0FjY2Vzc2VzLnB1c2goe1xuICAgICAgICAvLyBXaGVuIHdlIGFyZW4ndCBkZWJ1Z2dpbmcsIHdlIGRvbid0IG5lZWQgdG8gY3JlYXRlIGFub3RoZXIgZXJyb3IgZm9yIHRoZVxuICAgICAgICAvLyBzdGFjayB0cmFjZS5cbiAgICAgICAgc3RhY2s6IHByZXJlbmRlclN0YXRlLmlzRGVidWdTa2VsZXRvbiA/IG5ldyBFcnJvcigpLnN0YWNrIDogdW5kZWZpbmVkLFxuICAgICAgICBleHByZXNzaW9uXG4gICAgfSk7XG4gICAgX3JlYWN0LmRlZmF1bHQudW5zdGFibGVfcG9zdHBvbmUocmVhc29uKTtcbn1cbmZ1bmN0aW9uIHVzZWREeW5hbWljQVBJcyhwcmVyZW5kZXJTdGF0ZSkge1xuICAgIHJldHVybiBwcmVyZW5kZXJTdGF0ZS5keW5hbWljQWNjZXNzZXMubGVuZ3RoID4gMDtcbn1cbmZ1bmN0aW9uIGZvcm1hdER5bmFtaWNBUElBY2Nlc3NlcyhwcmVyZW5kZXJTdGF0ZSkge1xuICAgIHJldHVybiBwcmVyZW5kZXJTdGF0ZS5keW5hbWljQWNjZXNzZXMuZmlsdGVyKChhY2Nlc3MpPT50eXBlb2YgYWNjZXNzLnN0YWNrID09PSBcInN0cmluZ1wiICYmIGFjY2Vzcy5zdGFjay5sZW5ndGggPiAwKS5tYXAoKHsgZXhwcmVzc2lvbiwgc3RhY2sgfSk9PntcbiAgICAgICAgc3RhY2sgPSBzdGFjay5zcGxpdChcIlxcblwiKS8vIFJlbW92ZSB0aGUgXCJFcnJvcjogXCIgcHJlZml4IGZyb20gdGhlIGZpcnN0IGxpbmUgb2YgdGhlIHN0YWNrIHRyYWNlIGFzXG4gICAgICAgIC8vIHdlbGwgYXMgdGhlIGZpcnN0IDQgbGluZXMgb2YgdGhlIHN0YWNrIHRyYWNlIHdoaWNoIGlzIHRoZSBkaXN0YW5jZVxuICAgICAgICAvLyBmcm9tIHRoZSB1c2VyIGNvZGUgYW5kIHRoZSBgbmV3IEVycm9yKCkuc3RhY2tgIGNhbGwuXG4gICAgICAgIC5zbGljZSg0KS5maWx0ZXIoKGxpbmUpPT57XG4gICAgICAgICAgICAvLyBFeGNsdWRlIE5leHQuanMgaW50ZXJuYWxzIGZyb20gdGhlIHN0YWNrIHRyYWNlLlxuICAgICAgICAgICAgaWYgKGxpbmUuaW5jbHVkZXMoXCJub2RlX21vZHVsZXMvbmV4dC9cIikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBFeGNsdWRlIGFub255bW91cyBmdW5jdGlvbnMgZnJvbSB0aGUgc3RhY2sgdHJhY2UuXG4gICAgICAgICAgICBpZiAobGluZS5pbmNsdWRlcyhcIiAoPGFub255bW91cz4pXCIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRXhjbHVkZSBOb2RlLmpzIGludGVybmFscyBmcm9tIHRoZSBzdGFjayB0cmFjZS5cbiAgICAgICAgICAgIGlmIChsaW5lLmluY2x1ZGVzKFwiIChub2RlOlwiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KS5qb2luKFwiXFxuXCIpO1xuICAgICAgICByZXR1cm4gYER5bmFtaWMgQVBJIFVzYWdlIERlYnVnIC0gJHtleHByZXNzaW9ufTpcXG4ke3N0YWNrfWA7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBhc3NlcnRQb3N0cG9uZSgpIHtcbiAgICBpZiAoIWhhc1Bvc3Rwb25lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YXJpYW50OiBSZWFjdC51bnN0YWJsZV9wb3N0cG9uZSBpcyBub3QgZGVmaW5lZC4gVGhpcyBzdWdnZXN0cyB0aGUgd3JvbmcgdmVyc2lvbiBvZiBSZWFjdCB3YXMgbG9hZGVkLiBUaGlzIGlzIGEgYnVnIGluIE5leHQuanNgKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVQb3N0cG9uZWRBYm9ydFNpZ25hbChyZWFzb24pIHtcbiAgICBhc3NlcnRQb3N0cG9uZSgpO1xuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgLy8gV2UgZ2V0IG91ciBoYW5kcyBvbiBhIHBvc3Rwb25lIGluc3RhbmNlIGJ5IGNhbGxpbmcgcG9zdHBvbmUgYW5kIGNhdGNoaW5nIHRoZSB0aHJvd1xuICAgIHRyeSB7XG4gICAgICAgIF9yZWFjdC5kZWZhdWx0LnVuc3RhYmxlX3Bvc3Rwb25lKHJlYXNvbik7XG4gICAgfSBjYXRjaCAoeCkge1xuICAgICAgICBjb250cm9sbGVyLmFib3J0KHgpO1xuICAgIH1cbiAgICByZXR1cm4gY29udHJvbGxlci5zaWduYWw7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWR5bmFtaWMtcmVuZGVyaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/app-render/dynamic-rendering.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-kind.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-kind.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RouteKind\", ({\n    enumerable: true,\n    get: function() {\n        return RouteKind;\n    }\n}));\nvar RouteKind;\n(function(RouteKind) {\n    /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */ RouteKind[\"PAGES\"] = \"PAGES\";\n    /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */ RouteKind[\"PAGES_API\"] = \"PAGES_API\";\n    /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */ RouteKind[\"APP_PAGE\"] = \"APP_PAGE\";\n    /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */ RouteKind[\"APP_ROUTE\"] = \"APP_ROUTE\";\n})(RouteKind || (RouteKind = {}));\n\n//# sourceMappingURL=route-kind.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLDZDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLElBQUksRUFBRSxHQUFHO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixJQUFJLEVBQUUsR0FBRztBQUNsQztBQUNBLENBQUMsOEJBQThCOztBQUUvQiIsInNvdXJjZXMiOlsid2VicGFjazovL215c3RlcnltZXNzYWdlLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmQuanM/OGYzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJvdXRlS2luZFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUm91dGVLaW5kO1xuICAgIH1cbn0pO1xudmFyIFJvdXRlS2luZDtcbihmdW5jdGlvbihSb3V0ZUtpbmQpIHtcbiAgICAvKipcbiAgICogYFBBR0VTYCByZXByZXNlbnRzIGFsbCB0aGUgUmVhY3QgcGFnZXMgdGhhdCBhcmUgdW5kZXIgYHBhZ2VzL2AuXG4gICAqLyBSb3V0ZUtpbmRbXCJQQUdFU1wiXSA9IFwiUEFHRVNcIjtcbiAgICAvKipcbiAgICogYFBBR0VTX0FQSWAgcmVwcmVzZW50cyBhbGwgdGhlIEFQSSByb3V0ZXMgdW5kZXIgYHBhZ2VzL2FwaS9gLlxuICAgKi8gUm91dGVLaW5kW1wiUEFHRVNfQVBJXCJdID0gXCJQQUdFU19BUElcIjtcbiAgICAvKipcbiAgICogYEFQUF9QQUdFYCByZXByZXNlbnRzIGFsbCB0aGUgUmVhY3QgcGFnZXMgdGhhdCBhcmUgdW5kZXIgYGFwcC9gIHdpdGggdGhlXG4gICAqIGZpbGVuYW1lIG9mIGBwYWdlLntqLHR9c3sseH1gLlxuICAgKi8gUm91dGVLaW5kW1wiQVBQX1BBR0VcIl0gPSBcIkFQUF9QQUdFXCI7XG4gICAgLyoqXG4gICAqIGBBUFBfUk9VVEVgIHJlcHJlc2VudHMgYWxsIHRoZSBBUEkgcm91dGVzIGFuZCBtZXRhZGF0YSByb3V0ZXMgdGhhdCBhcmUgdW5kZXIgYGFwcC9gIHdpdGggdGhlXG4gICAqIGZpbGVuYW1lIG9mIGByb3V0ZS57aix0fXN7LHh9YC5cbiAgICovIFJvdXRlS2luZFtcIkFQUF9ST1VURVwiXSA9IFwiQVBQX1JPVVRFXCI7XG59KShSb3V0ZUtpbmQgfHwgKFJvdXRlS2luZCA9IHt9KSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlLWtpbmQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-kind.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/module.compiled.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-page/module.compiled.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nif (false) {} else {\n    if (false) {} else {\n        if (true) {\n            module.exports = __webpack_require__(/*! next/dist/compiled/next-server/app-page.runtime.dev.js */ \"next/dist/compiled/next-server/app-page.runtime.dev.js\");\n        } else {}\n    }\n}\n\n//# sourceMappingURL=module.compiled.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcGFnZS9tb2R1bGUuY29tcGlsZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJLEtBQW1DLEVBQUUsRUFFeEMsQ0FBQztBQUNGLFFBQVEsS0FBcUMsRUFBRSxFQVExQyxDQUFDO0FBQ04sWUFBWSxJQUFzQztBQUNsRCxZQUFZLDRKQUFrRjtBQUM5RixVQUFVLEtBQUssRUFJTjtBQUNUO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teXN0ZXJ5bWVzc2FnZS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1wYWdlL21vZHVsZS5jb21waWxlZC5qcz9kMzY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaWYgKHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSA9PT0gXCJlZGdlXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1wYWdlL21vZHVsZS5qc1wiKTtcbn0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9FWFBFUklNRU5UQUxfUkVBQ1QpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9uZXh0LXNlcnZlci9hcHAtcGFnZS1leHBlcmltZW50YWwucnVudGltZS5kZXYuanNcIik7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuVFVSQk9QQUNLKSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvbmV4dC1zZXJ2ZXIvYXBwLXBhZ2UtdHVyYm8tZXhwZXJpbWVudGFsLnJ1bnRpbWUucHJvZC5qc1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9uZXh0LXNlcnZlci9hcHAtcGFnZS1leHBlcmltZW50YWwucnVudGltZS5wcm9kLmpzXCIpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9uZXh0LXNlcnZlci9hcHAtcGFnZS5ydW50aW1lLmRldi5qc1wiKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5UVVJCT1BBQ0spIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9uZXh0LXNlcnZlci9hcHAtcGFnZS10dXJiby5ydW50aW1lLnByb2QuanNcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvbmV4dC1zZXJ2ZXIvYXBwLXBhZ2UucnVudGltZS5wcm9kLmpzXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUuY29tcGlsZWQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/module.compiled.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-dom.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-dom.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ../../module.compiled */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/module.compiled.js\").vendored[\"react-rsc\"].ReactDOM;\n\n//# sourceMappingURL=react-dom.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcGFnZS92ZW5kb3JlZC9yc2MvcmVhY3QtZG9tLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsMExBQWdGOztBQUVoRiIsInNvdXJjZXMiOlsid2VicGFjazovL215c3RlcnltZXNzYWdlLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXBhZ2UvdmVuZG9yZWQvcnNjL3JlYWN0LWRvbS5qcz85NzZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbW9kdWxlLmNvbXBpbGVkXCIpLnZlbmRvcmVkW1wicmVhY3QtcnNjXCJdLlJlYWN0RE9NO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1kb20uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-dom.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.js ***!
  \***********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ../../module.compiled */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/module.compiled.js\").vendored[\"react-rsc\"].ReactJsxDevRuntime;\n\n//# sourceMappingURL=react-jsx-dev-runtime.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcGFnZS92ZW5kb3JlZC9yc2MvcmVhY3QtanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2Isb01BQTBGOztBQUUxRiIsInNvdXJjZXMiOlsid2VicGFjazovL215c3RlcnltZXNzYWdlLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXBhZ2UvdmVuZG9yZWQvcnNjL3JlYWN0LWpzeC1kZXYtcnVudGltZS5qcz83ZTVlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbW9kdWxlLmNvbXBpbGVkXCIpLnZlbmRvcmVkW1wicmVhY3QtcnNjXCJdLlJlYWN0SnN4RGV2UnVudGltZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3QtanN4LWRldi1ydW50aW1lLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-runtime.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-runtime.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ../../module.compiled */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/module.compiled.js\").vendored[\"react-rsc\"].ReactJsxRuntime;\n\n//# sourceMappingURL=react-jsx-runtime.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcGFnZS92ZW5kb3JlZC9yc2MvcmVhY3QtanN4LXJ1bnRpbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixpTUFBdUY7O0FBRXZGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlzdGVyeW1lc3NhZ2UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcGFnZS92ZW5kb3JlZC9yc2MvcmVhY3QtanN4LXJ1bnRpbWUuanM/ZThjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL21vZHVsZS5jb21waWxlZFwiKS52ZW5kb3JlZFtcInJlYWN0LXJzY1wiXS5SZWFjdEpzeFJ1bnRpbWU7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LWpzeC1ydW50aW1lLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-runtime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ../../module.compiled */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/module.compiled.js\").vendored[\"react-rsc\"].React;\n\n//# sourceMappingURL=react.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcGFnZS92ZW5kb3JlZC9yc2MvcmVhY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYix1TEFBNkU7O0FBRTdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlzdGVyeW1lc3NhZ2UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcGFnZS92ZW5kb3JlZC9yc2MvcmVhY3QuanM/ZTk1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL21vZHVsZS5jb21waWxlZFwiKS52ZW5kb3JlZFtcInJlYWN0LXJzY1wiXS5SZWFjdDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nif (false) {} else {\n    if (false) {} else {\n        if (true) {\n            module.exports = __webpack_require__(/*! next/dist/compiled/next-server/app-route.runtime.dev.js */ \"next/dist/compiled/next-server/app-route.runtime.dev.js\");\n        } else {}\n    }\n}\n\n//# sourceMappingURL=module.compiled.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSSxLQUFtQyxFQUFFLEVBRXhDLENBQUM7QUFDRixRQUFRLEtBQXFDLEVBQUUsRUFRMUMsQ0FBQztBQUNOLFlBQVksSUFBc0M7QUFDbEQsWUFBWSw4SkFBbUY7QUFDL0YsVUFBVSxLQUFLLEVBSU47QUFDVDtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlzdGVyeW1lc3NhZ2UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkLmpzPzkzMTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pZiAocHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FID09PSBcImVkZ2VcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5qc1wiKTtcbn0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9FWFBFUklNRU5UQUxfUkVBQ1QpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9uZXh0LXNlcnZlci9hcHAtcm91dGUtZXhwZXJpbWVudGFsLnJ1bnRpbWUuZGV2LmpzXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52LlRVUkJPUEFDSykge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibmV4dC9kaXN0L2NvbXBpbGVkL25leHQtc2VydmVyL2FwcC1yb3V0ZS10dXJiby1leHBlcmltZW50YWwucnVudGltZS5wcm9kLmpzXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibmV4dC9kaXN0L2NvbXBpbGVkL25leHQtc2VydmVyL2FwcC1yb3V0ZS1leHBlcmltZW50YWwucnVudGltZS5wcm9kLmpzXCIpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9uZXh0LXNlcnZlci9hcHAtcm91dGUucnVudGltZS5kZXYuanNcIik7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuVFVSQk9QQUNLKSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvbmV4dC1zZXJ2ZXIvYXBwLXJvdXRlLXR1cmJvLnJ1bnRpbWUucHJvZC5qc1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9uZXh0LXNlcnZlci9hcHAtcm91dGUucnVudGltZS5wcm9kLmpzXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUuY29tcGlsZWQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/server/lib/patch-fetch.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    addImplicitTags: function() {\n        return addImplicitTags;\n    },\n    patchFetch: function() {\n        return patchFetch;\n    },\n    validateRevalidate: function() {\n        return validateRevalidate;\n    },\n    validateTags: function() {\n        return validateTags;\n    }\n});\nconst _constants = __webpack_require__(/*! ./trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\nconst _tracer = __webpack_require__(/*! ./trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\nconst _constants1 = __webpack_require__(/*! ../../lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\nconst _log = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(/*! ../../build/output/log */ \"(rsc)/./node_modules/next/dist/build/output/log.js\"));\nconst _dynamicrendering = __webpack_require__(/*! ../app-render/dynamic-rendering */ \"(rsc)/./node_modules/next/dist/server/app-render/dynamic-rendering.js\");\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nconst isEdgeRuntime = \"nodejs\" === \"edge\";\nfunction isPatchedFetch(fetch) {\n    return \"__nextPatched\" in fetch && fetch.__nextPatched === true;\n}\nfunction validateRevalidate(revalidateVal, pathname) {\n    try {\n        let normalizedRevalidate = undefined;\n        if (revalidateVal === false) {\n            normalizedRevalidate = revalidateVal;\n        } else if (typeof revalidateVal === \"number\" && !isNaN(revalidateVal) && revalidateVal > -1) {\n            normalizedRevalidate = revalidateVal;\n        } else if (typeof revalidateVal !== \"undefined\") {\n            throw new Error(`Invalid revalidate value \"${revalidateVal}\" on \"${pathname}\", must be a non-negative number or \"false\"`);\n        }\n        return normalizedRevalidate;\n    } catch (err) {\n        // handle client component error from attempting to check revalidate value\n        if (err instanceof Error && err.message.includes(\"Invalid revalidate\")) {\n            throw err;\n        }\n        return undefined;\n    }\n}\nfunction validateTags(tags, description) {\n    const validTags = [];\n    const invalidTags = [];\n    for(let i = 0; i < tags.length; i++){\n        const tag = tags[i];\n        if (typeof tag !== \"string\") {\n            invalidTags.push({\n                tag,\n                reason: \"invalid type, must be a string\"\n            });\n        } else if (tag.length > _constants1.NEXT_CACHE_TAG_MAX_LENGTH) {\n            invalidTags.push({\n                tag,\n                reason: `exceeded max length of ${_constants1.NEXT_CACHE_TAG_MAX_LENGTH}`\n            });\n        } else {\n            validTags.push(tag);\n        }\n        if (validTags.length > _constants1.NEXT_CACHE_TAG_MAX_ITEMS) {\n            console.warn(`Warning: exceeded max tag count for ${description}, dropped tags:`, tags.slice(i).join(\", \"));\n            break;\n        }\n    }\n    if (invalidTags.length > 0) {\n        console.warn(`Warning: invalid tags passed to ${description}: `);\n        for (const { tag, reason } of invalidTags){\n            console.log(`tag: \"${tag}\" ${reason}`);\n        }\n    }\n    return validTags;\n}\nconst getDerivedTags = (pathname)=>{\n    const derivedTags = [\n        `/layout`\n    ];\n    // we automatically add the current path segments as tags\n    // for revalidatePath handling\n    if (pathname.startsWith(\"/\")) {\n        const pathnameParts = pathname.split(\"/\");\n        for(let i = 1; i < pathnameParts.length + 1; i++){\n            let curPathname = pathnameParts.slice(0, i).join(\"/\");\n            if (curPathname) {\n                // all derived tags other than the page are layout tags\n                if (!curPathname.endsWith(\"/page\") && !curPathname.endsWith(\"/route\")) {\n                    curPathname = `${curPathname}${!curPathname.endsWith(\"/\") ? \"/\" : \"\"}layout`;\n                }\n                derivedTags.push(curPathname);\n            }\n        }\n    }\n    return derivedTags;\n};\nfunction addImplicitTags(staticGenerationStore) {\n    const newTags = [];\n    const { pagePath, urlPathname } = staticGenerationStore;\n    if (!Array.isArray(staticGenerationStore.tags)) {\n        staticGenerationStore.tags = [];\n    }\n    if (pagePath) {\n        const derivedTags = getDerivedTags(pagePath);\n        for (let tag of derivedTags){\n            var _staticGenerationStore_tags;\n            tag = `${_constants1.NEXT_CACHE_IMPLICIT_TAG_ID}${tag}`;\n            if (!((_staticGenerationStore_tags = staticGenerationStore.tags) == null ? void 0 : _staticGenerationStore_tags.includes(tag))) {\n                staticGenerationStore.tags.push(tag);\n            }\n            newTags.push(tag);\n        }\n    }\n    if (urlPathname) {\n        var _staticGenerationStore_tags1;\n        const parsedPathname = new URL(urlPathname, \"http://n\").pathname;\n        const tag = `${_constants1.NEXT_CACHE_IMPLICIT_TAG_ID}${parsedPathname}`;\n        if (!((_staticGenerationStore_tags1 = staticGenerationStore.tags) == null ? void 0 : _staticGenerationStore_tags1.includes(tag))) {\n            staticGenerationStore.tags.push(tag);\n        }\n        newTags.push(tag);\n    }\n    return newTags;\n}\nfunction trackFetchMetric(staticGenerationStore, ctx) {\n    var _staticGenerationStore_requestEndedState;\n    if (!staticGenerationStore || ((_staticGenerationStore_requestEndedState = staticGenerationStore.requestEndedState) == null ? void 0 : _staticGenerationStore_requestEndedState.ended) || \"development\" !== \"development\") {\n        return;\n    }\n    staticGenerationStore.fetchMetrics ??= [];\n    const dedupeFields = [\n        \"url\",\n        \"status\",\n        \"method\"\n    ];\n    // don't add metric if one already exists for the fetch\n    if (staticGenerationStore.fetchMetrics.some((metric)=>dedupeFields.every((field)=>metric[field] === ctx[field]))) {\n        return;\n    }\n    staticGenerationStore.fetchMetrics.push({\n        ...ctx,\n        end: Date.now(),\n        idx: staticGenerationStore.nextFetchId || 0\n    });\n    // only store top 10 metrics to avoid storing too many\n    if (staticGenerationStore.fetchMetrics.length > 10) {\n        // sort slowest first as these should be highlighted\n        staticGenerationStore.fetchMetrics.sort((a, b)=>{\n            const aDur = a.end - a.start;\n            const bDur = b.end - b.start;\n            if (aDur < bDur) {\n                return 1;\n            } else if (aDur > bDur) {\n                return -1;\n            }\n            return 0;\n        });\n        // now grab top 10\n        staticGenerationStore.fetchMetrics = staticGenerationStore.fetchMetrics.slice(0, 10);\n    }\n}\nfunction createPatchedFetcher(originFetch, { serverHooks: { DynamicServerError }, staticGenerationAsyncStorage }) {\n    // Create the patched fetch function. We don't set the type here, as it's\n    // verified as the return value of this function.\n    const patched = async (input, init)=>{\n        var _init_method, _init_next;\n        let url;\n        try {\n            url = new URL(input instanceof Request ? input.url : input);\n            url.username = \"\";\n            url.password = \"\";\n        } catch  {\n            // Error caused by malformed URL should be handled by native fetch\n            url = undefined;\n        }\n        const fetchUrl = (url == null ? void 0 : url.href) ?? \"\";\n        const fetchStart = Date.now();\n        const method = (init == null ? void 0 : (_init_method = init.method) == null ? void 0 : _init_method.toUpperCase()) || \"GET\";\n        // Do create a new span trace for internal fetches in the\n        // non-verbose mode.\n        const isInternal = (init == null ? void 0 : (_init_next = init.next) == null ? void 0 : _init_next.internal) === true;\n        const hideSpan = process.env.NEXT_OTEL_FETCH_DISABLED === \"1\";\n        return (0, _tracer.getTracer)().trace(isInternal ? _constants.NextNodeServerSpan.internalFetch : _constants.AppRenderSpan.fetch, {\n            hideSpan,\n            kind: _tracer.SpanKind.CLIENT,\n            spanName: [\n                \"fetch\",\n                method,\n                fetchUrl\n            ].filter(Boolean).join(\" \"),\n            attributes: {\n                \"http.url\": fetchUrl,\n                \"http.method\": method,\n                \"net.peer.name\": url == null ? void 0 : url.hostname,\n                \"net.peer.port\": (url == null ? void 0 : url.port) || undefined\n            }\n        }, async ()=>{\n            var _getRequestMeta;\n            // If this is an internal fetch, we should not do any special treatment.\n            if (isInternal) return originFetch(input, init);\n            const staticGenerationStore = staticGenerationAsyncStorage.getStore();\n            // If the staticGenerationStore is not available, we can't do any\n            // special treatment of fetch, therefore fallback to the original\n            // fetch implementation.\n            if (!staticGenerationStore || staticGenerationStore.isDraftMode) {\n                return originFetch(input, init);\n            }\n            const isRequestInput = input && typeof input === \"object\" && typeof input.method === \"string\";\n            const getRequestMeta = (field)=>{\n                // If request input is present but init is not, retrieve from input first.\n                const value = init == null ? void 0 : init[field];\n                return value || (isRequestInput ? input[field] : null);\n            };\n            let revalidate = undefined;\n            const getNextField = (field)=>{\n                var _init_next, _init_next1, _input_next;\n                return typeof (init == null ? void 0 : (_init_next = init.next) == null ? void 0 : _init_next[field]) !== \"undefined\" ? init == null ? void 0 : (_init_next1 = init.next) == null ? void 0 : _init_next1[field] : isRequestInput ? (_input_next = input.next) == null ? void 0 : _input_next[field] : undefined;\n            };\n            // RequestInit doesn't keep extra fields e.g. next so it's\n            // only available if init is used separate\n            let curRevalidate = getNextField(\"revalidate\");\n            const tags = validateTags(getNextField(\"tags\") || [], `fetch ${input.toString()}`);\n            if (Array.isArray(tags)) {\n                if (!staticGenerationStore.tags) {\n                    staticGenerationStore.tags = [];\n                }\n                for (const tag of tags){\n                    if (!staticGenerationStore.tags.includes(tag)) {\n                        staticGenerationStore.tags.push(tag);\n                    }\n                }\n            }\n            const implicitTags = addImplicitTags(staticGenerationStore);\n            const fetchCacheMode = staticGenerationStore.fetchCache;\n            const isUsingNoStore = !!staticGenerationStore.isUnstableNoStore;\n            let _cache = getRequestMeta(\"cache\");\n            let cacheReason = \"\";\n            if (typeof _cache === \"string\" && typeof curRevalidate !== \"undefined\") {\n                // when providing fetch with a Request input, it'll automatically set a cache value of 'default'\n                // we only want to warn if the user is explicitly setting a cache value\n                if (!(isRequestInput && _cache === \"default\")) {\n                    _log.warn(`fetch for ${fetchUrl} on ${staticGenerationStore.urlPathname} specified \"cache: ${_cache}\" and \"revalidate: ${curRevalidate}\", only one should be specified.`);\n                }\n                _cache = undefined;\n            }\n            if (_cache === \"force-cache\") {\n                curRevalidate = false;\n            } else if (_cache === \"no-cache\" || _cache === \"no-store\" || fetchCacheMode === \"force-no-store\" || fetchCacheMode === \"only-no-store\") {\n                curRevalidate = 0;\n            }\n            if (_cache === \"no-cache\" || _cache === \"no-store\") {\n                cacheReason = `cache: ${_cache}`;\n            }\n            revalidate = validateRevalidate(curRevalidate, staticGenerationStore.urlPathname);\n            const _headers = getRequestMeta(\"headers\");\n            const initHeaders = typeof (_headers == null ? void 0 : _headers.get) === \"function\" ? _headers : new Headers(_headers || {});\n            const hasUnCacheableHeader = initHeaders.get(\"authorization\") || initHeaders.get(\"cookie\");\n            const isUnCacheableMethod = ![\n                \"get\",\n                \"head\"\n            ].includes(((_getRequestMeta = getRequestMeta(\"method\")) == null ? void 0 : _getRequestMeta.toLowerCase()) || \"get\");\n            // if there are authorized headers or a POST method and\n            // dynamic data usage was present above the tree we bail\n            // e.g. if cookies() is used before an authed/POST fetch\n            const autoNoCache = (hasUnCacheableHeader || isUnCacheableMethod) && staticGenerationStore.revalidate === 0;\n            switch(fetchCacheMode){\n                case \"force-no-store\":\n                    {\n                        cacheReason = \"fetchCache = force-no-store\";\n                        break;\n                    }\n                case \"only-no-store\":\n                    {\n                        if (_cache === \"force-cache\" || typeof revalidate !== \"undefined\" && (revalidate === false || revalidate > 0)) {\n                            throw new Error(`cache: 'force-cache' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-no-store'`);\n                        }\n                        cacheReason = \"fetchCache = only-no-store\";\n                        break;\n                    }\n                case \"only-cache\":\n                    {\n                        if (_cache === \"no-store\") {\n                            throw new Error(`cache: 'no-store' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-cache'`);\n                        }\n                        break;\n                    }\n                case \"force-cache\":\n                    {\n                        if (typeof curRevalidate === \"undefined\" || curRevalidate === 0) {\n                            cacheReason = \"fetchCache = force-cache\";\n                            revalidate = false;\n                        }\n                        break;\n                    }\n                default:\n            }\n            if (typeof revalidate === \"undefined\") {\n                if (fetchCacheMode === \"default-cache\") {\n                    revalidate = false;\n                    cacheReason = \"fetchCache = default-cache\";\n                } else if (autoNoCache) {\n                    revalidate = 0;\n                    cacheReason = \"auto no cache\";\n                } else if (fetchCacheMode === \"default-no-store\") {\n                    revalidate = 0;\n                    cacheReason = \"fetchCache = default-no-store\";\n                } else if (isUsingNoStore) {\n                    revalidate = 0;\n                    cacheReason = \"noStore call\";\n                } else {\n                    cacheReason = \"auto cache\";\n                    revalidate = typeof staticGenerationStore.revalidate === \"boolean\" || typeof staticGenerationStore.revalidate === \"undefined\" ? false : staticGenerationStore.revalidate;\n                }\n            } else if (!cacheReason) {\n                cacheReason = `revalidate: ${revalidate}`;\n            }\n            if (// when force static is configured we don't bail from\n            // `revalidate: 0` values\n            !(staticGenerationStore.forceStatic && revalidate === 0) && // we don't consider autoNoCache to switch to dynamic during\n            // revalidate although if it occurs during build we do\n            !autoNoCache && // If the revalidate value isn't currently set or the value is less\n            // than the current revalidate value, we should update the revalidate\n            // value.\n            (typeof staticGenerationStore.revalidate === \"undefined\" || typeof revalidate === \"number\" && (staticGenerationStore.revalidate === false || typeof staticGenerationStore.revalidate === \"number\" && revalidate < staticGenerationStore.revalidate))) {\n                // If we were setting the revalidate value to 0, we should try to\n                // postpone instead first.\n                if (revalidate === 0) {\n                    (0, _dynamicrendering.trackDynamicFetch)(staticGenerationStore, \"revalidate: 0\");\n                }\n                staticGenerationStore.revalidate = revalidate;\n            }\n            const isCacheableRevalidate = typeof revalidate === \"number\" && revalidate > 0 || revalidate === false;\n            let cacheKey;\n            if (staticGenerationStore.incrementalCache && isCacheableRevalidate) {\n                try {\n                    cacheKey = await staticGenerationStore.incrementalCache.fetchCacheKey(fetchUrl, isRequestInput ? input : init);\n                } catch (err) {\n                    console.error(`Failed to generate cache key for`, input);\n                }\n            }\n            const fetchIdx = staticGenerationStore.nextFetchId ?? 1;\n            staticGenerationStore.nextFetchId = fetchIdx + 1;\n            const normalizedRevalidate = typeof revalidate !== \"number\" ? _constants1.CACHE_ONE_YEAR : revalidate;\n            const doOriginalFetch = async (isStale, cacheReasonOverride)=>{\n                const requestInputFields = [\n                    \"cache\",\n                    \"credentials\",\n                    \"headers\",\n                    \"integrity\",\n                    \"keepalive\",\n                    \"method\",\n                    \"mode\",\n                    \"redirect\",\n                    \"referrer\",\n                    \"referrerPolicy\",\n                    \"window\",\n                    \"duplex\",\n                    // don't pass through signal when revalidating\n                    ...isStale ? [] : [\n                        \"signal\"\n                    ]\n                ];\n                if (isRequestInput) {\n                    const reqInput = input;\n                    const reqOptions = {\n                        body: reqInput._ogBody || reqInput.body\n                    };\n                    for (const field of requestInputFields){\n                        // @ts-expect-error custom fields\n                        reqOptions[field] = reqInput[field];\n                    }\n                    input = new Request(reqInput.url, reqOptions);\n                } else if (init) {\n                    const { _ogBody, body, signal, ...otherInput } = init;\n                    init = {\n                        ...otherInput,\n                        body: _ogBody || body,\n                        signal: isStale ? undefined : signal\n                    };\n                }\n                // add metadata to init without editing the original\n                const clonedInit = {\n                    ...init,\n                    next: {\n                        ...init == null ? void 0 : init.next,\n                        fetchType: \"origin\",\n                        fetchIdx\n                    }\n                };\n                return originFetch(input, clonedInit).then(async (res)=>{\n                    if (!isStale) {\n                        trackFetchMetric(staticGenerationStore, {\n                            start: fetchStart,\n                            url: fetchUrl,\n                            cacheReason: cacheReasonOverride || cacheReason,\n                            cacheStatus: revalidate === 0 || cacheReasonOverride ? \"skip\" : \"miss\",\n                            status: res.status,\n                            method: clonedInit.method || \"GET\"\n                        });\n                    }\n                    if (res.status === 200 && staticGenerationStore.incrementalCache && cacheKey && isCacheableRevalidate) {\n                        const bodyBuffer = Buffer.from(await res.arrayBuffer());\n                        try {\n                            await staticGenerationStore.incrementalCache.set(cacheKey, {\n                                kind: \"FETCH\",\n                                data: {\n                                    headers: Object.fromEntries(res.headers.entries()),\n                                    body: bodyBuffer.toString(\"base64\"),\n                                    status: res.status,\n                                    url: res.url\n                                },\n                                revalidate: normalizedRevalidate\n                            }, {\n                                fetchCache: true,\n                                revalidate,\n                                fetchUrl,\n                                fetchIdx,\n                                tags\n                            });\n                        } catch (err) {\n                            console.warn(`Failed to set fetch cache`, input, err);\n                        }\n                        const response = new Response(bodyBuffer, {\n                            headers: new Headers(res.headers),\n                            status: res.status\n                        });\n                        Object.defineProperty(response, \"url\", {\n                            value: res.url\n                        });\n                        return response;\n                    }\n                    return res;\n                });\n            };\n            let handleUnlock = ()=>Promise.resolve();\n            let cacheReasonOverride;\n            let isForegroundRevalidate = false;\n            if (cacheKey && staticGenerationStore.incrementalCache) {\n                handleUnlock = await staticGenerationStore.incrementalCache.lock(cacheKey);\n                const entry = staticGenerationStore.isOnDemandRevalidate ? null : await staticGenerationStore.incrementalCache.get(cacheKey, {\n                    kindHint: \"fetch\",\n                    revalidate,\n                    fetchUrl,\n                    fetchIdx,\n                    tags,\n                    softTags: implicitTags\n                });\n                if (entry) {\n                    await handleUnlock();\n                } else {\n                    // in dev, incremental cache response will be null in case the browser adds `cache-control: no-cache` in the request headers\n                    cacheReasonOverride = \"cache-control: no-cache (hard refresh)\";\n                }\n                if ((entry == null ? void 0 : entry.value) && entry.value.kind === \"FETCH\") {\n                    // when stale and is revalidating we wait for fresh data\n                    // so the revalidated entry has the updated data\n                    if (staticGenerationStore.isRevalidate && entry.isStale) {\n                        isForegroundRevalidate = true;\n                    } else {\n                        if (entry.isStale) {\n                            staticGenerationStore.pendingRevalidates ??= {};\n                            if (!staticGenerationStore.pendingRevalidates[cacheKey]) {\n                                staticGenerationStore.pendingRevalidates[cacheKey] = doOriginalFetch(true).catch(console.error).finally(()=>{\n                                    staticGenerationStore.pendingRevalidates ??= {};\n                                    delete staticGenerationStore.pendingRevalidates[cacheKey || \"\"];\n                                });\n                            }\n                        }\n                        const resData = entry.value.data;\n                        trackFetchMetric(staticGenerationStore, {\n                            start: fetchStart,\n                            url: fetchUrl,\n                            cacheReason,\n                            cacheStatus: \"hit\",\n                            status: resData.status || 200,\n                            method: (init == null ? void 0 : init.method) || \"GET\"\n                        });\n                        const response = new Response(Buffer.from(resData.body, \"base64\"), {\n                            headers: resData.headers,\n                            status: resData.status\n                        });\n                        Object.defineProperty(response, \"url\", {\n                            value: entry.value.data.url\n                        });\n                        return response;\n                    }\n                }\n            }\n            if (staticGenerationStore.isStaticGeneration && init && typeof init === \"object\") {\n                const { cache } = init;\n                // Delete `cache` property as Cloudflare Workers will throw an error\n                if (isEdgeRuntime) delete init.cache;\n                if (!staticGenerationStore.forceStatic && cache === \"no-store\") {\n                    const dynamicUsageReason = `no-store fetch ${input}${staticGenerationStore.urlPathname ? ` ${staticGenerationStore.urlPathname}` : \"\"}`;\n                    // If enabled, we should bail out of static generation.\n                    (0, _dynamicrendering.trackDynamicFetch)(staticGenerationStore, dynamicUsageReason);\n                    // PPR is not enabled, or React postpone is not available, we\n                    // should set the revalidate to 0.\n                    staticGenerationStore.revalidate = 0;\n                    const err = new DynamicServerError(dynamicUsageReason);\n                    staticGenerationStore.dynamicUsageErr = err;\n                    staticGenerationStore.dynamicUsageDescription = dynamicUsageReason;\n                    throw err;\n                }\n                const hasNextConfig = \"next\" in init;\n                const { next = {} } = init;\n                if (typeof next.revalidate === \"number\" && (typeof staticGenerationStore.revalidate === \"undefined\" || typeof staticGenerationStore.revalidate === \"number\" && next.revalidate < staticGenerationStore.revalidate)) {\n                    if (!staticGenerationStore.forceDynamic && !staticGenerationStore.forceStatic && next.revalidate === 0) {\n                        const dynamicUsageReason = `revalidate: 0 fetch ${input}${staticGenerationStore.urlPathname ? ` ${staticGenerationStore.urlPathname}` : \"\"}`;\n                        // If enabled, we should bail out of static generation.\n                        (0, _dynamicrendering.trackDynamicFetch)(staticGenerationStore, dynamicUsageReason);\n                        const err = new DynamicServerError(dynamicUsageReason);\n                        staticGenerationStore.dynamicUsageErr = err;\n                        staticGenerationStore.dynamicUsageDescription = dynamicUsageReason;\n                        throw err;\n                    }\n                    if (!staticGenerationStore.forceStatic || next.revalidate !== 0) {\n                        staticGenerationStore.revalidate = next.revalidate;\n                    }\n                }\n                if (hasNextConfig) delete init.next;\n            }\n            // if we are revalidating the whole page via time or on-demand and\n            // the fetch cache entry is stale we should still de-dupe the\n            // origin hit if it's a cache-able entry\n            if (cacheKey && isForegroundRevalidate) {\n                staticGenerationStore.pendingRevalidates ??= {};\n                const pendingRevalidate = staticGenerationStore.pendingRevalidates[cacheKey];\n                if (pendingRevalidate) {\n                    const res = await pendingRevalidate;\n                    return res.clone();\n                }\n                return staticGenerationStore.pendingRevalidates[cacheKey] = doOriginalFetch(true, cacheReasonOverride).finally(async ()=>{\n                    staticGenerationStore.pendingRevalidates ??= {};\n                    delete staticGenerationStore.pendingRevalidates[cacheKey || \"\"];\n                    await handleUnlock();\n                });\n            } else {\n                return doOriginalFetch(false, cacheReasonOverride).finally(handleUnlock);\n            }\n        });\n    };\n    // Attach the necessary properties to the patched fetch function.\n    patched.__nextPatched = true;\n    patched.__nextGetStaticStore = ()=>staticGenerationAsyncStorage;\n    patched._nextOriginalFetch = originFetch;\n    return patched;\n}\nfunction patchFetch(options) {\n    // If we've already patched fetch, we should not patch it again.\n    if (isPatchedFetch(globalThis.fetch)) return;\n    // Grab the original fetch function. We'll attach this so we can use it in\n    // the patched fetch function.\n    const original = globalThis.fetch;\n    // Set the global fetch to the patched fetch.\n    globalThis.fetch = createPatchedFetcher(original, options);\n}\n\n//# sourceMappingURL=patch-fetch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/lib/trace/constants.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/server/lib/trace/constants.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/**\n * Contains predefined constants for the trace span name in next/server.\n *\n * Currently, next/server/tracer is internal implementation only for tracking\n * next.js's implementation only with known span names defined here.\n **/ // eslint typescript has a bug with TS enums\n/* eslint-disable no-shadow */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    AppRenderSpan: function() {\n        return AppRenderSpan;\n    },\n    AppRouteRouteHandlersSpan: function() {\n        return AppRouteRouteHandlersSpan;\n    },\n    BaseServerSpan: function() {\n        return BaseServerSpan;\n    },\n    LoadComponentsSpan: function() {\n        return LoadComponentsSpan;\n    },\n    LogSpanAllowList: function() {\n        return LogSpanAllowList;\n    },\n    MiddlewareSpan: function() {\n        return MiddlewareSpan;\n    },\n    NextNodeServerSpan: function() {\n        return NextNodeServerSpan;\n    },\n    NextServerSpan: function() {\n        return NextServerSpan;\n    },\n    NextVanillaSpanAllowlist: function() {\n        return NextVanillaSpanAllowlist;\n    },\n    NodeSpan: function() {\n        return NodeSpan;\n    },\n    RenderSpan: function() {\n        return RenderSpan;\n    },\n    ResolveMetadataSpan: function() {\n        return ResolveMetadataSpan;\n    },\n    RouterSpan: function() {\n        return RouterSpan;\n    },\n    StartServerSpan: function() {\n        return StartServerSpan;\n    }\n});\nvar BaseServerSpan;\n(function(BaseServerSpan) {\n    BaseServerSpan[\"handleRequest\"] = \"BaseServer.handleRequest\";\n    BaseServerSpan[\"run\"] = \"BaseServer.run\";\n    BaseServerSpan[\"pipe\"] = \"BaseServer.pipe\";\n    BaseServerSpan[\"getStaticHTML\"] = \"BaseServer.getStaticHTML\";\n    BaseServerSpan[\"render\"] = \"BaseServer.render\";\n    BaseServerSpan[\"renderToResponseWithComponents\"] = \"BaseServer.renderToResponseWithComponents\";\n    BaseServerSpan[\"renderToResponse\"] = \"BaseServer.renderToResponse\";\n    BaseServerSpan[\"renderToHTML\"] = \"BaseServer.renderToHTML\";\n    BaseServerSpan[\"renderError\"] = \"BaseServer.renderError\";\n    BaseServerSpan[\"renderErrorToResponse\"] = \"BaseServer.renderErrorToResponse\";\n    BaseServerSpan[\"renderErrorToHTML\"] = \"BaseServer.renderErrorToHTML\";\n    BaseServerSpan[\"render404\"] = \"BaseServer.render404\";\n})(BaseServerSpan || (BaseServerSpan = {}));\nvar LoadComponentsSpan;\n(function(LoadComponentsSpan) {\n    LoadComponentsSpan[\"loadDefaultErrorComponents\"] = \"LoadComponents.loadDefaultErrorComponents\";\n    LoadComponentsSpan[\"loadComponents\"] = \"LoadComponents.loadComponents\";\n})(LoadComponentsSpan || (LoadComponentsSpan = {}));\nvar NextServerSpan;\n(function(NextServerSpan) {\n    NextServerSpan[\"getRequestHandler\"] = \"NextServer.getRequestHandler\";\n    NextServerSpan[\"getServer\"] = \"NextServer.getServer\";\n    NextServerSpan[\"getServerRequestHandler\"] = \"NextServer.getServerRequestHandler\";\n    NextServerSpan[\"createServer\"] = \"createServer.createServer\";\n})(NextServerSpan || (NextServerSpan = {}));\nvar NextNodeServerSpan;\n(function(NextNodeServerSpan) {\n    NextNodeServerSpan[\"compression\"] = \"NextNodeServer.compression\";\n    NextNodeServerSpan[\"getBuildId\"] = \"NextNodeServer.getBuildId\";\n    NextNodeServerSpan[\"createComponentTree\"] = \"NextNodeServer.createComponentTree\";\n    NextNodeServerSpan[\"clientComponentLoading\"] = \"NextNodeServer.clientComponentLoading\";\n    NextNodeServerSpan[\"getLayoutOrPageModule\"] = \"NextNodeServer.getLayoutOrPageModule\";\n    NextNodeServerSpan[\"generateStaticRoutes\"] = \"NextNodeServer.generateStaticRoutes\";\n    NextNodeServerSpan[\"generateFsStaticRoutes\"] = \"NextNodeServer.generateFsStaticRoutes\";\n    NextNodeServerSpan[\"generatePublicRoutes\"] = \"NextNodeServer.generatePublicRoutes\";\n    NextNodeServerSpan[\"generateImageRoutes\"] = \"NextNodeServer.generateImageRoutes.route\";\n    NextNodeServerSpan[\"sendRenderResult\"] = \"NextNodeServer.sendRenderResult\";\n    NextNodeServerSpan[\"proxyRequest\"] = \"NextNodeServer.proxyRequest\";\n    NextNodeServerSpan[\"runApi\"] = \"NextNodeServer.runApi\";\n    NextNodeServerSpan[\"render\"] = \"NextNodeServer.render\";\n    NextNodeServerSpan[\"renderHTML\"] = \"NextNodeServer.renderHTML\";\n    NextNodeServerSpan[\"imageOptimizer\"] = \"NextNodeServer.imageOptimizer\";\n    NextNodeServerSpan[\"getPagePath\"] = \"NextNodeServer.getPagePath\";\n    NextNodeServerSpan[\"getRoutesManifest\"] = \"NextNodeServer.getRoutesManifest\";\n    NextNodeServerSpan[\"findPageComponents\"] = \"NextNodeServer.findPageComponents\";\n    NextNodeServerSpan[\"getFontManifest\"] = \"NextNodeServer.getFontManifest\";\n    NextNodeServerSpan[\"getServerComponentManifest\"] = \"NextNodeServer.getServerComponentManifest\";\n    NextNodeServerSpan[\"getRequestHandler\"] = \"NextNodeServer.getRequestHandler\";\n    NextNodeServerSpan[\"renderToHTML\"] = \"NextNodeServer.renderToHTML\";\n    NextNodeServerSpan[\"renderError\"] = \"NextNodeServer.renderError\";\n    NextNodeServerSpan[\"renderErrorToHTML\"] = \"NextNodeServer.renderErrorToHTML\";\n    NextNodeServerSpan[\"render404\"] = \"NextNodeServer.render404\";\n    NextNodeServerSpan[\"startResponse\"] = \"NextNodeServer.startResponse\";\n    // nested inner span, does not require parent scope name\n    NextNodeServerSpan[\"route\"] = \"route\";\n    NextNodeServerSpan[\"onProxyReq\"] = \"onProxyReq\";\n    NextNodeServerSpan[\"apiResolver\"] = \"apiResolver\";\n    NextNodeServerSpan[\"internalFetch\"] = \"internalFetch\";\n})(NextNodeServerSpan || (NextNodeServerSpan = {}));\nvar StartServerSpan;\n(function(StartServerSpan) {\n    StartServerSpan[\"startServer\"] = \"startServer.startServer\";\n})(StartServerSpan || (StartServerSpan = {}));\nvar RenderSpan;\n(function(RenderSpan) {\n    RenderSpan[\"getServerSideProps\"] = \"Render.getServerSideProps\";\n    RenderSpan[\"getStaticProps\"] = \"Render.getStaticProps\";\n    RenderSpan[\"renderToString\"] = \"Render.renderToString\";\n    RenderSpan[\"renderDocument\"] = \"Render.renderDocument\";\n    RenderSpan[\"createBodyResult\"] = \"Render.createBodyResult\";\n})(RenderSpan || (RenderSpan = {}));\nvar AppRenderSpan;\n(function(AppRenderSpan) {\n    AppRenderSpan[\"renderToString\"] = \"AppRender.renderToString\";\n    AppRenderSpan[\"renderToReadableStream\"] = \"AppRender.renderToReadableStream\";\n    AppRenderSpan[\"getBodyResult\"] = \"AppRender.getBodyResult\";\n    AppRenderSpan[\"fetch\"] = \"AppRender.fetch\";\n})(AppRenderSpan || (AppRenderSpan = {}));\nvar RouterSpan;\n(function(RouterSpan) {\n    RouterSpan[\"executeRoute\"] = \"Router.executeRoute\";\n})(RouterSpan || (RouterSpan = {}));\nvar NodeSpan;\n(function(NodeSpan) {\n    NodeSpan[\"runHandler\"] = \"Node.runHandler\";\n})(NodeSpan || (NodeSpan = {}));\nvar AppRouteRouteHandlersSpan;\n(function(AppRouteRouteHandlersSpan) {\n    AppRouteRouteHandlersSpan[\"runHandler\"] = \"AppRouteRouteHandlers.runHandler\";\n})(AppRouteRouteHandlersSpan || (AppRouteRouteHandlersSpan = {}));\nvar ResolveMetadataSpan;\n(function(ResolveMetadataSpan) {\n    ResolveMetadataSpan[\"generateMetadata\"] = \"ResolveMetadata.generateMetadata\";\n    ResolveMetadataSpan[\"generateViewport\"] = \"ResolveMetadata.generateViewport\";\n})(ResolveMetadataSpan || (ResolveMetadataSpan = {}));\nvar MiddlewareSpan;\n(function(MiddlewareSpan) {\n    MiddlewareSpan[\"execute\"] = \"Middleware.execute\";\n})(MiddlewareSpan || (MiddlewareSpan = {}));\nconst NextVanillaSpanAllowlist = [\n    \"Middleware.execute\",\n    \"BaseServer.handleRequest\",\n    \"Render.getServerSideProps\",\n    \"Render.getStaticProps\",\n    \"AppRender.fetch\",\n    \"AppRender.getBodyResult\",\n    \"Render.renderDocument\",\n    \"Node.runHandler\",\n    \"AppRouteRouteHandlers.runHandler\",\n    \"ResolveMetadata.generateMetadata\",\n    \"ResolveMetadata.generateViewport\",\n    \"NextNodeServer.createComponentTree\",\n    \"NextNodeServer.findPageComponents\",\n    \"NextNodeServer.getLayoutOrPageModule\",\n    \"NextNodeServer.startResponse\",\n    \"NextNodeServer.clientComponentLoading\"\n];\nconst LogSpanAllowList = [\n    \"NextNodeServer.findPageComponents\",\n    \"NextNodeServer.createComponentTree\",\n    \"NextNodeServer.clientComponentLoading\"\n];\n\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/server/lib/trace/tracer.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    SpanKind: function() {\n        return SpanKind;\n    },\n    SpanStatusCode: function() {\n        return SpanStatusCode;\n    },\n    getTracer: function() {\n        return getTracer;\n    }\n});\nconst _constants = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\nlet api;\n// we want to allow users to use their own version of @opentelemetry/api if they\n// want to, so we try to require it first, and if it fails we fall back to the\n// version that is bundled with Next.js\n// this is because @opentelemetry/api has to be synced with the version of\n// @opentelemetry/tracing that is used, and we don't want to force users to use\n// the version that is bundled with Next.js.\n// the API is ~stable, so this should be fine\nif (false) {} else {\n    try {\n        api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n    } catch (err) {\n        api = __webpack_require__(/*! next/dist/compiled/@opentelemetry/api */ \"(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n    }\n}\nconst { context, propagation, trace, SpanStatusCode, SpanKind, ROOT_CONTEXT } = api;\nconst isPromise = (p)=>{\n    return p !== null && typeof p === \"object\" && typeof p.then === \"function\";\n};\nconst closeSpanWithError = (span, error)=>{\n    if ((error == null ? void 0 : error.bubble) === true) {\n        span.setAttribute(\"next.bubble\", true);\n    } else {\n        if (error) {\n            span.recordException(error);\n        }\n        span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: error == null ? void 0 : error.message\n        });\n    }\n    span.end();\n};\n/** we use this map to propagate attributes from nested spans to the top span */ const rootSpanAttributesStore = new Map();\nconst rootSpanIdKey = api.createContextKey(\"next.rootSpanId\");\nlet lastSpanId = 0;\nconst getSpanId = ()=>lastSpanId++;\nclass NextTracerImpl {\n    /**\n   * Returns an instance to the trace with configured name.\n   * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,\n   * This should be lazily evaluated.\n   */ getTracerInstance() {\n        return trace.getTracer(\"next.js\", \"0.0.1\");\n    }\n    getContext() {\n        return context;\n    }\n    getActiveScopeSpan() {\n        return trace.getSpan(context == null ? void 0 : context.active());\n    }\n    withPropagatedContext(carrier, fn, getter) {\n        const activeContext = context.active();\n        if (trace.getSpanContext(activeContext)) {\n            // Active span is already set, too late to propagate.\n            return fn();\n        }\n        const remoteContext = propagation.extract(activeContext, carrier, getter);\n        return context.with(remoteContext, fn);\n    }\n    trace(...args) {\n        var _trace_getSpanContext;\n        const [type, fnOrOptions, fnOrEmpty] = args;\n        // coerce options form overload\n        const { fn, options } = typeof fnOrOptions === \"function\" ? {\n            fn: fnOrOptions,\n            options: {}\n        } : {\n            fn: fnOrEmpty,\n            options: {\n                ...fnOrOptions\n            }\n        };\n        const spanName = options.spanName ?? type;\n        if (!_constants.NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== \"1\" || options.hideSpan) {\n            return fn();\n        }\n        // Trying to get active scoped span to assign parent. If option specifies parent span manually, will try to use it.\n        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        let isRootSpan = false;\n        if (!spanContext) {\n            spanContext = (context == null ? void 0 : context.active()) ?? ROOT_CONTEXT;\n            isRootSpan = true;\n        } else if ((_trace_getSpanContext = trace.getSpanContext(spanContext)) == null ? void 0 : _trace_getSpanContext.isRemote) {\n            isRootSpan = true;\n        }\n        const spanId = getSpanId();\n        options.attributes = {\n            \"next.span_name\": spanName,\n            \"next.span_type\": type,\n            ...options.attributes\n        };\n        return context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{\n                const startTime = \"performance\" in globalThis ? globalThis.performance.now() : undefined;\n                const onCleanup = ()=>{\n                    rootSpanAttributesStore.delete(spanId);\n                    if (startTime && process.env.NEXT_OTEL_PERFORMANCE_PREFIX && _constants.LogSpanAllowList.includes(type || \"\")) {\n                        performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(type.split(\".\").pop() || \"\").replace(/[A-Z]/g, (match)=>\"-\" + match.toLowerCase())}`, {\n                            start: startTime,\n                            end: performance.now()\n                        });\n                    }\n                };\n                if (isRootSpan) {\n                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));\n                }\n                try {\n                    if (fn.length > 1) {\n                        return fn(span, (err)=>closeSpanWithError(span, err));\n                    }\n                    const result = fn(span);\n                    if (isPromise(result)) {\n                        // If there's error make sure it throws\n                        return result.then((res)=>{\n                            span.end();\n                            // Need to pass down the promise result,\n                            // it could be react stream response with error { error, stream }\n                            return res;\n                        }).catch((err)=>{\n                            closeSpanWithError(span, err);\n                            throw err;\n                        }).finally(onCleanup);\n                    } else {\n                        span.end();\n                        onCleanup();\n                    }\n                    return result;\n                } catch (err) {\n                    closeSpanWithError(span, err);\n                    onCleanup();\n                    throw err;\n                }\n            }));\n    }\n    wrap(...args) {\n        const tracer = this;\n        const [name, options, fn] = args.length === 3 ? args : [\n            args[0],\n            {},\n            args[1]\n        ];\n        if (!_constants.NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== \"1\") {\n            return fn;\n        }\n        return function() {\n            let optionsObj = options;\n            if (typeof optionsObj === \"function\" && typeof fn === \"function\") {\n                optionsObj = optionsObj.apply(this, arguments);\n            }\n            const lastArgId = arguments.length - 1;\n            const cb = arguments[lastArgId];\n            if (typeof cb === \"function\") {\n                const scopeBoundCb = tracer.getContext().bind(context.active(), cb);\n                return tracer.trace(name, optionsObj, (_span, done)=>{\n                    arguments[lastArgId] = function(err) {\n                        done == null ? void 0 : done(err);\n                        return scopeBoundCb.apply(this, arguments);\n                    };\n                    return fn.apply(this, arguments);\n                });\n            } else {\n                return tracer.trace(name, optionsObj, ()=>fn.apply(this, arguments));\n            }\n        };\n    }\n    startSpan(...args) {\n        const [type, options] = args;\n        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        return this.getTracerInstance().startSpan(type, options, spanContext);\n    }\n    getSpanContext(parentSpan) {\n        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;\n        return spanContext;\n    }\n    getRootSpanAttributes() {\n        const spanId = context.active().getValue(rootSpanIdKey);\n        return rootSpanAttributesStore.get(spanId);\n    }\n}\nconst getTracer = (()=>{\n    const tracer = new NextTracerImpl();\n    return ()=>tracer;\n})();\n\n//# sourceMappingURL=tracer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\n");

/***/ })

};
;